<?php

/**
 * This file is part of the fa bundle.
 *
 * @copyright Copyright (c) 2014, FMG
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Fa\Bundle\CoreBundle\Walker;

use Doctrine\ORM\Query\SqlWalker;

/**
 * This is sql walker.
 *
 * This walker is used to modify the sql generated by doctrine.
 *
 * @author Sagar lotiya  <sagar@aspl.in>
 * @copyright 2014 Friday Media Group Ltd
 * @version v1.0
 */
class SortableNullsWalker extends SqlWalker
{
    const NULLS_FIRST = 'NULLS FIRST';
    const NULLS_LAST = 'NULLS LAST';

    public function walkOrderByClause($orderByClause)
    {
        $sql = parent::walkOrderByClause($orderByClause);

        if ($nullFields = $this->getQuery()->getHint('SortableNullsWalker.fields'))
        {
            if (is_array($nullFields))
            {
                // for mysql the nulls last is represented with - before the field name
                foreach ($nullFields as $field => $sorting)
                {
                    /**
                     * NULLs are considered lower than any non-NULL value,
                     * except if a â€“ (minus) character is added before
                     * the column name and ASC is changed to DESC, or DESC to ASC;
                     * this minus-before-column-name feature seems undocumented.
                     */
                    if ('NULLS LAST' === $sorting)
                    {
                        $sql = preg_replace_callback('/ORDER BY (.+)'.'('.$field.') (ASC|DESC)/i', function($matches) {
                            if ($matches[3] === 'ASC') {
                                $order = 'DESC';
                            } elseif ($matches[3] === 'DESC') {
                                $order = 'ASC';
                            }

                            return ('ORDER BY -'.$matches[1].$matches[2].' '.$order.', '.$matches[1].$matches[2].' '.$matches[3]);
                        }, $sql);
                    }
                }
            }
        }

        return $sql;
    }
}