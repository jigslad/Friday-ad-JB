<?php

namespace Fa\Bundle\CoreBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Fa\Bundle\CoreBundle\Repository\ConfigRepository;
use Fa\Bundle\CoreBundle\Manager\CommonManager;

/**
 * Fa\Bundle\CoreBundle\Repository\ConfigRuleRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ConfigRuleRepository extends EntityRepository
{
    use \Fa\Bundle\CoreBundle\Search\Search;

    const ALIAS = 'cr';

    /**
     * prepareQueryBuilder.
     *
     * @param array $data array of data
     *
     * @return Doctrine\ORM\QueryBuilder The query builder
     */
    public function getBaseQueryBuilder()
    {
        return $this->createQueryBuilder(self::ALIAS);
    }

    /**
     * Add entity type filter to existing query object
     *
     * @param integer $type entity type
     *
     * @return void
     */
    protected function addTypeFilter($type = null)
    {
        $this->queryBuilder->andWhere($this->getRepositoryAlias().'.type = '.$type);
    }

    /**
     * Get category wise config rules query
     *
     * @param integer $categoryId category id
     *
     * @return object
     */
    public function getConfigRulesQueryBuilderByCategoryId($configId, $categoryId = null, $limit = null)
    {
        $queryBuilder = $this->getBaseQueryBuilder()
        ->select(self::ALIAS, ConfigRepository::ALIAS)
        ->innerJoin(self::ALIAS.'.config', ConfigRepository::ALIAS)
        ->where(self::ALIAS.'.config = '.$configId)
        ->orderBy(self::ALIAS.'.id', 'desc');

        if ($categoryId) {
            $queryBuilder->andWhere(self::ALIAS.'.category = '.$categoryId);
        }

        if ($limit) {
            $queryBuilder->setMaxResults($limit);
        }

        return $queryBuilder;
    }

    /**
     * Get category wise active config rules
     *
     * @param integer $categoryId category id
     *
     * @return array
     */
    public function getActiveConfigRulesByCategoryId($configId, $categoryId = null, $limit = null)
    {
        $queryBuilder = $this->getConfigRulesQueryBuilderByCategoryId($configId, $categoryId, $limit);

        return $queryBuilder->andWhere(self::ALIAS.'.status = 1')->getQuery()->getResult();
    }

    /**
     * Get config rules by category or category ancestor
     *
     * @param integer $categoryId category id
     *
     * @return array
     */
    public function getActiveConfigRulesByCategoryAncestor($configId, $categoryId = null, $limit = null)
    {
        // If given category have not config rules defined then find by their parent categories.
        $configRules = $this->getActiveConfigRulesByCategoryId($configId, $categoryId, $limit);

        if (!count($configRules) && $categoryId) {
            $category = $this->_em->getRepository('FaEntityBundle:Category')->find($categoryId);
            if ($category && $category->getLvl() > 1) {
                $parent = $category->getParent();
                return $this->getActiveConfigRulesByCategoryAncestor($configId, $parent->getId(), $limit);
            }
        }

        return $configRules;
    }

    /**
     * Get table name.
     */
    private function getConfigRuleTableName()
    {
        return $this->_em->getClassMetadata('FaCoreBundle:ConfigRule')->getTableName();
    }

    /**
     * Get active highest paypal commission.
     *
     * @param array  $locationGroupIds Location id array.
     * @param object $container        Container object.
     *
     * @return number
     */
    public function getActiveHighestPaypalCommission(array $locationGroupIds, $container = null)
    {
        $paypalCommision    = null;
        $paypalCommisionVal = 0;
        if ($container) {
            $culture     = CommonManager::getCurrentCulture($container);
            $tableName   = $this->getConfigRuleTableName();
            $cacheKey    = $tableName.'|'.__FUNCTION__.'|'.implode('_', $locationGroupIds).'_'.$culture;
            $cachedValue = CommonManager::getCacheVersion($container, $cacheKey);

            if ($cachedValue !== false) {
                return $cachedValue;
            }
        }

        // check with location group and date range.
        if (count($locationGroupIds)) {
            $queryBuilder = $this->getConfigRulesQueryBuilderByCategoryId(ConfigRepository::PAYPAL_COMMISION, null, 1)
                            ->orderBy(self::ALIAS.'.value', 'desc')
                            ->andWhere(self::ALIAS.'.location_group IN (:locationGroupIds)')
                            ->setParameter('locationGroupIds', $locationGroupIds)
                            ->andWhere('('.time().' >= '.self::ALIAS.'.period_from AND '.time().' <= '.self::ALIAS.'.period_to) OR ('.time().' >= '.self::ALIAS.'.period_from AND '.self::ALIAS.'.period_to IS NULL) OR ('.self::ALIAS.'.period_from IS NULL AND '.time().' <= '.self::ALIAS.'.period_to)')
                            ->andWhere(self::ALIAS.'.status = 1');

            $paypalCommision = $queryBuilder->getQuery()->getOneOrNullResult();
        }

        // check with date range only.
        if (!$paypalCommision) {
            $queryBuilder = $this->getConfigRulesQueryBuilderByCategoryId(ConfigRepository::PAYPAL_COMMISION, null, 1)
            ->orderBy(self::ALIAS.'.value', 'desc')
            ->andWhere(self::ALIAS.'.location_group IS NULL')
            ->andWhere('('.time().' >= '.self::ALIAS.'.period_from AND '.time().' <= '.self::ALIAS.'.period_to) OR ('.time().' >= '.self::ALIAS.'.period_from AND '.self::ALIAS.'.period_to IS NULL) OR ('.self::ALIAS.'.period_from IS NULL AND '.time().' <= '.self::ALIAS.'.period_to)')
            ->andWhere(self::ALIAS.'.status = 1');

            $paypalCommision = $queryBuilder->getQuery()->getOneOrNullResult();
        }

        // check with status only.
        if (!$paypalCommision) {
            $queryBuilder = $this->getConfigRulesQueryBuilderByCategoryId(ConfigRepository::PAYPAL_COMMISION, null, 1)
            ->orderBy(self::ALIAS.'.value', 'desc')
            ->andWhere(self::ALIAS.'.location_group IS NULL')
            ->andWhere('('.self::ALIAS.'.period_from IS NULL AND '.self::ALIAS.'.period_to IS NULL'.')')
            ->andWhere(self::ALIAS.'.status = 1');

            $paypalCommision = $queryBuilder->getQuery()->getOneOrNullResult();
        }

        if ($paypalCommision) {
            $paypalCommisionVal = $paypalCommision->getValue();
        }

        if ($container) {
            CommonManager::setCacheVersion($container, $cacheKey, $paypalCommisionVal);
        }

        return $paypalCommisionVal;
    }

    /**
     * Get business page slots.
     *
     * @param integer $categoryId Category id.
     * @param object  $container  Container object.
     *
     * @return mixed
     */
    public function getBusinessPageSlots($categoryId = null, $container = null)
    {
        if ($container) {
            $culture     = CommonManager::getCurrentCulture($container);
            $tableName   = $this->getConfigRuleTableName();
            $cacheKey    = $tableName.'|'.__FUNCTION__.'|'.$categoryId.'_'.$culture;
            $cachedValue = CommonManager::getCacheVersion($container, $cacheKey);

            if ($cachedValue !== false) {
                return $cachedValue;
            }
        }

        $configRule = $this->getActiveConfigRulesByCategoryAncestor(ConfigRepository::NUMBER_OF_BUSINESSPAGE_SLOTS, $categoryId, 1);
        if (!$configRule) {
            $configRule = $this->getActiveConfigRulesByCategoryId(ConfigRepository::NUMBER_OF_BUSINESSPAGE_SLOTS, null, 1);
        }

        if ($configRule) {
            $businessPageSlots = $configRule[0]->getValue();
        } else {
            $businessPageSlots = ConfigRepository::DEFAULT_NUMBER_OF_BUSINESSPAGE_SLOTS;
        }

        if ($container) {
            CommonManager::setCacheVersion($container, $cacheKey, $businessPageSlots);
        }

        return $businessPageSlots;
    }

    /**
     * Get business page slots.
     *
     * @param integer $categoryId Category id.
     * @param object  $container  Container object.
     *
     * @return mixed
     */
    public function getTopBusiness($categoryId = null, $container = null)
    {
        $topBusinessPage = array();
        if ($container) {
            $culture     = CommonManager::getCurrentCulture($container);
            $tableName   = $this->getConfigRuleTableName();
            $cacheKey    = $tableName.'|'.__FUNCTION__.'|'.$categoryId.'_'.$culture;
            $cachedValue = CommonManager::getCacheVersion($container, $cacheKey);

            if ($cachedValue !== false) {
                return $cachedValue;
            }
        }

        $configRule = $this->getActiveConfigRulesByCategoryId(ConfigRepository::TOP_BUSINESSPAGE, $categoryId, 1);

        if ($configRule) {
            $topBusinessPage = $configRule[0]->getValue();
        }

        if ($container) {
            CommonManager::setCacheVersion($container, $cacheKey, $topBusinessPage);
        }

        return $topBusinessPage;
    }

    /**
     * Get listing topad slots.
     *
     * @param object $container Container object.
     *
     * @return integer
     */
    public function getListingTopAdSlots($container = null)
    {
        $topAdsSlots = null;
        if ($container) {
            $culture     = CommonManager::getCurrentCulture($container);
            $tableName   = $this->getConfigRuleTableName();
            $cacheKey    = $tableName.'|'.__FUNCTION__.'|'.$culture;
            $cachedValue = CommonManager::getCacheVersion($container, $cacheKey);

            if ($cachedValue !== false) {
                return $cachedValue;
            }
        }
        $configRule = $this->getActiveConfigRulesByCategoryAncestor(ConfigRepository::LISTING_TOPAD_SLOTS, null, 1);

        if ($configRule) {
            $topAdsSlots = $configRule[0]->getValue();
        } else {
            $topAdsSlots = ConfigRepository::DEFAULT_LISTING_TOPAD_SLOTS;
        }

        if ($container) {
            CommonManager::setCacheVersion($container, $cacheKey, $topAdsSlots);
        }

        return $topAdsSlots;
    }

    /**
     * Get number of organic results.
     *
     * @param object $container Container object.
     *
     * @return integer
     */
    public function getNumberOfOrganicResult($container = null)
    {
        $organicResults = null;

        if ($container) {
            $culture     = CommonManager::getCurrentCulture($container);
            $tableName   = $this->getConfigRuleTableName();
            $cacheKey    = $tableName.'|'.__FUNCTION__.'|'.$culture;
            $cachedValue = CommonManager::getCacheVersion($container, $cacheKey);

            if ($cachedValue !== false) {
                return $cachedValue;
            }
        }

        $configRule = $this->_em->getRepository('FaCoreBundle:ConfigRule')->getActiveConfigRulesByCategoryAncestor(ConfigRepository::NUMBER_OF_ORGANIC_RESULTS, null, 1);

        if ($configRule) {
            $organicResults = $configRule[0]->getValue();
        } else {
            $organicResults = null;
        }

        if ($container) {
            CommonManager::setCacheVersion($container, $cacheKey, $organicResults);
        }

        return $organicResults;
    }

    /**
     * get expiration days
     *
     * @param string $categoryId Category Id.
     * @param object $container  Container object.
     *
     * @return integer
     */
    public function getExpirationDays($categoryId = null, $container = null)
    {
        $expirationDays = null;
        if ($container) {
            $culture     = CommonManager::getCurrentCulture($container);
            $tableName   = $this->getConfigRuleTableName();
            $cacheKey    = $tableName.'|'.__FUNCTION__.'|'.$categoryId.'_'.$culture;
            $cachedValue = CommonManager::getCacheVersion($container, $cacheKey);

            if ($cachedValue !== false) {
                return $cachedValue;
            }
        }
        $configRule = $this->_em->getRepository('FaCoreBundle:ConfigRule')->getActiveConfigRulesByCategoryAncestor(ConfigRepository::AD_EXPIRATION_DAYS, $categoryId, 1);

        if ($configRule) {
            $expirationDays = $configRule[0]->getValue();
        } else {
            $expirationDays = ConfigRepository::DEFAULT_EXPIRATION_DAYS;
        }

        if ($container) {
            CommonManager::setCacheVersion($container, $cacheKey, $expirationDays);
        }

        return $expirationDays;
    }

    /**
     * get low view limit
     *
     * @param string $categoryId Category Id.
     * @param object $container  Container object.
     *
     * @return integer
     */
    public function getLowViewLimit($categoryId = null, $container = null)
    {
        $lowViewLimit = null;
        if ($container) {
            $culture     = CommonManager::getCurrentCulture($container);
            $tableName   = $this->getConfigRuleTableName();
            $cacheKey    = $tableName.'|'.__FUNCTION__.'|'.$categoryId.'_'.$culture;
            $cachedValue = CommonManager::getCacheVersion($container, $cacheKey);

            if ($cachedValue !== false) {
                return $cachedValue;
            }
        }
        $configRule = $this->_em->getRepository('FaCoreBundle:ConfigRule')->getActiveConfigRulesByCategoryAncestor(ConfigRepository::LOW_VIEW_LIMIT, $categoryId, 1);

        if ($configRule) {
            $lowViewLimit = $configRule[0]->getValue();
        } else {
            $lowViewLimit = ConfigRepository::DEFAULT_LOW_VIEW_LIMIT;
        }

        if ($container) {
            CommonManager::setCacheVersion($container, $cacheKey, $lowViewLimit);
        }

        return $lowViewLimit;
    }


    /**
     * get low enquiry limit
     *
     * @param string $categoryId Category Id.
     * @param object $container  Container object.
     *
     * @return integer
     */
    public function getEnquiryLimit($categoryId = null, $container = null)
    {
        $lowEnquiryLimit = null;
        if ($container) {
            $culture     = CommonManager::getCurrentCulture($container);
            $tableName   = $this->getConfigRuleTableName();
            $cacheKey    = $tableName.'|'.__FUNCTION__.'|'.$categoryId.'_'.$culture;
            $cachedValue = CommonManager::getCacheVersion($container, $cacheKey);

            if ($cachedValue !== false) {
                return $cachedValue;
            }
        }
        $configRule = $this->_em->getRepository('FaCoreBundle:ConfigRule')->getActiveConfigRulesByCategoryAncestor(ConfigRepository::LOW_ENQUIERY_LIMIT, $categoryId, 1);

        if ($configRule) {
            $lowEnquiryLimit = $configRule[0]->getValue();
        } else {
            $lowEnquiryLimit = ConfigRepository::DEFAULT_LOW_ENQUIERY_LIMIT;
        }

        if ($container) {
            CommonManager::setCacheVersion($container, $cacheKey, $lowEnquiryLimit);
        }

        return $lowEnquiryLimit;
    }

    /**
     * Get ClickEditVehicleAdverts package id.
     *
     * @return integer
     */
    public function getClickEditVehicleAdvertsPackageId($container)
    {
        $configRulePackageId = null;
        if ($container) {
            $culture     = CommonManager::getCurrentCulture($container);
            $tableName   = $this->getConfigRuleTableName();
            $cacheKey    = $tableName.'|'.__FUNCTION__.'|'.$culture;
            $cachedValue = CommonManager::getCacheVersion($container, $cacheKey);

            if ($cachedValue !== false) {
                return $cachedValue;
            }
        }

        $configRule = $this->_em->getRepository('FaCoreBundle:ConfigRule')->getActiveConfigRulesByCategoryId(ConfigRepository::CLICKEDITVEHICLEADVERTS_PACKAGE_ID, null, 1);

        if ($configRule) {
            $packageId = $configRule[0]->getValue();
            $packageObj = $this->_em->getRepository('FaPromotionBundle:Package')->findOneBy(array('id' => $packageId, 'status' => 1));

            if ($packageObj) {
                $configRulePackageId =  $packageObj->getId();
            }
        }

        if ($container) {
            CommonManager::setCacheVersion($container, $cacheKey, $configRulePackageId);
        }

        return $configRulePackageId;
    }

    /**
     * get private user ad post limit
     *
     * @param string $categoryId Category Id.
     * @param object $container  Container object.
     *
     * @return integer
     */
    public function getPrivateUserAdPostLimit($categoryId = null, $container = null)
    {
        $lowEnquiryLimit = null;
        if ($container) {
            $culture     = CommonManager::getCurrentCulture($container);
            $tableName   = $this->getConfigRuleTableName();
            $cacheKey    = $tableName.'|'.__FUNCTION__.'|'.$categoryId.'_'.$culture;
            $cachedValue = CommonManager::getCacheVersion($container, $cacheKey);

            if ($cachedValue !== false) {
                return $cachedValue;
            }
        }
        $configRule = $this->_em->getRepository('FaCoreBundle:ConfigRule')->getActiveConfigRulesByCategoryAncestor(ConfigRepository::PRIVATE_USER_AD_POST_LIMIT, $categoryId, 1);

        $privateUserAdPostLimit = null;
        $configRuleCategoryId = null;
        if ($configRule) {
            $privateUserAdPostLimit = $configRule[0]->getValue();
            $configRuleCategoryId = ($configRule[0]->getCategory() ? $configRule[0]->getCategory()->getId() : null);
        } else {
            $configRule = $this->_em->getRepository('FaCoreBundle:ConfigRule')->getActiveConfigRulesByCategoryId(ConfigRepository::PRIVATE_USER_AD_POST_LIMIT, null, 1);

            if ($configRule && !$configRule[0]->getCategory()) {
                $privateUserAdPostLimit = $configRule[0]->getValue();
                $configRuleCategoryId = ($configRule[0]->getCategory() ? $configRule[0]->getCategory()->getId() : null);
            }
        }

        $privateUserAdPostLimitRules = array(
            'privateUserAdPostLimit' => $privateUserAdPostLimit,
            'configRuleCategoryId' => $configRuleCategoryId,
        );

        if ($container) {
            CommonManager::setCacheVersion($container, $cacheKey, $privateUserAdPostLimitRules);
        }

        return $privateUserAdPostLimitRules;
    }

    /**
     * Get Adzuna motors feed user ids.
     *
     * @return integer
     */
    public function getAdzunaMotorsFeedUserIds($container)
    {
        $adzunaMotorsFeedUserIds = array();
        if ($container) {
            $culture     = CommonManager::getCurrentCulture($container);
            $tableName   = $this->getConfigRuleTableName();
            $cacheKey    = $tableName.'|'.__FUNCTION__.'|'.$culture;
            $cachedValue = CommonManager::getCacheVersion($container, $cacheKey);

            if ($cachedValue !== false) {
                return $cachedValue;
            }
        }

        $configRule = $this->_em->getRepository('FaCoreBundle:ConfigRule')->getActiveConfigRulesByCategoryId(ConfigRepository::ADZUNA_MOTORS_FEED_USER_IDS, null, 1);

        if ($configRule) {
            $adzunaMotorsFeedUserIds = explode(',', $configRule[0]->getValue());
        }

        if ($container) {
            CommonManager::setCacheVersion($container, $cacheKey, $adzunaMotorsFeedUserIds);
        }

        return $adzunaMotorsFeedUserIds;
    }

    /**
     * get private user ad post limit
     *
     * @param object $container  Container object.
     *
     * @return integer
     */
    public function getDotmailerEnrollmentProgramId($container = null)
    {
        $dotmailerProgramId = null;
        if ($container) {
            $culture     = CommonManager::getCurrentCulture($container);
            $tableName   = $this->getConfigRuleTableName();
            $cacheKey    = $tableName.'|'.__FUNCTION__.'|'.$culture;
            $cachedValue = CommonManager::getCacheVersion($container, $cacheKey);

            if ($cachedValue !== false) {
                return $cachedValue;
            }
        }
        $configRule = $this->_em->getRepository('FaCoreBundle:ConfigRule')->getActiveConfigRulesByCategoryAncestor(ConfigRepository::DOTMAILER_ENROLLMENT_PROGRAM_ID, null, 1);

        if ($configRule) {
            $dotmailerProgramId = $configRule[0]->getValue();
        }

        if ($container) {
            CommonManager::setCacheVersion($container, $cacheKey, $dotmailerProgramId);
        }

        return $dotmailerProgramId;
    }
}
