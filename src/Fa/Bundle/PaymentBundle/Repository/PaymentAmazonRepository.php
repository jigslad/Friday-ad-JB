<?php

/**
 * This file is part of the fa bundle.
 *
 * @copyright Copyright (c) 2017, FMG
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Fa\Bundle\PaymentBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Fa\Bundle\PaymentBundle\Entity\PaymentAmazon;
use Fa\Bundle\CoreBundle\Manager\CommonManager;
use Fa\Bundle\UserBundle\Repository\UserAddressBookRepository;

/**
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 *
 * @author Rohini <rohini.subburam@fridaymediagroup.com>
 * @copyright 2017 Friday Media Group Ltd
 * @version v1.0
 */
class PaymentAmazonRepository extends EntityRepository
{
    const ALIAS = 'ap';

    const SUCCESS_ACK = 'Success';

    const AP_COMPLETED = 'COMPLETED';

    /**
     * Add new amazon payment record.
     *
     * @param object $paymentObj Payment object.
     *
     * @return integer
     */
    public function addPaymentRecord($paymentObj)
    {
        $paymentValue        = unserialize($paymentObj->getValue());

        $amazonResponse      = isset($paymentValue['amazonpay_response']) ? $paymentValue['amazonpay_response'] :  null;
        $billingInfo         = isset($paymentValue['billing_info']) ? $paymentValue['billing_info'] : null;
        $userAddressInfo     = isset($paymentValue['user_address_info']) ? $paymentValue['user_address_info'] : null;
        $ip                  = isset($paymentValue['ip']) ? $paymentValue['ip'] : null;
        $amazon_token        = isset($paymentValue['amazon_token']) ? $paymentValue['amazon_token'] : null;
        $paymentAmazon       = new PaymentAmazon();
        $paymentAmazon->setPayment($paymentObj);
        if ($billingInfo!=null) {
            $billingAddr = $billingInfo->Name.', '.$billingInfo->AddressLine1.', '.$billingInfo->City.', '.$billingInfo->CountryCode.', '.$billingInfo->PostalCode;
            $paymentAmazon->setBillingInfo($billingAddr);
        }
        if ($userAddressInfo!=null) {
            $userAddr = $userAddressInfo->Name.', '.$userAddressInfo->AddressLine1.', '.$userAddressInfo->City.', '.$userAddressInfo->CountryCode.', '.$userAddressInfo->PostalCode;
        }
        if ($amazonResponse!=null) {
            if (isset($amazonResponse->confirm)) {
                $paymentAmazon->setConfirmRequestId($amazonResponse->confirm->ResponseMetadata->RequestId);
            }
            if (isset($amazonResponse->authorize)) {
                $paymentAmazon->setAuthorizeRequestId($amazonResponse->authorize->ResponseMetadata->RequestId);
                $paymentAmazon->setAmazonAuthorizationId($amazonResponse->authorize->AuthorizeResult->AuthorizationDetails->AmazonAuthorizationId);
                $paymentAmazon->setAuthorizationReferenceId($amazonResponse->authorize->AuthorizeResult->AuthorizationDetails->AuthorizationReferenceId);
            }
            $paymentAmazon->setValue(serialize($amazonResponse));
        }
        if ($ip!=null) {
            $paymentAmazon->setIp($ip);
        }
        if ($amazon_token!=null) {
            $paymentAmazon->setAmazonToken($amazon_token);
        }

        $this->_em->persist($paymentAmazon);
        $this->_em->flush();

        //update user address book.
        /*if (isset($userAddressInfo)) {
            $this->_em->getRepository('FaUserBundle:UserAddressBook')->addUserAddress($paymentObj->getUser(), $userAddr);
        }*/

        return $paymentAmazon->getId();
    }
}
