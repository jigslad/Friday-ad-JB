<?php

/**
 * This file is part of the fa bundle.
 *
 * @copyright Copyright (c) 2014, FMG
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Fa\Bundle\PaymentBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Fa\Bundle\PaymentBundle\Entity\PaymentTransaction;
use Fa\Bundle\PaymentBundle\Repository\PaymentRepository;
use Fa\Bundle\AdBundle\Repository\AdRepository;

/**
 * Payment transaction repository.
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 *
 * @author Samir Amrutya <samiram@aspl.in>
 * @copyright 2014 Friday Media Group Ltd
 * @version v1.0
 */
class PaymentTransactionRepository extends EntityRepository
{
    use \Fa\Bundle\CoreBundle\Search\Search;

    const ALIAS = 'pt';

    /**
     * Prepare query builder.
     *
     * @param array $data Array of data.
     *
     * @return Doctrine\ORM\QueryBuilder The query builder.
     */
    public function getBaseQueryBuilder()
    {
        return $this->createQueryBuilder(self::ALIAS);
    }

    /**
     * Set payment transaction.
     *
     * @param integer $transaction
     * @param integer $paymentId
     *
     * @return integer
     */
    public function setPaymentTransaction($transaction, $paymentId)
    {
        $paymentTransaction = new PaymentTransaction();

        $adObj = $transaction->getAd();
        // find & set payment
        $payment = $this->_em->getRepository('FaPaymentBundle:Payment')->find($paymentId);
        $paymentTransaction->setPayment($payment);

        $paymentTransaction->setAd($adObj);
        $paymentTransaction->setAmount($transaction->getAmount());
        $paymentTransaction->setDiscountAmount($transaction->getDiscountAmount());
        $paymentTransaction->setTransactionId($transaction->getTransactionId());
        $paymentTransaction->setUser($transaction->getUser());
        $paymentTransaction->setVat($transaction->getVat());
        $paymentTransaction->setVatAmount($transaction->getVatAmount());
        if ($adObj && $adObj->getFuturePublishAt()) {
            $paymentTransaction->setAdFuturePublishAt($adObj->getFuturePublishAt());
        }

        $this->_em->persist($paymentTransaction);
        $this->_em->flush();

        return $paymentTransaction->getId();
    }

    /**
     * Get PaymentTransaction For AdIds.
     *
     * @param array $adIds Ad ids.
     *
     * @return array
     */
    public function getPaymentTransactionForReportByAdIds($adIds, $startDate, $endDate)
    {
        $paymentTransactionDetailArray = array();
        $paymentTransactionDetails = $this->getBaseQueryBuilder()
        ->select('IDENTITY('.self::ALIAS.'.ad) as ad_id', PaymentRepository::ALIAS.'.created_at', PaymentRepository::ALIAS.'.payment_method', PaymentRepository::ALIAS.'.value as payment_value', PaymentRepository::ALIAS.'.skip_payment_reason', self::ALIAS.'.discount_amount as payment_discount_amount', PaymentTransactionDetailRepository::ALIAS.'.value as payment_trans_detail_value')
        ->innerJoin(self::ALIAS.'.payment', PaymentRepository::ALIAS)
        ->leftJoin('FaPaymentBundle:PaymentTransactionDetail', PaymentTransactionDetailRepository::ALIAS, 'WITH', PaymentTransactionDetailRepository::ALIAS.'.payment_transaction = '.self::ALIAS.'.id')
        ->andWhere(PaymentRepository::ALIAS.'.payment_method IN (:paymentMethod)')
        ->setParameter('paymentMethod', array(PaymentRepository::PAYMENT_METHOD_CYBERSOURCE, PaymentRepository::PAYMENT_METHOD_PAYPAL, PaymentRepository::PAYMENT_METHOD_FREE, PaymentRepository::PAYMENT_METHOD_OFFLINE_PAYMENT, PaymentRepository::PAYMENT_METHOD_AMAZONPAY))
        ->andWhere(self::ALIAS.'.ad IN (:adIds)')
        ->setParameter('adIds', $adIds)
        //->andWhere(PaymentRepository::ALIAS.'.amount > 0')
        ->andWhere('('.self::ALIAS.'.created_at BETWEEN '.$startDate.' AND '.$endDate.' OR '.self::ALIAS.'.ad_future_publish_at BETWEEN '.$startDate.' AND '.$endDate.')')
        ->getQuery()
        ->getArrayResult();

        if ($paymentTransactionDetails) {
            foreach ($paymentTransactionDetails as $paymentTransactionDetail) {
                $paymentTransactionDetailArray[$paymentTransactionDetail['ad_id']] = array('created_at' => $paymentTransactionDetail['created_at'], 'payment_method' => $paymentTransactionDetail['payment_method'], 'skip_payment_reason' => $paymentTransactionDetail['skip_payment_reason'], 'payment_value' => $paymentTransactionDetail['payment_value'], 'payment_discount_amount' => $paymentTransactionDetail['payment_discount_amount'], 'payment_trans_detail_value' => $paymentTransactionDetail['payment_trans_detail_value']);
            }
        }

        return $paymentTransactionDetailArray;
    }

    /**
     * Get ad details by cart code.
     *
     * @param string $cartCode  Cart code
     * @param object $container Container identifier.
     *
     * @return array
     */
    public function getAdDetailByCartCode($cartCode, $container = null)
    {
        $adDetailArray = array();
        $paymentTransactions = $this->getBaseQueryBuilder()
        ->select('IDENTITY('.self::ALIAS.'.ad) as ad_id', 'IDENTITY('.AdRepository::ALIAS.'.category) as category_id')
        ->innerJoin(self::ALIAS.'.payment', PaymentRepository::ALIAS)
        ->innerJoin(self::ALIAS.'.ad', AdRepository::ALIAS)
        ->andWhere(PaymentRepository::ALIAS.'.cart_code = :cart_code')
        ->setParameter('cart_code', $cartCode)
        ->getQuery()
        ->getArrayResult();

        if ($paymentTransactions) {
            foreach ($paymentTransactions as $paymentTransaction) {
                $adDetailArray[$paymentTransaction['ad_id']] = array('category_id' => $paymentTransaction['category_id']);
            }
        }

        $adDetailArray = array_filter($adDetailArray);

        return $adDetailArray;
    }
}
