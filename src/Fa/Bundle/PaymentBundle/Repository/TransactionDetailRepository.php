<?php

/**
 * This file is part of the fa bundle.
 *
 * @copyright Copyright (c) 2014, FMG
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Fa\Bundle\PaymentBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Fa\Bundle\CoreBundle\Manager\CommonManager;
use Fa\Bundle\PromotionBundle\Repository\PackageDiscountCodeRepository;

/**
 * Transaction detail repository.
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 *
 * @author Samir Amrutya <samiram@aspl.in>
 * @copyright 2014 Friday Media Group Ltd
 * @version v1.0
 */
class TransactionDetailRepository extends EntityRepository
{
    const ALIAS = 'td';

    const PAYMENT_FOR_PACKAGE = 'AP';
    const PAYMENT_FOR_SHOP    = 'SP';
    const PAYMENT_FOR_BUY_NOW = 'BN';
    const PAYMENT_FOR_UPSELL = 'UP';

    /**
     * Prepare query builder.
     *
     * @param array $data Array of data.
     *
     * @return Doctrine\ORM\QueryBuilder The query builder.
     */
    public function getBaseQueryBuilder()
    {
        return $this->createQueryBuilder(self::ALIAS);
    }

    /**
     * Get total by transaction id.
     *
     * @param integer $transactionId Transaction id.
     *
     * @return integer
     */
    public function getTotalByTransactionId($transactionId)
    {
        $query = $this->getBaseQueryBuilder()
            ->select('SUM('.self::ALIAS.'.amount) as total', self::ALIAS.'.discount_amount', self::ALIAS.'.value')
            ->andWhere(self::ALIAS.'.transaction = '.$transactionId);
        $result = $query->getQuery()->getOneOrNullResult();

        return $result;
    }

    /**
     * Update total by transaction id.
     *
     * @param integer $cartId        Cart id.
     * @param integer $transactionId Transaction id.
     * @param integer $adId          Ad id.
     * @param string  $paymentFor    Payment for code.
     *
     * @return boolean
     */
    public function getTransactionDetailByPaymentFor($cartId, $transactionId, $adId = null, $paymentFor = self::PAYMENT_FOR_PACKAGE)
    {
        $qb = $this->getBaseQueryBuilder()
            ->innerJoin(self::ALIAS.'.transaction', TransactionRepository::ALIAS)
            ->innerJoin(TransactionRepository::ALIAS.'.cart', CartRepository::ALIAS)
            ->andWhere(TransactionRepository::ALIAS.'.id = '.$transactionId)
            ->andWhere(TransactionRepository::ALIAS.'.cart = '.$cartId)
            ->andWhere(self::ALIAS.'.payment_for = :paymentFor')
            ->setParameter('paymentFor', $paymentFor);

        if ($adId) {
            $qb->andWhere(TransactionRepository::ALIAS.'.ad = '.$adId);
        }
        return $qb->getQuery()->getOneOrNullResult();
    }

    /**
     * Apply code to all items.
     *
     * @param object  $codeObj
     * @param array   $cartDetails
     * @param integer $totalRemainLimit
     * @param integer $remainLimit
     */
    public function applyCodeToAllItems($codeObj, $cartDetails, $totalRemainLimit, $remainLimit)
    {
        $checkLimitFlag = false;
        $totalDiscountAmount = 0;
        if ($codeObj->getDiscountType() == PackageDiscountCodeRepository::PACKAGE_CASH_DISCOUNT_TYPE_ID) {
            $totalDiscountAmount = $codeObj->getDiscountValue();
        }

        if ($remainLimit >= 0 || $totalRemainLimit >= 0) {
            $checkLimitFlag = true;
        }

        $codeAppliedCount = 0;
        foreach ($cartDetails as $cartDetail) {
            $cartDetailValue = unserialize($cartDetail['value']);
            $transactionDetailObj = $this->findOneBy(array('transaction' => $cartDetail['id']));
            $this->_em->refresh($transactionDetailObj);
            foreach ($cartDetailValue['package'] as $adPackageId => $adPackageValue) {
                if (!isset($cartDetailValue['user_credit_id']) && !isset($cartDetailValue['user_credit'])) {
                    //check limits
                    if ($checkLimitFlag && (($codeAppliedCount >= $remainLimit && $remainLimit >= 0) || ($codeAppliedCount >= $totalRemainLimit && $totalRemainLimit >= 0))) {
                        continue;
                    }

                    //Check if is amin only discount code applied and pacakge is also admin package then only allow otherwise not.
                    if ($codeObj->getAdminOnlyPackage()) {
                        $objPackage = $this->_em->getRepository('FaPromotionBundle:Package')->find($adPackageId);
                        if (!$objPackage->getIsAdminPackage()) {
                            continue;
                        }
                    }

                    if ($adPackageValue['price']) {
                        if ($codeObj->getDiscountType() == PackageDiscountCodeRepository::PACKAGE_PERCENTAGE_DISCOUNT_TYPE_ID) {
                            $discountAmount = CommonManager::getDiscountAmount($codeObj, $adPackageValue['price']);
                        } elseif ($codeObj->getDiscountType() == PackageDiscountCodeRepository::PACKAGE_CASH_DISCOUNT_TYPE_ID) {
                            if (($totalDiscountAmount > $adPackageValue['price'])) {
                                $discountAmount = $adPackageValue['price'];
                                $totalDiscountAmount = $totalDiscountAmount - $adPackageValue['price'];
                            } elseif ($totalDiscountAmount <= $adPackageValue['price']) {
                                $discountAmount = $totalDiscountAmount;
                                $totalDiscountAmount = 0;
                            }
                        }
                        if ($discountAmount < 0) {
                            $discountAmount = $adPackageValue['price'];
                        }
                        $finalAmountExcludingDiscount = ($adPackageValue['price'] - $discountAmount);
                        $transactionDetailObj->setDiscountAmount($discountAmount);
                        if ($finalAmountExcludingDiscount < 0) {
                            $finalAmountExcludingDiscount = 0;
                        }
                        $transactionDetailObj->setAmount($finalAmountExcludingDiscount);
                        $discountCodeArray = $this->_em->getRepository('FaPromotionBundle:PackageDiscountCode')->getPackageDiscountValueArray($codeObj);
                        $discountCodeArray['discount_given'] = $discountAmount;
                        $transactionDetailValue = unserialize($transactionDetailObj->getValue());
                        $transactionDetailValue['discount_values'] = $discountCodeArray;
                        $transactionDetailObj->setValue(serialize($transactionDetailValue));
                    } else {
                        $transactionDetailObj->setDiscountAmount(0);
                        $transactionDetailObj->setAmount(0);
                        $transactionDetailValue = unserialize($transactionDetailObj->getValue());
                        if (isset($transactionDetailValue['discount_values']) && count($transactionDetailValue['discount_values'])) {
                            unset($transactionDetailValue['discount_values']);
                        }
                        $transactionDetailObj->setValue(serialize($transactionDetailValue));
                    }
                    $this->_em->persist($transactionDetailObj);
                    $this->_em->flush();
                    $this->_em->refresh($transactionDetailObj);
                    $codeAppliedCount = $codeAppliedCount + 1;
                }
            }
        }

        $this->clear();
    }

    /**
     * Apply code to all items.
     *
     * @param object  $codeObj
     * @param array   $cartDetails
     * @param integer $totalRemainLimit
     * @param integer $remainLimit
     */
    public function applyCodeToOneItem($codeObj, $transactionId, $totalDiscountAmount = null, $totalRemainLimit, $remainLimit)
    {
        $codeAppliedCount = 0;
        $checkLimitFlag = false;
        if ($remainLimit >= 0 || $totalRemainLimit >= 0) {
            $checkLimitFlag = true;
        }

        $transactionDetailObj = $this->findOneBy(array('transaction' => $transactionId));
        $this->_em->refresh($transactionDetailObj);
        $transactionDetailValue = unserialize($transactionDetailObj->getValue());
        foreach ($transactionDetailValue['package'] as $adPackageId => $adPackageValue) {
            if (!isset($transactionDetailValue['user_credit_id']) && !isset($transactionDetailValue['user_credit'])) {
                //check limits
                if ($checkLimitFlag && (($codeAppliedCount >= $remainLimit && $remainLimit >= 0) || ($codeAppliedCount >= $totalRemainLimit && $totalRemainLimit >= 0))) {
                    continue;
                }

                //Check if is admin only discount code applied and pacakge is also admin package then only allow otherwise not.
                if ($codeObj->getAdminOnlyPackage()) {
                    $objPackage = $this->_em->getRepository('FaPromotionBundle:Package')->find($adPackageId);
                    if (!$objPackage->getIsAdminPackage()) {
                        continue;
                    }
                }

                if ($adPackageValue['price']) {
                    if ($codeObj->getDiscountType() == PackageDiscountCodeRepository::PACKAGE_PERCENTAGE_DISCOUNT_TYPE_ID) {
                        $discountAmount = CommonManager::getDiscountAmount($codeObj, $adPackageValue['price']);
                    } elseif ($codeObj->getDiscountType() == PackageDiscountCodeRepository::PACKAGE_CASH_DISCOUNT_TYPE_ID) {
                        if (($totalDiscountAmount > $adPackageValue['price'])) {
                            $discountAmount = $adPackageValue['price'];
                            $totalDiscountAmount = $totalDiscountAmount - $adPackageValue['price'];
                        } elseif ($totalDiscountAmount <= $adPackageValue['price']) {
                            $discountAmount = $totalDiscountAmount;
                            $totalDiscountAmount = 0;
                        }
                    }
                    if ($discountAmount < 0) {
                        $discountAmount = $adPackageValue['price'];
                    }
                    $finalAmountExcludingDiscount = ($adPackageValue['price'] - $discountAmount);
                    $transactionDetailObj->setDiscountAmount($discountAmount);
                    if ($finalAmountExcludingDiscount < 0) {
                        $finalAmountExcludingDiscount = 0;
                    }
                    $transactionDetailObj->setAmount($finalAmountExcludingDiscount);
                    $discountCodeArray = $this->_em->getRepository('FaPromotionBundle:PackageDiscountCode')->getPackageDiscountValueArray($codeObj);
                    $discountCodeArray['discount_given'] = $discountAmount;
                    $transactionDetailValue = unserialize($transactionDetailObj->getValue());
                    $transactionDetailValue['discount_values'] = $discountCodeArray;
                    $transactionDetailObj->setValue(serialize($transactionDetailValue));
                } else {
                    $transactionDetailObj->setDiscountAmount(0);
                    $transactionDetailObj->setAmount(0);
                    $transactionDetailValue = unserialize($transactionDetailObj->getValue());
                    if (isset($transactionDetailValue['discount_values']) && count($transactionDetailValue['discount_values'])) {
                        unset($transactionDetailValue['discount_values']);
                    }
                    $transactionDetailObj->setValue(serialize($transactionDetailValue));
                }
                $this->_em->persist($transactionDetailObj);
                $this->_em->flush();
                $this->_em->refresh($transactionDetailObj);
                $codeAppliedCount = $codeAppliedCount + 1;
            }
        }

        $this->clear();

        return $totalDiscountAmount;
    }

    /**
     * Remove code from all items.
     *
     * @param array  $cartDetails Cart details array.
     */
    public function removeCodeFromAllItems($cartDetails)
    {
        foreach ($cartDetails as $cartDetail) {
            $transactionDetailObj = $this->findOneBy(array('transaction' => $cartDetail['id']));
            $transactionDetailValue = unserialize($transactionDetailObj->getValue());
            $packagePrice = 0;
            foreach ($transactionDetailValue['package'] as $packageDetail) {
                $packagePrice = $packageDetail['price'];
            }

            $this->_em->refresh($transactionDetailObj);
            $transactionDetailObj->setAmount($packagePrice);
            $transactionDetailObj->setDiscountAmount(0);
            $transactionDetailValue = unserialize($transactionDetailObj->getValue());
            if (isset($transactionDetailValue['discount_values']) && count($transactionDetailValue['discount_values'])) {
                unset($transactionDetailValue['discount_values']);
            }
            $transactionDetailObj->setValue(serialize($transactionDetailValue));
            $this->_em->persist($transactionDetailObj);
            $this->_em->flush();
            $this->_em->refresh($transactionDetailObj);
            $transactionObj = $transactionDetailObj->getTransaction();
            $this->_em->refresh($transactionObj);
        }

        $this->clear();
    }

    /**
     * Remove credit from all items.
     *
     * @param array  $cartDetails Cart details array.
     */
    public function removeCreditFromAllItems($cartDetails)
    {
        foreach ($cartDetails as $cartDetail) {
            $transactionDetailObj = $this->findOneBy(array('transaction' => $cartDetail['id']));
            $this->_em->refresh($transactionDetailObj);
            $transactionDetailValue = unserialize($transactionDetailObj->getValue());
            $packagePrice = null;
            if (isset($transactionDetailValue['package'])) {
                foreach ($transactionDetailValue['package'] as $package) {
                    $packagePrice = $package['price'];
                }
            }
            $transactionDetailObj->setAmount($packagePrice);
            if (isset($transactionDetailValue['user_credit_id']) && isset($transactionDetailValue['user_credit'])) {
                unset($transactionDetailValue['user_credit_id']);
                unset($transactionDetailValue['user_credit']);
            }
            $transactionDetailObj->setValue(serialize($transactionDetailValue));
            $this->_em->persist($transactionDetailObj);
            $this->_em->flush();
            $this->_em->refresh($transactionDetailObj);
            $transactionObj = $transactionDetailObj->getTransaction();
            $this->_em->refresh($transactionObj);
        }

        $this->clear();
    }

    /**
     * Get transaction details by cart id.
     *
     * @param integer $cartId Cart id.
     *
     * @return boolean
     */
    public function getTransactionDetailsByCartId($cartId)
    {
        $qb = $this->getBaseQueryBuilder()
        ->innerJoin(self::ALIAS.'.transaction', TransactionRepository::ALIAS)
        ->andWhere(TransactionRepository::ALIAS.'.cart = '.$cartId);

        return $qb->getQuery()->getResult();
    }
}
