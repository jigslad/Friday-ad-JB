<?php

/**
 * This file is part of the fa bundle.
 *
 * @copyright Copyright (c) 2014, FMG
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Fa\Bundle\PaymentBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Fa\Bundle\PaymentBundle\Entity\PaymentTransactionDetail;
use Fa\Bundle\AdBundle\Repository\AdRepository;
use Fa\Bundle\CoreBundle\Manager\CommonManager;

/**
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 *
 * @author Samir Amrutya <samiram@aspl.in>
 * @copyright 2014 Friday Media Group Ltd
 * @version v1.0
 */
class PaymentTransactionDetailRepository extends EntityRepository
{
    const ALIAS = 'ptd';

    /**
     * Prepare query builder.
     *
     * @param array $data Array of data.
     *
     * @return Doctrine\ORM\QueryBuilder The query builder.
     */
    public function getBaseQueryBuilder()
    {
        return $this->createQueryBuilder(self::ALIAS);
    }

    /**
     * Set payment transaction detail.
     *
     * @param object  $transactionDetail    Transaction detail object.
     * @param integer $paymentTransactionId Payment transaction id.
     * @param boolean $addAdToModeration    Send ad to moderate or not.
     * @param boolean $futureAdPostFlag     Future advert post flag.
     *
     * return integer
     */
    public function setPaymentTransactionDetail($transactionDetail, $paymentTransactionId, $addAdToModeration, $futureAdPostFlag = false)
    {
        $value                    = array('addAdToModeration' => $addAdToModeration, 'futureAdPostFlag' => $futureAdPostFlag) + unserialize($transactionDetail->getValue());
        $paymentTransactionDetail = new PaymentTransactionDetail();

        // find & set payment transaction
        $paymentTransaction = $this->_em->getRepository('FaPaymentBundle:PaymentTransaction')->find($paymentTransactionId);
        $paymentTransactionDetail->setPaymentTransaction($paymentTransaction);

        $paymentTransactionDetail->setAmount($transactionDetail->getAmount());
        $paymentTransactionDetail->setDiscountAmount($transactionDetail->getDiscountAmount());
        $paymentTransactionDetail->setPaymentFor($transactionDetail->getPaymentFor());
        $paymentTransactionDetail->setValue(serialize($value));

        $this->_em->persist($paymentTransactionDetail);
        $this->_em->flush();

        return $paymentTransaction->getId();
    }

    /**
     * Get payment transaction by payment for.
     *
     * @param integer $paymentId  Payment id.
     * @param string  $paymentFor Payment for code.
     *
     * @return boolean
     */
    public function getPaymentTransactionDetailByPaymentFor($paymentId, $paymentFor)
    {
        return $this->getBaseQueryBuilder()
            ->innerJoin(self::ALIAS.'.payment_transaction', PaymentTransactionRepository::ALIAS)
            ->innerJoin(PaymentTransactionRepository::ALIAS.'.payment', PaymentRepository::ALIAS)
            ->andWhere(PaymentRepository::ALIAS.'.id = '.$paymentId)
            ->andWhere(self::ALIAS.'.payment_for = :paymentFor')
            ->setParameter('paymentFor', $paymentFor)
            ->getQuery()
            ->getResult();
    }

    /**
     * Get payment transaction by payment id.
     *
     * @param integer $paymentId  Payment id.
     *
     * @return mixed
     */
    public function getPaymentTransactionDetailByPaymentId($paymentId)
    {
        $paymentDetailArray = array();
        $paymentDetails = $this->getBaseQueryBuilder()
            ->select(PaymentRepository::ALIAS.'.id as payment_id', self::ALIAS.'.value', self::ALIAS.'.amount', AdRepository::ALIAS.'.id as ad_id', self::ALIAS.'.ti_package')
            ->innerJoin(self::ALIAS.'.payment_transaction', PaymentTransactionRepository::ALIAS)
            ->innerJoin(PaymentTransactionRepository::ALIAS.'.payment', PaymentRepository::ALIAS)
            ->innerJoin(PaymentTransactionRepository::ALIAS.'.ad', AdRepository::ALIAS)
            ->andWhere(PaymentRepository::ALIAS.'.id IN (:paymentId)')
            ->setParameter('paymentId', $paymentId)
            ->getQuery()
            ->getResult();

        if ($paymentDetails) {
            foreach ($paymentDetails as $paymentDetail) {
                $packageIds = array();
                $value = unserialize($paymentDetail['value']);
                if (isset($value['package'])) {
                    foreach ($value['package'] as $package) {
                        $packageIds[] = $package['id'];
                    }
                }

                $paymentDetailArray[$paymentDetail['payment_id']][] = array(
                    'package_id' => $packageIds,
                    'ti_package' => $paymentDetail['ti_package'],
                    'amount' => $paymentDetail['amount'],
                    'ad_id' => $paymentDetail['ad_id'],
                );
            }
        }

        return $paymentDetailArray;
    }

    /**
     * Get payment transaction by payment id.
     *
     * @param integer $paymentId  Payment id.
     *
     * @return mixed
     */
    public function getTransactonDataForGoogleAnalytics($paymentId)
    {
        $paymentDetailArray = array();
        $paymentDetails = $this->getBaseQueryBuilder()
        ->select(self::ALIAS.'.payment_for as payment_for', PaymentTransactionRepository::ALIAS.'.transaction_id as transaction_id', PaymentRepository::ALIAS.'.cart_code as cart_code', PaymentRepository::ALIAS.'.id as payment_id', self::ALIAS.'.value', self::ALIAS.'.amount', AdRepository::ALIAS.'.id as ad_id')
        ->innerJoin(self::ALIAS.'.payment_transaction', PaymentTransactionRepository::ALIAS)
        ->innerJoin(PaymentTransactionRepository::ALIAS.'.payment', PaymentRepository::ALIAS)
        ->leftJoin(PaymentTransactionRepository::ALIAS.'.ad', AdRepository::ALIAS)
        ->andWhere(PaymentRepository::ALIAS.'.id IN (:paymentId)')
        ->setParameter('paymentId', $paymentId)
        ->getQuery()
        ->getArrayResult();

        if ($paymentDetails) {
            $paymentUniqueIds = array();
            foreach ($paymentDetails as $paymentDetail) {
                $category     = array();
                $packageNames = array();
                $package      = null;
                $value = unserialize($paymentDetail['value']);
                if (isset($value['package'])) {
                    foreach ($value['package'] as $package) {
                        $package = $this->_em->getRepository('FaPromotionBundle:Package')->findOneBy(array('id' => $package['id']));
                        $packageNames[] = $package->getTitle();
                    }
                }

                $cart_code = $paymentDetail['cart_code'];

                if ($paymentDetail['ad_id']) {
                    $ad       = $this->_em->getRepository('FaAdBundle:Ad')->find($paymentDetail['ad_id']);

                    if ($ad) {
                        if (!count($packageNames)) {
                            $packageNames[] = $ad->getTitle();
                        }
                        $category = $this->_em->getRepository('FaEntityBundle:Category')->getCategoryPathArrayById($ad->getCategory()->getId());


                        if (isset($value['promoteRepostAdFlag']) && ( $value['promoteRepostAdFlag'] == 'repost' || $value['promoteRepostAdFlag'] == 'renew')) {
                            $cart_code = $cart_code.'-Renewal';
                        } else {
                            $cart_code = $cart_code.'-New';
                        }

                        if (isset($value['discount_values']) && isset($value['discount_values']['id']) && $value['discount_values']['id']) {
                            $discountCodeObj = $this->_em->getRepository('FaPromotionBundle:PackageDiscountCode')->findOneBy(array('id' => $value['discount_values']['id']));
                            if ($discountCodeObj) {
                                $cart_code = $cart_code.'-'.$discountCodeObj->getCode();
                            }
                        }
                    }
                }

                $paymentDetailArray[$paymentDetail['transaction_id']]['ID']       = $cart_code;
                $paymentDetailArray[$paymentDetail['transaction_id']]['Name']     = implode(', ', $packageNames).', '.$this->getLabelForPackageFor($paymentDetail['payment_for']);
                $paymentDetailArray[$paymentDetail['transaction_id']]['SKU']      = ($package ? $package->getId(): ($ad ? $ad->getId() : null));
                $paymentDetailArray[$paymentDetail['transaction_id']]['Category'] = implode('/', $category);
                $paymentDetailArray[$paymentDetail['transaction_id']]['Price']    = ((isset($value['user_credit_id']) && isset($value['user_credit'])) ? 0 : $paymentDetail['amount']);
                $paymentDetailArray[$paymentDetail['transaction_id']]['Quantity'] = 1;
                $paymentDetailArray[$paymentDetail['transaction_id']]['TransactionId'] = $paymentDetail['transaction_id'];
                $uniqueId = md5($cart_code.'_'.$paymentDetailArray[$paymentDetail['transaction_id']]['Name'].'_'.$paymentDetailArray[$paymentDetail['transaction_id']]['SKU'].'_'.$paymentDetailArray[$paymentDetail['transaction_id']]['Category']);
                $paymentDetailArray[$paymentDetail['transaction_id']]['UniqueId'] = $uniqueId;
                $paymentUniqueIds[] = $uniqueId;
            }

            if (count($paymentUniqueIds)) {
                $paymentUniqueIds = array_unique($paymentUniqueIds);
                foreach ($paymentUniqueIds as $paymentUniqueId) {
                    $duplicatePackages = array_keys(array_column($paymentDetailArray, 'UniqueId', 'TransactionId'), $paymentUniqueId);
                    if (count($duplicatePackages) > 1) {
                        $paymentDetailArray[$duplicatePackages[0]]['Quantity'] = $paymentDetailArray[$duplicatePackages[0]]['Quantity'] + 1;
                        for ($i = 1; $i < count($duplicatePackages); $i++) {
                            if (isset($paymentDetailArray[$duplicatePackages[$i]])) {
                                unset($paymentDetailArray[$duplicatePackages[$i]]);
                            }
                        }
                    }
                }
            }
        }

        return $paymentDetailArray;
    }

    /**
     * get label for package for
     *
     * @param string $code
     *
     * @return string
     */
    public function getLabelForPackageFor($code)
    {
        $packageLabel = array();
        $packageLabel[TransactionDetailRepository::PAYMENT_FOR_PACKAGE] = 'Ad Posting';
        $packageLabel[TransactionDetailRepository::PAYMENT_FOR_SHOP]    = 'Subscription';
        $packageLabel[TransactionDetailRepository::PAYMENT_FOR_BUY_NOW] = 'Buy Now';

        if (isset($packageLabel[$code])) {
            return $packageLabel[$code];
        } else {
            return $code;
        }
    }

    /**
     * Get invoice for user.
     *
     * @param integer $userId User id.
     * @param string  $month  Month of invoice.
     * @param integer $year   Year of invoice.
     *
     * @return array
     */
    public function getInvoiceDetailsForUserByMonth($userId, $month, $year)
    {
        $startDate       = $year.'-'.$month.'-1';
        $noOfDaysInMonth = cal_days_in_month(CAL_GREGORIAN, $month, $year);
        $endDate         = $year.'-'.$month.'-'.$noOfDaysInMonth;
        $finalStartDate  = CommonManager::getTimeStampFromStartDate($startDate);
        $finalEndDate    = CommonManager::getTimeStampFromEndDate($endDate);

        $paymentDetailArray = array();
        $packageIdNameArray = array();
        $packageIdsArray    = array();
        $paymentDetails = $this->getBaseQueryBuilder()
            ->select(PaymentRepository::ALIAS.'.id', PaymentRepository::ALIAS.'.cart_code', PaymentRepository::ALIAS.'.created_at', PaymentRepository::ALIAS.'.amount', PaymentRepository::ALIAS.'.currency', self::ALIAS.'.value', self::ALIAS.'.ti_package')
            ->innerJoin(self::ALIAS.'.payment_transaction', PaymentTransactionRepository::ALIAS)
            ->innerJoin(PaymentTransactionRepository::ALIAS.'.payment', PaymentRepository::ALIAS)
            ->andWhere(PaymentRepository::ALIAS.'.user = '.$userId)
            ->andWhere(PaymentRepository::ALIAS.'.payment_method IN (:paymentMethod)')
            ->setParameter('paymentMethod', array(PaymentRepository::PAYMENT_METHOD_CYBERSOURCE, PaymentRepository::PAYMENT_METHOD_PAYPAL, PaymentRepository::PAYMENT_METHOD_CYBERSOURCE_RECURRING, PaymentRepository::PAYMENT_METHOD_AMAZONPAY))
            ->andWhere('('.PaymentRepository::ALIAS.'.created_at BETWEEN '.$finalStartDate.' AND  '.$finalEndDate.')')
            ->orderBy(PaymentRepository::ALIAS.'.created_at', 'DESC')
            ->andWhere(PaymentRepository::ALIAS.'.amount > 0')
            ->getQuery()
            ->getArrayResult();

        if ($paymentDetails) {
            foreach ($paymentDetails as $paymentDetail) {
                $value = unserialize($paymentDetail['value']);
                if (isset($value['package'])) {
                    $packageIdsArray[] = array_keys($value['package'])[0];
                }
            }
            $packageIdsArray = array_unique($packageIdsArray);
            if (count($packageIdsArray)) {
                $packages = $this->_em->getRepository('FaPromotionBundle:Package')->findBy(array('id' => $packageIdsArray));

                foreach ($packages as $package) {
                    $packageIdNameArray[$package->getId()] = $package->getTitle();
                }
            }

            foreach ($paymentDetails as $paymentDetail) {
                $value = unserialize($paymentDetail['value']);
                if (isset($value['package'])) {
                    foreach ($value['package'] as $package) {
                        if (isset($package['id']) && isset($packageIdNameArray[$package['id']])) {
                            $paymentDetailArray[$paymentDetail['id']]['package_name'][] = ($paymentDetail['ti_package'] ? $paymentDetail['ti_package'] : $packageIdNameArray[$package['id']]);
                            $paymentDetailArray[$paymentDetail['id']]['package_id'][]   = $package['id'];
                        }
                    }
                }
                if (isset($paymentDetailArray[$paymentDetail['id']])) {
                    $paymentDetailArray[$paymentDetail['id']] = $paymentDetailArray[$paymentDetail['id']] + $paymentDetail;
                } else {
                    $paymentDetailArray[$paymentDetail['id']] = $paymentDetail;
                }
            }
        }

        return $paymentDetailArray;
    }

    /**
     * Get invoice for user.
     *
     * @param integer $userId    User id.
     * @param integer $paymentId Payment id.
     *
     * @return array
     */
    public function getInvoiceDetailForUserByPaymentId($userId, $paymentId)
    {
        $paymentDetailArray = array();
        $packageIdNameArray = array();
        $packageIdsArray    = array();
        $paymentDetails = $this->getBaseQueryBuilder()
        ->select(self::ALIAS.'.payment_for', PaymentRepository::ALIAS.'.cart_code', PaymentRepository::ALIAS.'.payment_method', PaymentRepository::ALIAS.'.created_at', PaymentRepository::ALIAS.'.amount as total_amount', '('.PaymentTransactionRepository::ALIAS.'.amount/(1 + ('.PaymentTransactionRepository::ALIAS.'.vat/100)) as amount_without_vat', PaymentTransactionRepository::ALIAS.'.vat_amount', PaymentTransactionRepository::ALIAS.'.vat', PaymentRepository::ALIAS.'.value as payment_value', self::ALIAS.'.value as detail_value', AdRepository::ALIAS.'.title as ad_title', self::ALIAS.'.ti_package')
        ->innerJoin(self::ALIAS.'.payment_transaction', PaymentTransactionRepository::ALIAS)
        ->leftJoin(PaymentTransactionRepository::ALIAS.'.ad', AdRepository::ALIAS)
        ->innerJoin(PaymentTransactionRepository::ALIAS.'.payment', PaymentRepository::ALIAS)
        ->andWhere(PaymentRepository::ALIAS.'.user = '.$userId)
        ->andWhere(PaymentRepository::ALIAS.'.id = '.$paymentId)
        ->andWhere(PaymentRepository::ALIAS.'.payment_method IN (:paymentMethod)')
        ->setParameter('paymentMethod', array(PaymentRepository::PAYMENT_METHOD_CYBERSOURCE, PaymentRepository::PAYMENT_METHOD_PAYPAL, PaymentRepository::PAYMENT_METHOD_CYBERSOURCE_RECURRING, PaymentRepository::PAYMENT_METHOD_AMAZONPAY))
        ->andWhere(PaymentRepository::ALIAS.'.amount > 0')
        ->getQuery()
        ->getArrayResult();

        if ($paymentDetails) {
            foreach ($paymentDetails as $paymentDetail) {
                $value = unserialize($paymentDetail['detail_value']);
                if (isset($value['package'])) {
                    $packageIdsArray[] = array_keys($value['package'])[0];
                }
                if (!isset($paymentDetailArray['payment_token']) && in_array($paymentDetail['payment_method'], array(PaymentRepository::PAYMENT_METHOD_CYBERSOURCE, PaymentRepository::PAYMENT_METHOD_CYBERSOURCE_RECURRING))) {
                    $paymentValue = unserialize($paymentDetail['payment_value']);
                    if (is_array($paymentValue) && isset($paymentValue['subscriptionID'])) {
                        $paymentToken = $this->_em->getRepository('FaPaymentBundle:PaymentTokenization')->getTokenBySubscriptionId($userId, $paymentValue['subscriptionID']);
                        if ($paymentToken) {
                            $paymentDetailArray['payment_token'] = '****'.$paymentToken->getCardNumber().' '.$paymentToken->getCardHolderName();
                        }
                    }
                }
            }

            $packageIdsArray = array_unique($packageIdsArray);
            if (count($packageIdsArray)) {
                $packages = $this->_em->getRepository('FaPromotionBundle:Package')->findBy(array('id' => $packageIdsArray));

                foreach ($packages as $package) {
                    $packageIdNameArray[$package->getId()] = $package->getTitle();
                }
            }

            $paymentDetailArray['total_amount_without_vat'] = 0;
            $paymentDetailArray['invoice_address'] = $this->_em->getRepository('FaUserBundle:UserAddressBook')->getAddressByUser($userId, null, false, true);
            foreach ($paymentDetails as $paymentDetail) {
                $value = unserialize($paymentDetail['detail_value']);
                $paymentDetailArray['payment_method'] = $paymentDetail['payment_method'];
                $paymentDetailArray['created_at'] = $paymentDetail['created_at'];
                $paymentDetailArray['cart_code'] = $paymentDetail['cart_code'];
                $paymentDetailArray['total_amount'] = $paymentDetail['total_amount'];
                $paymentDetailArray['vat'] = $paymentDetail['vat'];
                $paymentDetailArray['total_amount_without_vat'] += $paymentDetail['amount_without_vat'];
                $paymentDetailArray['payment_for'] = $paymentDetail['payment_for'];
                if (isset($value['package'])) {
                    foreach ($value['package'] as $package) {
                        if (isset($package['id']) && isset($packageIdNameArray[$package['id']])) {
                            $paymentDetailArray['package'][] = array(
                                'package_name' => ($paymentDetail['ti_package'] ? $paymentDetail['ti_package'] : $packageIdNameArray[$package['id']]),
                                'package_id' => $package['id'],
                                'ad_title' => $paymentDetail['ad_title'],
                                'amount_without_vat' => $paymentDetail['amount_without_vat'],
                            );
                        }
                    }
                }
            }

            $paymentDetailArray['total_amount_of_vat'] = (($paymentDetailArray['total_amount_without_vat'] * $paymentDetailArray['vat']) / 100);
        }

        return $paymentDetailArray;
    }

    /**
     * Get payment transaction by payment id.
     *
     * @param integer $paymentId Payment id.
     *
     * @return boolean
     */
    public function getPaymentTransactionDetailResultByPaymentId($paymentId)
    {
        return $this->getBaseQueryBuilder()
        ->select(PaymentRepository::ALIAS.'.id as payment_id', self::ALIAS.'.value', self::ALIAS.'.discount_amount', self::ALIAS.'.amount', AdRepository::ALIAS.'.id as ad_id')
        ->innerJoin(self::ALIAS.'.payment_transaction', PaymentTransactionRepository::ALIAS)
        ->innerJoin(PaymentTransactionRepository::ALIAS.'.payment', PaymentRepository::ALIAS)
        ->innerJoin(PaymentTransactionRepository::ALIAS.'.ad', AdRepository::ALIAS)
        ->andWhere(PaymentRepository::ALIAS.'.id = '.$paymentId)
        ->getQuery()
        ->getResult();
    }
}
