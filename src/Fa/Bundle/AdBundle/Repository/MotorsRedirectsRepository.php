<?php

/**
 * This file is part of the fa bundle.
 *
 * @copyright Copyright (c) 2014, FMG
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Fa\Bundle\AdBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Fa\Bundle\CoreBundle\Manager\CommonManager;

/**
 *  Motors redirect repository.
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 *
 * @author Janaksinh Jadeja <janak@aspl.in>
 * @copyright 2014 Friday Media Group Ltd.
 * @version 1.0
 */
class MotorsRedirectsRepository extends EntityRepository
{
    const ALIAS = 'red';

    /**
     * get mapping
     *
     * @param string $nval
     * @param string $parent
     * @param string $first_parent
     * @param string $container
     * @return \Fa\Bundle\CoreBundle\Manager\mixed|multitype:multitype:NULL  NULL
     */
    public function getNewByOld($nval, $parent, $first_parent, $container = null)
    {
        if ($container) {
            $tableName   = $this->getEntityTableName();
            $cacheKey    = $tableName.'|'.__FUNCTION__.'|'.$nval.'_'.$parent.'_'.$first_parent;
            $cachedValue = CommonManager::getCacheVersion($container, $cacheKey);

            if ($cachedValue !== false) {
                return $cachedValue;
            }
        }

        $qb = $this->createQueryBuilder(self::ALIAS)
            ->where(self::ALIAS.'.nval = :nval')
            ->setParameter('nval', $nval)
            ->setMaxResults(1);

        if ($parent) {
            $qb->andWhere(self::ALIAS.'.parent = :parent OR '.self::ALIAS.'.parent = :first_parent')
               ->setParameter('parent', $parent)
               ->setParameter('first_parent', $first_parent);
        }

        $redirect = $qb->getQuery()
            ->getOneOrNullResult();

        if ($redirect) {
            $field = array();
            if ($container) {
                $field['id']      = $redirect->getMappedId();
                $field['name']    = $redirect->getFieldName();
                $field['field']   = array($redirect->getFieldName() => $redirect->getMappedId());

                if ($redirect->getParentCatId()) {
                    $field['field'] = array_merge(array('item__category_id' => $redirect->getParentCatId()), $field['field']);
                }

                $field['parent']  = $redirect->getParent();
                CommonManager::setCacheVersion($container, $cacheKey, $field);
            }

            return $field;
        }
    }
    /**
     * Get active Campaigns
     */
    public function getAllRedirects()
    {
        $results = $this->createQueryBuilder(self::ALIAS)
            ->getQuery()
            ->getArrayResult();
        return $results;
    }

    public function deleteRecordById($Id)
    {
        if ($Id!='') {
            $qb = $this->createQueryBuilder(self::ALIAS)
                ->delete()
                ->where(self::ALIAS.'.id = :Id')
                ->setParameter('Id', $Id);

            $result = $qb->getQuery()->execute();
        }

        return $result;
    }

    /**
     * Get entity table name.
     */
    private function getEntityTableName()
    {
        return $this->_em->getClassMetadata('FaAdBundle:Redirects')->getTableName();
    }
}
