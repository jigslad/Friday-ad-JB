<?php

/**
 * This file is part of the fa bundle.
 *
 * @copyright Copyright (c) 2014, FMG
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Fa\Bundle\AdBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Fa\Bundle\UserBundle\Repository\UserRepository;
use Fa\Bundle\CoreBundle\Manager\CommonManager;
use Fa\Bundle\EntityBundle\Repository\CategoryRepository;
use Fa\Bundle\UserBundle\Repository\RoleRepository;
use Fa\Bundle\EntityBundle\Repository\EntityRepository as BaseEntityRepository;
use Fa\Bundle\AdBundle\Solr\AdSolrFieldMapping;
use Fa\Bundle\PaymentBundle\Entity\DeliveryMethodOption;
use Fa\Bundle\PaymentBundle\Repository\DeliveryMethodOptionRepository;
use Fa\Bundle\PromotionBundle\Repository\UpsellRepository;
use Fa\Bundle\AdBundle\Solr\AdForSaleSolrFieldMapping;
use Fa\Bundle\CoreBundle\Manager\SolrSearchManager;
use Fa\Bundle\PaymentBundle\Repository\TransactionDetailRepository;
use Fa\Bundle\EntityBundle\Repository\LocationRepository;
use Fa\Bundle\AdBundle\Entity\Ad;
use Fa\Bundle\UserBundle\Entity\User;
use Fa\Bundle\DotMailerBundle\Repository\DotmailerRepository;
use Fa\Bundle\EntityBundle\Repository\LocalityRepository;
use Entity;
use Fa\Bundle\UserBundle\Repository\UserUpsellRepository;
use Fa\Bundle\PromotionBundle\Repository\PackageRepository;
use Entity\Category;
use Fa\Bundle\PaymentBundle\Repository\TransactionRepository;
use Fa\Bundle\AdBundle\Repository\AdLocationRepository;
use Fa\Bundle\AdBundle\Entity\AdLocation;

/**
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 *
 * @author Samir Amrutya <samiram@aspl.in>
 * @copyright 2014 Friday Media Group Ltd
 * @version v1.0
 */
class AdRepository extends EntityRepository
{
    use \Fa\Bundle\CoreBundle\Search\Search;

    const ALIAS = 'a';
    const ALIAS_R = 'a_rec';
    const ALIAS_S = 'a_sen';

    const SOURCE_PAA   = 'paa';
    const SOURCE_ADMIN = 'admin';
    const SOURCE_MIGRATED = 'migrated';

    /**
     * Prepare query builder.
     *
     * @param array $data Array of data.
     *
     * @return Doctrine\ORM\QueryBuilder The query builder.
     */
    public function getBaseQueryBuilder()
    {
        return $this->createQueryBuilder(self::ALIAS);
    }

    /**
     * Add ad status filter to existing query object.
     *
     * @param integer $statusId Ad status id.
     */
    protected function addStatusFilter($statusId = null)
    {
        if ($statusId) {
            if (!is_array($statusId)) {
                $statusId = array($statusId);
            }

            $statusId = array_filter($statusId);

            if (count($statusId)) {
                $this->queryBuilder->andWhere($this->getRepositoryAlias().'.status IN (:'.$this->getRepositoryAlias().'_status'.')');
                $this->queryBuilder->setParameter($this->getRepositoryAlias().'_status', $statusId);
            }
        }
    }

    /**
     * Add ad status filter to existing query object.
     *
     * @param integer $statusId Ad status id.
     */
    protected function addCategoryFilter($categoryId = null)
    {
        if ($categoryId) {
            if (!is_array($categoryId)) {
                $categoryId = array($categoryId);
            }

            $categoryId = array_filter($categoryId);

            if (count($categoryId)) {
                $this->queryBuilder->andWhere($this->getRepositoryAlias().'.category IN (:'.$this->getRepositoryAlias().'_category'.')');
                $this->queryBuilder->setParameter($this->getRepositoryAlias().'_category', $categoryId);
            }
        }
    }

    /**
     * Add published_at_from_to filter to existing query object
     *
     * @param string $fromTo from value | to value (pipe saperated)
     *
     * @return void
     */
    protected function addPublishedAtFromToFilter($fromTo = null)
    {
        list($from, $to) = explode('|', $fromTo);

        if (!is_numeric($from)) {
            $from = CommonManager::getTimeStampFromStartDate($from);
        }

        if (!is_numeric($to)) {
            $to   = CommonManager::getTimeStampFromEndDate($to);
        }

        $this->addFromToFilter('published_at', $from, $to);
    }

    /**
     * Add published_at_from_to filter to existing query object
     *
     * @param string $fromTo from value | to value (pipe saperated)
     *
     * @return void
     */
    protected function addAdEditModeratedAtFromToFilter($fromTo = null)
    {
        list($from, $to) = explode('|', $fromTo);

        if (!is_numeric($from)) {
            $from = CommonManager::getTimeStampFromStartDate($from);
        }

        if (!is_numeric($to)) {
            $to   = CommonManager::getTimeStampFromEndDate($to);
        }

        $this->addFromToFilter('ad_edit_moderated_at', $from, $to);
    }

    /**
     * Add original_published_at filter to existing query object
     *
     * @param string $fromTo from value | to value (pipe saperated)
     *
     * @return void
     */
    protected function addOriginalPublishedAtFromToFilter($fromTo = null)
    {
        list($from, $to) = explode('|', $fromTo);

        if (!is_numeric($from)) {
            $from = CommonManager::getTimeStampFromStartDate($from);
        }

        if (!is_numeric($to)) {
            $to   = CommonManager::getTimeStampFromEndDate($to);
        }

        $this->addFromToFilter('original_published_at', $from, $to);
    }

    /**
     * Add nested category filter.
     *
     * @param integer $categoryId Ad category id.
     */
    protected function addNestedCategoryFilter($id = null)
    {
        if ($id) {
            if (!is_array($id)) {
                $id = array($id);
            }

            $id = array_filter($id);
            if (count($id)) {
                $categoryNestedArray = array();
                foreach ($id as $categoryId) {
                    $nestedChildren = $this->_em->getRepository('FaEntityBundle:Category')->getNestedChildrenIdsByCategoryId($categoryId);
                    if (count($nestedChildren)) {
                        $categoryNestedArray = $categoryNestedArray + $nestedChildren;
                    }
                }

                $id = $categoryNestedArray;
                $this->queryBuilder->andWhere($this->getRepositoryAlias().'.category IN (:'.$this->getRepositoryAlias().'_nested_category'.')');
                $this->queryBuilder->setParameter($this->getRepositoryAlias().'_nested_category', $id);
            }
        }
    }

    /**
     * Add ad title filter to existing query object.
     *
     * @param string $title Ad title.
     */
    protected function addTitleFilter($title = null)
    {
        $this->queryBuilder->andWhere(sprintf('%s.title LIKE \'%%%s%%\'', $this->getRepositoryAlias(), $title));
    }

    /**
     * Add ti_ad_id filter to existing query object.
     *
     * @param integer $ti_ad_id Ti ad id.
     */
    protected function addTiAdIdFilter($ti_ad_id = null)
    {
        $this->queryBuilder->andWhere(self::ALIAS.'.ti_ad_id = :tiAdId')
            ->setParameter('tiAdId', $ti_ad_id);
    }

    /**
     * Add update_type filter to existing query object.
     *
     * @param string $string update_type.
     */
    protected function addUpdateTypeFilter($string = null)
    {
        $this->queryBuilder->andWhere(sprintf('%s.update_type LIKE \'%%%s%%\'', $this->getRepositoryAlias(), $string));
    }

    /**
     * Add ad blocked ad filter to existing query object.
     *
     * @param boolean $isBlockedAd
     */
    protected function addIsBlockedAdFilter($isBlockedAd = null)
    {
        $this->queryBuilder->andWhere($this->getRepositoryAlias().'.is_blocked_ad = '.$isBlockedAd);
    }

    /**
     * Add ad feed filter
     *
     * @param boolean $isFeedAd
     */
    protected function addIsFeedAdFilter($isFeedAd = null)
    {
        if (is_array($isFeedAd)) {
            $isFeedAd = $isFeedAd[0];
        }

        if ($isFeedAd) {
            $this->queryBuilder->andWhere($this->getRepositoryAlias().'.is_feed_ad = '.$isFeedAd);
        } else {
            $this->queryBuilder->andWhere($this->getRepositoryAlias().'.is_feed_ad = 0 OR '.$this->getRepositoryAlias().'.is_feed_ad IS NULL');
        }
    }

    /**
     * Add ad feed filter
     *
     * @param boolean $isFeedAd
     */
    protected function addIsAddPhotoMailSentFilter($isAddPhotoMailSent = null)
    {
        if (is_array($isAddPhotoMailSent)) {
            $isAddPhotoMailSent = $isAddPhotoMailSent[0];
        }

        if ($isAddPhotoMailSent) {
            $this->queryBuilder->andWhere($this->getRepositoryAlias().'.is_add_photo_mail_sent = '.$isAddPhotoMailSent);
        } else {
            $this->queryBuilder->andWhere($this->getRepositoryAlias().'.is_add_photo_mail_sent = 0 OR '.$this->getRepositoryAlias().'.is_add_photo_mail_sent IS NULL');
        }
    }

    /**
     * Add ad affiliate filter
     *
     * @param boolean $affiliate
     */
    protected function addAffiliateFilter($affiliate = null)
    {
        if (is_array($affiliate)) {
            $affiliate = $affiliate[0];
        }

        if ($affiliate) {
            $this->queryBuilder->andWhere($this->getRepositoryAlias().'.affiliate = '.$affiliate);
        } else {
            $this->queryBuilder->andWhere($this->getRepositoryAlias().'.affiliate = 0 OR '.$this->getRepositoryAlias().'.affiliate IS NULL');
        }
    }

    /**
     * Get ad counter for users.
     *
     * @param array $userId User id array.
     *
     * @return array
     */
    public function getAdCounterByUserId($userId = array())
    {
        $query = $this->createQueryBuilder(self::ALIAS)
        ->select(UserRepository::ALIAS.'.id, COUNT('.self::ALIAS.'.id) as cnt')
        ->innerJoin(self::ALIAS.'.user', UserRepository::ALIAS, 'WITH', self::ALIAS.'.user = '.UserRepository::ALIAS.'.id');

        if (!is_array($userId)) {
            $userId = array($userId);
        }

        if (count($userId)) {
            $query->andWhere($this->getRepositoryAlias().'.user IN (:userId)');
            $query->setParameter('userId', $userId);
        }

        $objResources = $query->getQuery()->getArrayResult();
        $adCountArr = array();
        if (count($objResources)) {
            for ($i=0; $i<count($objResources); $i++) {
                $adCountArr[$objResources[$i]['id']] = $objResources[$i]['cnt'];
            }
        }

        return $adCountArr;
    }

    /**
     * Get category id from ad id.
     *
     * @param array $adId Ad id array.
     *
     * @return array
     */
    public function getAdCategoryIdArrayByAdId($adId = array())
    {
        $qb = $this->createQueryBuilder(self::ALIAS)
            ->select(self::ALIAS.'.id', CategoryRepository::ALIAS.'.id as cid')
            ->leftJoin(self::ALIAS.'.category', CategoryRepository::ALIAS);

        if (!is_array($adId)) {
            $adId = array($adId);
        }

        if (count($adId)) {
            $qb->andWhere(self::ALIAS.'.id IN (:adId)');
            $qb->setParameter('adId', $adId);
        }

        $objResources = $qb->getQuery()->getArrayResult();
        $arr = array();
        if (count($objResources)) {
            for ($i=0; $i<count($objResources); $i++) {
                $arr[$objResources[$i]['id']] = $objResources[$i]['cid'];
            }
        }

        return $arr;
    }

    /**
     * Get role id from ad id.
     *
     * @param array $adId Ad id array.
     *
     * @return array
     */
    public function getRoleIdArrayByAdId($adId = array())
    {
        $qb = $this->createQueryBuilder(self::ALIAS)
        ->select(self::ALIAS.'.id', RoleRepository::ALIAS.'.id as rid')
        ->leftJoin(self::ALIAS.'.user', UserRepository::ALIAS)
        ->leftJoin(UserRepository::ALIAS.'.roles', RoleRepository::ALIAS);

        if (!is_array($adId)) {
            $adId = array($adId);
        }

        if (count($adId)) {
            $qb->andWhere(self::ALIAS.'.id IN (:adId)');
            $qb->setParameter('adId', $adId);
        }

        $objResources = $qb->getQuery()->getArrayResult();

        $arr = array();
        if (count($objResources)) {
            for ($i=0; $i<count($objResources); $i++) {
                if (array_key_exists($objResources[$i]['id'], $arr)) {
                    $arr[$objResources[$i]['id']] = $arr[$objResources[$i]['id']].','.$objResources[$i]['rid'];
                } else {
                    $arr[$objResources[$i]['id']] = $objResources[$i]['rid'];
                }
            }
        }

        return $arr;
    }

    /**
     * Get category id from ad id.
     *
     * @param array $adId Ad id array.
     *
     * @return array
     */
    public function getStatusIdArrayByAdId($adId = array())
    {
        $qb = $this->createQueryBuilder(self::ALIAS)
        ->select(self::ALIAS.'.id', 'IDENTITY('.self::ALIAS.'.status) as eid');

        if (!is_array($adId)) {
            $adId = array($adId);
        }

        if (count($adId)) {
            $qb->andWhere(self::ALIAS.'.id IN (:adId)');
            $qb->setParameter('adId', $adId);
        }

        $objResources = $qb->getQuery()->getArrayResult();
        $arr = array();
        if (count($objResources)) {
            for ($i=0; $i<count($objResources); $i++) {
                $arr[$objResources[$i]['id']] = $objResources[$i]['eid'];
            }
        }

        return $arr;
    }

    /**
     * Get category id from ad id.
     *
     * @param array $adId Ad id array.
     *
     * @return array
     */
    public function getTypeIdArrayByAdId($adId = array())
    {
        $qb = $this->createQueryBuilder(self::ALIAS)
        ->select(self::ALIAS.'.id', BaseEntityRepository::ALIAS.'.id as eid')
        ->leftJoin(self::ALIAS.'.type', BaseEntityRepository::ALIAS);

        if (!is_array($adId)) {
            $adId = array($adId);
        }

        if (count($adId)) {
            $qb->andWhere(self::ALIAS.'.id IN (:adId)');
            $qb->setParameter('adId', $adId);
        }

        $objResources = $qb->getQuery()->getArrayResult();
        $arr = array();
        if (count($objResources)) {
            for ($i=0; $i<count($objResources); $i++) {
                $arr[$objResources[$i]['id']] = $objResources[$i]['eid'];
            }
        }

        return $arr;
    }

    /**
     * Get product types.
     *
     * @return array
     */
    public static function getProductTypes()
    {
        return array(
            1 => 'Print',
            2 => 'Package',
        );
    }

    /**
     * Get user data.
     *
     * @param array $userId User id array.
     *
     * @return array
     */
    public function getUserDataArrayByAdId($adId = array())
    {
        $qb = $this->createQueryBuilder(self::ALIAS)
        ->select(self::ALIAS.'.id', UserRepository::ALIAS.'.id as user_id', UserRepository::ALIAS.'.first_name', UserRepository::ALIAS.'.last_name', UserRepository::ALIAS.'.business_name')
        ->leftJoin(self::ALIAS.'.user', UserRepository::ALIAS);

        if (!is_array($adId)) {
            $adId = array($adId);
        }

        if (count($adId)) {
            $qb->andWhere(self::ALIAS.'.id IN (:adId)');
            $qb->setParameter('adId', $adId);
        }

        $objResources = $qb->getQuery()->getArrayResult();
        $arr = array();
        if (count($objResources)) {
            for ($i=0; $i<count($objResources); $i++) {
                if ($objResources[$i]['user_id']) {
                    $arr[$objResources[$i]['id']] = ($objResources[$i]['business_name'] ? $objResources[$i]['business_name'] : ($objResources[$i]['first_name'].' '.$objResources[$i]['last_name']));
                } else {
                    $arr[$objResources[$i]['id']] = 'Detached ad';
                }
            }
        }

        return $arr;
    }

    /**
     * Get ad detail array by ad ids.
     *
     * @param array $adId Ad id array.
     *
     * @return array
     */
    public function getAdDetailArrayByAdId($adId = array())
    {
        $adDetailArray = array();
        $qb = $this->createQueryBuilder(self::ALIAS)
        ->select(self::ALIAS.'.id', self::ALIAS.'.title', BaseEntityRepository::ALIAS.'.name as ad_status', AdImageRepository::ALIAS.'.path', AdImageRepository::ALIAS.'.hash', CategoryRepository::ALIAS.'.id as category_id', LocationRepository::ALIAS.'d.id as domicile_id', LocationRepository::ALIAS.'t.id as town_id')
        ->leftJoin('FaAdBundle:AdImage', AdImageRepository::ALIAS, 'WITH', AdImageRepository::ALIAS.'.ad = '.self::ALIAS.'.id AND '.AdImageRepository::ALIAS.'.ord = 1')
        ->leftJoin(self::ALIAS.'.category', CategoryRepository::ALIAS)
        ->leftJoin(self::ALIAS.'.ad_locations', AdLocationRepository::ALIAS)
        ->leftJoin(AdLocationRepository::ALIAS.'.location_domicile', LocationRepository::ALIAS.'d')
        ->leftJoin(AdLocationRepository::ALIAS.'.location_town', LocationRepository::ALIAS.'t')
        ->leftJoin(self::ALIAS.'.status', BaseEntityRepository::ALIAS)
        ->groupBy(self::ALIAS.'.id');

        if (!is_array($adId)) {
            $adId = array($adId);
        }

        if (count($adId)) {
            $qb->andWhere(self::ALIAS.'.id IN (:adId)');
            $qb->setParameter('adId', $adId);
        }

        $adDetailRes = $qb->getQuery()->getArrayResult();
        if (count($adDetailRes)) {
            for ($i=0; $i<count($adDetailRes); $i++) {
                $adDetailArray[$adDetailRes[$i]['id']]['ad_id'] = $adDetailRes[$i]['id'];
                $adDetailArray[$adDetailRes[$i]['id']]['ad_title'] = $adDetailRes[$i]['title'];
                $adDetailArray[$adDetailRes[$i]['id']]['ad_status'] = $adDetailRes[$i]['ad_status'];
                $adDetailArray[$adDetailRes[$i]['id']]['category_id'] = $adDetailRes[$i]['category_id'];
                $adDetailArray[$adDetailRes[$i]['id']]['domicile_id'] = $adDetailRes[$i]['domicile_id'];
                $adDetailArray[$adDetailRes[$i]['id']]['town_id'] = $adDetailRes[$i]['town_id'];
                if ($adDetailRes[$i]['path']) {
                    $adDetailArray[$adDetailRes[$i]['id']]['ad_image_path'] = $adDetailRes[$i]['path'];
                    $adDetailArray[$adDetailRes[$i]['id']]['ad_image_hash'] = $adDetailRes[$i]['hash'];
                }
            }
        }

        return $adDetailArray;
    }

    /**
     * Returns ad solr document object.
     *
     * @param object $ad        Ad object.
     * @param object $document  Solr document object.
     * @param object $container Container identifier.
     *
     * @return Apache_Solr_Document
     */
    public function getSolrDocument($ad, $document = null, $container = null)
    {
        if (!$document) {
            $document = new \SolrInputDocument($ad);
        }

        $categoryObj    = ($ad->getCategory() ? $ad->getCategory() : null);
        $categoryId     = ($categoryObj ? $categoryObj->getId() : null);
        $categoryLevel  = ($categoryObj ? $categoryObj->getLvl() : null);
        $adUpsellValues = $this->_em->getRepository('FaAdBundle:AdUserPackageUpsell')->getAdPackageUpsellValueArray($ad->getId(), $categoryId, $container);

        $document = $this->addField($document, AdSolrFieldMapping::ID, $ad->getId());
        $document = $this->addField($document, AdSolrFieldMapping::USER_ID, ($ad->getUser() ? $ad->getUser()->getId() : null));
        $document = $this->addField($document, AdSolrFieldMapping::STATUS_ID, ($ad->getStatus() ? $ad->getStatus()->getId() : null));
        $document = $this->addField($document, AdSolrFieldMapping::TYPE_ID, ($ad->getType() ? $ad->getType()->getId() : null));
        $document = $this->addField($document, AdSolrFieldMapping::CATEGORY_ID, $categoryId);
        $document = $this->addField($document, AdSolrFieldMapping::CATEGORY_LEVEL, $categoryLevel);
        $document = $this->addField($document, AdSolrFieldMapping::PRICE, $ad->getPrice());
        $document = $this->addField($document, AdSolrFieldMapping::USE_PRIVACY_NUMBER, $ad->getUsePrivacyNumber());
        $document = $this->addField($document, AdSolrFieldMapping::PRIVACY_NUMBER, $ad->getPrivacyNumber());
        $document = $this->addField($document, AdSolrFieldMapping::USER_PHONE_NUMBER, $ad->getPhone());
        $document = $this->addField($document, AdSolrFieldMapping::TITLE, $ad->getTitle());
        $document = $this->addField($document, AdSolrFieldMapping::DESCRIPTION, $ad->getDescription());
        $document = $this->addField($document, AdSolrFieldMapping::HAS_VIDEO, $ad->getHasVideo());
        $document = $this->addField($document, AdSolrFieldMapping::RENEWED_AT, $ad->getRenewedAt());
        $document = $this->addField($document, AdSolrFieldMapping::EXPIRES_AT, $ad->getExpiresAt());
        $document = $this->addField($document, AdSolrFieldMapping::SOLD_AT, $ad->getSoldAt());
        $document = $this->addField($document, AdSolrFieldMapping::SOLD_PRICE, $ad->getSoldPrice());
        $document = $this->addField($document, AdSolrFieldMapping::CREATED_AT, $ad->getCreatedAt());
        $document = $this->addField($document, AdSolrFieldMapping::PUBLISHED_AT, $ad->getPublishedAt());
        $document = $this->addField($document, AdSolrFieldMapping::UPDATED_AT, $ad->getUpdatedAt());
        $document = $this->addField($document, AdSolrFieldMapping::PERSONALIZED_TITLE, $ad->getPersonalizedTitle());
        $document = $this->addField($document, AdSolrFieldMapping::QTY, $ad->getQty());
        $document = $this->addField($document, AdSolrFieldMapping::QTY_SOLD, $ad->getQtySold());
        $document = $this->addField($document, AdSolrFieldMapping::DELIVERY_METHOD_OPTION_ID, $ad->getDeliveryMethodOption() ? $ad->getDeliveryMethodOption()->getId() : null);
        $document = $this->addField($document, AdSolrFieldMapping::POSTAGE_PRICE, $ad->getPostagePrice());
        $document = $this->addField($document, AdSolrFieldMapping::PAYMENT_METHOD_OPTION_ID, $ad->getPaymentMethodId() ? $ad->getPaymentMethodId() : null);
        $document = $this->addField($document, AdSolrFieldMapping::YOUTUBE_VIDEO_URL, $ad->getYoutubeVideoUrl());

        if ($ad->getIsNew() != null) {
            $document = $this->addField($document, AdSolrFieldMapping::IS_NEW, ($ad->getIsNew() ? $ad->getIsNew() : '0'));
        }

        if ($ad->getIsTradeAd() != null || $ad->getIsTradeAd() == 0) {
            $document = $this->addField($document, AdSolrFieldMapping::IS_TRADE_AD, ($ad->getIsTradeAd() ? $ad->getIsTradeAd() : '0'));
        }

        // Index for parent categories
        $allParentCategories = $this->_em->getRepository('FaEntityBundle:Category')->getCategoryPathArrayById($categoryId, false, $container);
        $parentCategories = $allParentCategories;
        array_pop($parentCategories);

        if (count($allParentCategories)) {
            $level = 1;
            foreach ($allParentCategories as $parentId => $parentName) {
                $document = $this->addField($document, 'a_parent_category_lvl_'.$level++.'_id_i', $parentId);
            }
        }

        // Is top ad
        if ($ad->isTopAd($container)) {
            $document = $this->addField($document, AdSolrFieldMapping::IS_TOP_AD, 1);
        }

        // Is highlight ad
        if ($ad->isUrgentAd($container)) {
            $document = $this->addField($document, AdSolrFieldMapping::IS_URGENT_AD, 1);
        }

        // Is home page featured ad
        if ($ad->isHomeFeaturedAd($container)) {
            $document = $this->addField($document, AdSolrFieldMapping::IS_HOMEPAGE_FEATURE_AD, 1);
        }

        if ($ad->getAffiliate()) {
            $this->addField($document, AdSolrFieldMapping::IS_AFFILIATE_AD, 1);
        } else {
            $this->addField($document, AdSolrFieldMapping::IS_AFFILIATE_AD, '0');
        }

        if ($ad->getIsFeedAd()) {
            $this->addField($document, AdSolrFieldMapping::IS_FEED_AD, 1);
        } else {
            $this->addField($document, AdSolrFieldMapping::IS_FEED_AD, '0');
        }

        if ($ad->getImageCount()) {
            $this->addField($document, AdSolrFieldMapping::IMAGE_COUNT, $ad->getImageCount());
        }

        if ($ad->getAdRef()) {
            $this->addField($document, AdSolrFieldMapping::AD_REF, $ad->getAdRef());
        }

        if ($ad->getTrackBackUrl()) {
            $this->addField($document, AdSolrFieldMapping::TRACK_BACK_URL, $ad->getTrackBackUrl());
        }

        if ($ad->getSource()) {
            $this->addField($document, AdSolrFieldMapping::AD_SOURCE, $ad->getSource());
        }

        // Weekly refresh at
        $document = $this->addField($document, AdSolrFieldMapping::WEEKLY_REFRESH_AT, $ad->getWeeklyRefreshAt());
        $document = $this->addField($document, AdSolrFieldMapping::WEEKLY_REFRESH_COUNT, $ad->getManualRefresh());

        // Weekly refresh at & created at
        if ($ad->getWeeklyRefreshAt() && $ad->getPublishedAt() && $ad->getWeeklyRefreshAt() > $ad->getPublishedAt()) {
            $document = $this->addField($document, AdSolrFieldMapping::WEEKLY_REFRESH_PUBLISHED_AT, $ad->getWeeklyRefreshAt());
        } else {
            $document = $this->addField($document, AdSolrFieldMapping::WEEKLY_REFRESH_PUBLISHED_AT, $ad->getPublishedAt());
        }

        // Boost
        $document = $this->addField($document, AdSolrFieldMapping::IS_BOOSTED, $ad->getIsBoosted());
        $document = $this->addField($document, AdSolrFieldMapping::BOOSTED_AT, $ad->getBoostedAt());


        //ad user business category id
        //shop detail.
        if ($ad->getUser() && $ad->getUser()->getBusinessCategoryId()) {
            $document = $this->addField($document, AdSolrFieldMapping::AD_USER_BUSINESS_CATEGORY_ID, $ad->getUser()->getBusinessCategoryId());
        }

        //shop detail.
        if ($ad->getUser() && !in_array($ad->getUser()->getBusinessCategoryId(), array(CategoryRepository::ADULT_ID, CategoryRepository::SERVICES_ID))) {
            $hasProfileExposureFlag  = false;
            $hasProfileExposureMiles = '-1';
            $profileExposurePackageCatId = null;
            $userPackagePurchasedAt = null;
            $userActivePackage = $this->_em->getRepository('FaUserBundle:UserPackage')->getCurrentActivePackage($ad->getUser());
            if ($userActivePackage) {
                $userUpsells = $this->_em->getRepository('FaUserBundle:UserUpsell')->getUserUpsellArrayWithValue($ad->getUser()->getId());
                foreach ($userUpsells as $upsellId => $upsellValue) {
                    if (in_array($upsellId, $this->_em->getRepository('FaPromotionBundle:Upsell')->getProfileExposureUpsellIdsIdsArray())) {
                        $hasProfileExposureFlag  = true;
                        $hasProfileExposureMiles = (!$upsellValue['upsell_value'] ? '0' : $upsellValue['upsell_value']);
                        $profileExposurePackageCatId = $upsellValue['package_category_id'];
                        $userPackagePurchasedAt = ($userActivePackage->getUpdatedAt() ? $userActivePackage->getUpdatedAt() : $userActivePackage->getCreatedAt());
                        break;
                    }
                }
            }

            if ($hasProfileExposureFlag) {
                $document = $this->addField($document, AdSolrFieldMapping::HAS_PROFILE_EXPOSURE, 1);
                $document = $this->addField($document, AdSolrFieldMapping::PROFILE_EXPOSURE_MILES, $hasProfileExposureMiles);
                $document = $this->addField($document, AdSolrFieldMapping::SHOP_PACKAGE_CATEGORY_ID, $profileExposurePackageCatId);
                $document = $this->addField($document, AdSolrFieldMapping::SHOP_PACKAGE_PURCHASED_AT, $userPackagePurchasedAt);
            } else {
                $document = $this->addField($document, AdSolrFieldMapping::HAS_PROFILE_EXPOSURE, 0);
                $document = $this->addField($document, AdSolrFieldMapping::PROFILE_EXPOSURE_MILES, null);
                $document = $this->addField($document, AdSolrFieldMapping::SHOP_PACKAGE_CATEGORY_ID, null);
                $document = $this->addField($document, AdSolrFieldMapping::SHOP_PACKAGE_PURCHASED_AT, $userPackagePurchasedAt);
            }
        }
        // Index images
        $imageLimit = 0;
        if (count($parentCategories)) {
            $parentCategoryIds = array_keys($parentCategories);
            $imagelimitCategoryName = CommonManager::getCategoryClassNameById($parentCategoryIds[0]);
            $imageLimit = $container->getParameter('fa.image.'.$imagelimitCategoryName.'_upload_limit');
        }
        if (isset($adUpsellValues[UpsellRepository::UPSELL_TYPE_ADDITIONAL_PHOTO_VALUE])) {
            $imageLimit = $adUpsellValues[UpsellRepository::UPSELL_TYPE_ADDITIONAL_PHOTO_VALUE];
        }
        $document = $this->_em->getRepository('FaAdBundle:AdImage')->getSolrDocument($ad, $document, $imageLimit);

        // Index locations
        $document = $this->_em->getRepository('FaAdBundle:AdLocation')->getSolrDocument($ad, $document);

        return $document;
    }

    /**
     * Add field to solr document.
     *
     * @param object $document Solr document object.
     * @param string $field    Field to index or store.
     * @param string $value    Value of field.
     *
     * @return object
     */
    private function addField($document, $field, $value)
    {
        if ($value != null) {
            $document->addField($field, $value);
        }

        return $document;
    }

    /**
     * Find the ad by id.
     *
     * @param integer $id         Ad id.
     * @param boolean $withRefIds Need result array with referece ids.
     * @param string  $modifyIp   Modify ip
     *
     * @return array
     */
    public function findByAdId($adId, $withRefIds = false, $modifyIp = null)
    {
        $qb = $this->getBaseQueryBuilder();

        if (!is_array($adId)) {
            $adId = array($adId);
        }

        $qb->andWhere(self::ALIAS.'.id IN (:id)');
        $qb->setParameter('id', $adId);

        $resultArray = $qb->getQuery()->getArrayResult();

        if ($withRefIds) {
            $result = $qb->getQuery()->getResult();
            foreach ($result as $key => $ad) {
                if (isset($resultArray[$key])) {
                    $resultArray[$key]['type_id']   = $ad->getType() ? $ad->getType()->getId() : null;
                    $resultArray[$key]['edited_at'] = time();
                    if ($modifyIp) {
                        $resultArray[$key]['modify_ip'] = $modifyIp;
                    }
                }
            }
        }

        return $resultArray;
    }

    /**
     * Update data from moderation.
     *
     * @param array  $data      Data from moderation.
     * @param object $container
     */
    public function updateDataFromModeration($data, $container = null)
    {
        foreach ($data as $element) {
            $object = $this->findOneBy(array('id' => $element['id']));
            foreach ($element as $field => $value) {
                $methodName = 'set'.str_replace(' ', '', ucwords(str_replace('_', ' ', $field)));
                if (method_exists($object, $methodName) === true) {
                    $object->$methodName($value);
                }

                if ($field == 'type_id') {
                    if ($value) {
                        $adType = $this->_em->getRepository('FaEntityBundle:Entity')->findOneBy(array('id' => $value));
                        $object->setType($adType);
                    } else {
                        $object->setType(null);
                    }
                } elseif ($field == 'delivery_method_option_id') {
                    if ($value) {
                        $deliveryMethodOption = $this->_em->getRepository('FaPaymentBundle:DeliveryMethodOption')->findOneBy(array('id' => $value));
                        $object->setDeliveryMethodOption($deliveryMethodOption);
                    } else {
                        $object->setDeliveryMethodOption(null);
                    }
                }
            }

            // set expires at
            if ($object->getStatus()->getId() == BaseEntityRepository::AD_STATUS_IN_MODERATION_ID) {
                $expirationDays = $this->_em->getRepository('FaCoreBundle:ConfigRule')->getExpirationDays($object->getCategory()->getId(), $container);
                $object->setExpiresAt($this->getAdPrintExpiry($object->getId(), CommonManager::getTimeFromDuration($expirationDays.'d')));
            }

            $status = $this->_em->getRepository('FaEntityBundle:Entity')->findOneBy(array('id' => BaseEntityRepository::AD_STATUS_LIVE_ID));
            $object->setStatus($status);

            //if (!$object->getPublishedAt() || ($object->getRenewedAt() && $object->getPublishedAt() && $object->getRenewedAt() >= $object->getPublishedAt() && (($object->getRenewedAt() - $object->getPublishedAt()) / (3600*24*1)) >= 7)) { //for FFR-1675
            if (!$object->getPublishedAt() || ($object->getRenewedAt() && $object->getPublishedAt() && $object->getRenewedAt() >= $object->getPublishedAt())) {
                $object->setPublishedAt(time());
                if (!$object->getOriginalPublishedAt()) {
                    $object->setOriginalPublishedAt(time());
                }
            }

            $isWeeklyRefresh = $this->checkIsWeeklyRefreshAd($object->getId());

            // Check weekly refresh upsell purchased then set weekly_refresh_at field
            if ($isWeeklyRefresh && !$object->getWeeklyRefreshAt()) {
                $object->setWeeklyRefreshAt(time());
            } elseif ($isWeeklyRefresh && $object->getWeeklyRefreshAt() && $object->getPublishedAt() && $object->getWeeklyRefreshAt() < $object->getPublishedAt()) {
                $object->setWeeklyRefreshAt($object->getPublishedAt());
            } elseif ($isWeeklyRefresh === false) {
                $object->setWeeklyRefreshAt(null);
            }

            $this->_em->persist($object);
            $this->_em->flush($object);
            $this->_em->getRepository('FaAdBundle:AdIpAddress')->checkAndLogIpAddress($object, $object->getModifyIp());
            // paa touchpoint entry for newsletter & dotmailer
            try {
                $this->_em->getRepository('FaDotMailerBundle:Dotmailer')->doTouchPointEntry($object->getUser()->getId(), $object->getId(), DotmailerRepository::TOUCH_POINT_PAA, $container);
            } catch (\Exception $e) {
                if ($container) {
                    CommonManager::sendErrorMail($container, 'Error: Problem in touch point PAA: '.$object->getId(), $e->getMessage(), $e->getTraceAsString());
                }
            }
        }
    }

    /**
     * Get ad detail array.
     *
     * @param integer $adId      Ad id.
     * @param object  $container Continer identifier.
     *
     * @return array
     */
    public function getAdDetailArray($adId, $container, $seoFlag = false)
    {
        $query = $this->getBaseQueryBuilder()
        ->select(self::ALIAS.'.id as ad_id', self::ALIAS.'.privacy_number', self::ALIAS.'.qty', self::ALIAS.'.is_new', self::ALIAS.'.payment_method_id', UserRepository::ALIAS.'.id as user_id', self::ALIAS.'.title', self::ALIAS.'.description', self::ALIAS.'.personalized_title', self::ALIAS.'.price', self::ALIAS.'.published_at', self::ALIAS.'.created_at', CategoryRepository::ALIAS.'.id as category_id', AdLocationRepository::ALIAS.'.latitude', AdLocationRepository::ALIAS.'.longitude', DeliveryMethodOptionRepository::ALIAS.'.name as delivery_method_name', LocationRepository::ALIAS.'t.name as ad_town_name', LocalityRepository::ALIAS.'.name as ad_locality_name', BaseEntityRepository::ALIAS.'.id as type_id', LocationRepository::ALIAS.'la.id as area_id', LocationRepository::ALIAS.'la.is_special_area as is_special_area', LocationRepository::ALIAS.'la.name as area_name')
        ->leftJoin(self::ALIAS.'.ad_locations', AdLocationRepository::ALIAS)
        ->leftJoin(AdLocationRepository::ALIAS.'.location_town', LocationRepository::ALIAS.'t')
        ->leftJoin(AdLocationRepository::ALIAS.'.location_area', LocationRepository::ALIAS.'la')
        ->leftJoin(AdLocationRepository::ALIAS.'.locality', LocalityRepository::ALIAS)
        ->innerJoin(self::ALIAS.'.category', CategoryRepository::ALIAS)
        ->leftJoin(self::ALIAS.'.user', UserRepository::ALIAS)
        ->leftJoin(self::ALIAS.'.type', BaseEntityRepository::ALIAS)
        ->leftJoin(self::ALIAS.'.delivery_method_option', DeliveryMethodOptionRepository::ALIAS)
        ->andWhere(self::ALIAS.'.id = :adId')
        ->setParameter('adId', $adId)
        ->addGroupBy(self::ALIAS.'.id');

        $categoryPath = array();
        $adDetail     = $query->getQuery()->getOneOrNullResult();
        $adImages     = $this->_em->getRepository('FaAdBundle:AdImage')->getAdImages($adId, '1');
        if (isset($adDetail['category_id']) && $adDetail['category_id']) {
            $categoryPath = $this->_em->getRepository('FaEntityBundle:Category')->getCategoryPathArrayById($adDetail['category_id'], false, $container);
            $adDetail['category_path'] = $categoryPath;
        }
        //set payment method
        if (isset($adDetail['payment_method_id']) && $adDetail['payment_method_id']) {
            $paymentMethods = $this->_em->getRepository('FaPaymentBundle:Payment')->getPaymentMethodOptionsArray($container);
            if (isset($paymentMethods[$adDetail['payment_method_id']])) {
                $adDetail['payment_method'] = $paymentMethods[$adDetail['payment_method_id']];
            }
        }
        //ad user detail
        if (isset($adDetail['user_id']) && $adDetail['user_id']) {
            $userDetailArray = $this->_em->getRepository('FaUserBundle:User')->getAdUserDetail($adDetail['user_id']);
            if (count($userDetailArray)) {
                $adDetail['user'] = $userDetailArray;
            }
        }

        //ad images
        if ($adImages) {
            foreach ($adImages as $adImage) {
                $adDetail['images'][] = array(
                    'path'       => $adImage->getPath(),
                    'hash'       => $adImage->getHash(),
                    'ord'        => $adImage->getOrd(),
                    'aws'        => $adImage->getAws(),
                    'image_name' => $adImage->getImageName(),
                );
            }
        }
       
        //ad dimensions
        if (isset($adDetail['category_id']) && $adDetail['category_id']) {
            $dimensionArray = $this->getAdDimensionByCategoryIdAndAdId($adDetail['category_id'], $adId, $categoryPath, $adDetail, $container, $seoFlag);
            if (count($dimensionArray)) {
                $adDetail = $adDetail + $dimensionArray;
            }
        }

        return $adDetail;
    }

    /**
     * Get dimension array by category and ad id.
     *
     * @param integer $categoryId   Category id.
     * @param integer $adId         Ad id.
     * @param array   $categoryPath Category path array.
     * @param object  $container    Container identifier.
     * @param array   $adDetail     Ad Detail array.
     *
     * @return array
     */
    public function getAdDimensionByCategoryIdAndAdId($categoryId, $adId, $categoryPath, $adDetail, $container, $seoFlag = false)
    {
        $unwantedFields        = array();
        $adDetailTabFields     = array();
        $repository            = null;
        $className             = null;
        $entityCacheManager    = $container->get('fa.entity.cache.manager');
        $categoryIds           = array_keys($categoryPath);
        $parentCategoryNames   = array_values($categoryPath);
        $rootCategoryId        = $categoryIds[0];
        $secondLevelCategoryId = (isset($categoryIds[1]) ? $categoryIds[1] : null);

        //get dimension fields categorywise.
        if ($rootCategoryId) {
            $className   = CommonManager::getCategoryClassNameById($rootCategoryId, true);
            $repository  = $this->_em->getRepository('FaAdBundle:Ad'.$className);
            // get tabs field array.
            if (method_exists($repository, 'getAdDetailTabFields')) {
                $adDetailTabFields = $repository->getAdDetailTabFields();
            }

            // get unwanted fields.
            if (!$seoFlag) {
                $unwantedFields = $this->getAdDetailUnwantedFields($categoryPath);
            }

            // ger unit array by fields.
            if (method_exists($repository, 'getUnitFieldArray')) {
                $unitForFields = $repository->getUnitFieldArray();
                $unitForFields = array_change_key_case($unitForFields, CASE_UPPER);
            }
        }

        //ad dimensions
        $dimensionArray = array();
        $object         = null;
        $object         = $repository->findOneBy(array('ad' => $adId));

        if ($object) {
            $metaData = ($object->getMetaData() ? unserialize($object->getMetaData()) : null);
            $paaFields = $this->getAdDetailFields($categoryId, $container);
            // remove unwanted fields.
            if (count($unwantedFields)) {
                foreach ($unwantedFields as $unwantedField) {
                    if (isset($paaFields[$unwantedField])) {
                        unset($paaFields[$unwantedField]);
                    }
                }
            }

            foreach ($paaFields as $field => $label) {
                $adDetailFieldKeyResult = explode('|', $field);
                $field                  = $adDetailFieldKeyResult[0];
                $repositoryName         = isset($adDetailFieldKeyResult[1]) ? $adDetailFieldKeyResult[1] : '';
                $unit                   = null;
                $key                    = 'detail';
                $adFieldKey             = CommonManager::recursiveArraySearch(strtoupper($field), $adDetailTabFields);
                $value                  = $this->_em->getRepository('FaAdBundle:PaaField')->getPaaFieldValue($field, $object, $metaData, $container, $className);

                // check for unit.
                if (isset($unitForFields[strtoupper($field)])) {
                    $unit = ' '.$unitForFields[strtoupper($field)];
                }

                if ($adFieldKey !== false) {
                    $key = $adFieldKey;
                }

                //check if it is separate field else check in meta data fields.
                if (isset($adDetail[$field]) && in_array($field, array('category_id', 'type_id', 'is_new', 'qty'))) {
                    if ($repositoryName) {
                        if ($field == 'category_id' && in_array($secondLevelCategoryId, array(CategoryRepository::CARS_ID, CategoryRepository::COMMERCIALVEHICLES_ID))) {
                            if (isset($parentCategoryNames[2])) {
                                if ($seoFlag) {
                                    $dimensionArray[$field] = $parentCategoryNames[2];
                                } else {
                                    $dimensionArray[$key]['Make'] = $parentCategoryNames[2];
                                }
                            }
                            if ($seoFlag) {
                                $dimensionArray[$field] = $entityCacheManager->getEntityNameById($repositoryName, $adDetail[$field]);
                            } else {
                                $dimensionArray[$key]['Model'] = $entityCacheManager->getEntityNameById($repositoryName, $adDetail[$field]);
                            }
                        } else {
                            $adDetailFieldValue = explode(',', $adDetail[$field]);
                            //check for single and multiple values.
                            if ($adDetailFieldValue && is_array($adDetailFieldValue)) {
                                foreach ($adDetailFieldValue as $adDetailFieldValue) {
                                    if ($seoFlag) {
                                        $dimensionArray[$field][] = $entityCacheManager->getEntityNameById($repositoryName, $adDetailFieldValue);
                                    } else {
                                        $dimensionArray[$key][$label][] = $entityCacheManager->getEntityNameById($repositoryName, $adDetailFieldValue);
                                    }
                                }
                            }
                        }
                    } else {
                        $fieldValue = null;
                        switch ($field) {
                            case 'is_new':
                                $fieldValue = $this->_em->getRepository('FaEntityBundle:Entity')->getIsNewNameById($adDetail[$field], $container);
                                break;
                            case 'qty':
                                $fieldValue = $adDetail[$field];
                                break;
                        }
                        if ($seoFlag) {
                            $dimensionArray[$field] = $fieldValue;
                        } else {
                            $dimensionArray[$key][$label] = $fieldValue;
                        }
                    }
                }

                if (isset($metaData[$field])) {
                    if ($field == 'salary' || $field == 'deposit') {
                        $value = CommonManager::formatCurrency($metaData[$field], $container);
                        if ($field == 'salary' && isset($metaData['salary_type_id'])) {
                            $value .= ' '.$entityCacheManager->getEntityNameById('FaEntityBundle:Entity', $metaData['salary_type_id']);
                        }
                    } elseif (($field == 'mot_expiry_month' || $field == 'road_tax_expiry_month')) {
                        $value = CommonManager::getMonthName($metaData[$field]);
                    } elseif (($field == 'event_start' || $field == 'event_end')) {
                        $value = CommonManager::getTimeStampFromStartDate($metaData[$field]);
                        $value = CommonManager::formatDate($value, $container, null, null, 'EEE dd MMM');
                        if (isset($metaData[$field.'_time'])) {
                            $value .= ' at '.date("H:i", strtotime($metaData[$field.'_time']));
                        }
                    } elseif ($field == 'rental_length') {
                        $value = $metaData[$field].' months';
                    }

                    if (in_array($field, array('reg_year', 'year_built', 'mot_expiry_year', 'road_tax_expiry_year'))) {
                        $value = ucfirst(str_replace('-', ' ', $metaData[$field]));
                    }
                }

                if ($value != null) {
                    if ($seoFlag) {
                        $dimensionArray[$field] = $value.$unit;
                    } else {
                        $dimensionArray[$key][$label] = $value.$unit;
                    }
                }
            }
        }

        return $dimensionArray;
    }

    /**
     * Get similar advers array from solr.
     *
     * @param object  $container    Container object.
     * @param integer $categoryId   Category id.
     * @param string  $title        Ad title.
     * @param integer $page         Page no.
     * @param integer $rows         Limit of records.
     * @param integer $staticOffset Offset.
     * @param integer $sortBy       Sort by.
     *
     * @return array
     */
    public function getPaaSimilarAdverts($container, $categoryId, $title = null, $page = 1, $rows = 5, $staticOffset = 0, $sortBy = null, $staticFilters = null)
    {
        $response = array();
        $keywords = str_replace(array('(', ')', ',', '?', '|', '.', '/', '\\', '*', '+', '-', '"', "'"), '', $title);

        $data = array();
        if ($categoryId) {
            $rootCategoryId = $this->_em->getRepository('FaEntityBundle:Category')->getRootCategoryId($categoryId, $container);

            // This variable contains list of those category ids which doesn't require price.
            $similarAdWithoutPrice = array(CategoryRepository::JOBS_ID, CategoryRepository::COMMUNITY_ID, CategoryRepository::SERVICES_ID);

            $data['query_filters'] = array(
                'ad' => array(
                    'status_id'   => BaseEntityRepository::AD_STATUS_LIVE_ID,
                    'category_id' => $categoryId,
                )
            );

            if ($sortBy && $sortBy == 'price') {
                $data['query_sorter'] = array('ad' => array('price' => 'asc'));
            }

            if (!$staticFilters && !in_array($rootCategoryId, $similarAdWithoutPrice)) {
                $data['static_filters'] = ' AND (a_price_d : [1 TO *])';
            } else {
                $data['static_filters'] = $staticFilters;
            }

            // fetch location from cookie.
            $geoDistParams = array();
            $cookieLocation  = $container->get('request_stack')->getCurrentRequest()->cookies->get('location');
            if ($cookieLocation && $cookieLocation != CommonManager::COOKIE_DELETED) {
                $cookieLocation = get_object_vars(json_decode($cookieLocation));
                if (isset($cookieLocation['latitude']) && isset($cookieLocation['longitude'])) {
                    $geoDistParams = array('sfield' => 'store', 'pt' => $cookieLocation['latitude'].', '.$cookieLocation['longitude']);

                    // Sort by nearest first if location is set
                    if ($sortBy && $sortBy == 'geodist') {
                        $data['query_sorter']['item']['geodist'] = array('sort_ord' => 'asc', 'field_ord' => 1);
                    }
                }
            }

            // Remove affiliate ads from similar ads.
            $data['query_filters']['ad']['is_affiliate_ad'] = 0;

            // initialize solr search manager service and fetch data based of above prepared search options
            $container->get('fa.solrsearch.manager')->init('ad', $keywords, $data, $page, $rows, $staticOffset);

            if (count($geoDistParams)) {
                $container->get('fa.solrsearch.manager')->setGeoDistQuery($geoDistParams);
            }

            $solrResponse = $container->get('fa.solrsearch.manager')->getSolrResponse();
            $result       = $container->get('fa.solrsearch.manager')->getSolrResponseDocs($solrResponse);
            $resultCount  = $container->get('fa.solrsearch.manager')->getSolrResponseDocsCount($solrResponse);

            $response['ads']      = $result;
            $response['totalAds'] = $resultCount;
        }

        return $response;
    }

    /**
     * Get price suggestion from similar adverts.
     *
     * @param object  $container    Container object.
     * @param integer $categoryId   Category id.
     * @param string  $title        Ad title.
     * @param integer $page         Page no.
     * @param integer $rows         Limit of records.
     * @param integer $staticOffset Offset.
     *
     * @return array
     */
    public function getPriceSuggestion($container, $categoryId, $title = null, $page = 1, $rows = 1, $staticOffset = 0)
    {
        $response = $this->getPaaSimilarAdverts($container, $categoryId, $title, $page, $rows, $staticOffset, 'price');

        if (isset($response['ads'])
        && isset($response['ads'][0])
        && isset($response['ads'][0][AdSolrFieldMapping::PRICE])
        && $response['ads'][0][AdSolrFieldMapping::PRICE]) {
            return $response['ads'][0][AdSolrFieldMapping::PRICE];
        }

        return null;
    }

    /**
     * Get ad table name.
     */
    private function getAdTableName()
    {
        return $this->_em->getClassMetadata('FaAdBundle:Ad')->getTableName();
    }

    /**
     * Get ad detail fields array.
     *
     * @param integer $categoryId Category id.
     * @param object  $container  Container identifier.
     *
     * @return array
     */
    public function getAdDetailFields($categoryId, $container = null)
    {
        if ($container) {
            $culture     = CommonManager::getCurrentCulture($container);
            $tableName   = $this->getAdTableName();
            $cacheKey    = $tableName.'|'.__FUNCTION__.'|'.$categoryId.'_'.$culture;
            $cachedValue = CommonManager::getCacheVersion($container, $cacheKey);

            if ($cachedValue !== false) {
                return $cachedValue;
            }
        }
        //common fields.
        $adDetailFields['category_id|FaEntityBundle:Category'] = 'Category';
        $adDetailFields['type_id|FaEntityBundle:Entity']       = 'Ad type';
        $adDetailFields['is_new']                              = 'Item';
        $adDetailFields['qty']                                 = 'Quantity';

        //get category wise sorting parameters.
        $paaFields = $this->_em->getRepository('FaAdBundle:PaaField')->getDimensionPaaFieldsWithLabel($categoryId, $container);

        //add auto suggest fields.
        $autoSuggestFields = $this->getAutoSuggestFields();
        foreach ($autoSuggestFields as $autoSuggestFieldName => $autoSuggestFieldIdName) {
            $autoSuggestFieldIdName = strtolower($autoSuggestFieldIdName);
            $autoSuggestFieldName   = strtolower($autoSuggestFieldName);
            if (isset($paaFields[$autoSuggestFieldIdName])) {
                $paaFields[$autoSuggestFieldName] = $paaFields[$autoSuggestFieldIdName];
            }
        }

        foreach ($paaFields as $field => $label) {
            if (strrpos($field, "_id") !== false) {
                $adDetailFields[$field.'|FaEntityBundle:Entity'] = $label;
            } else {
                $adDetailFields[$field] = $label;
            }
        }

        if ($container) {
            CommonManager::setCacheVersion($container, $cacheKey, $adDetailFields);
        }

        return $adDetailFields;
    }

    /**
     * Get ad detail and dimension array.
     *
     * @param integer $categoryId     Category id.
     * @param object  $adSolrObj      Solr object.
     * @param object  $container      Container identifier.
     * @param boolean $seoFlag        Seo flag.
     * @param array   $adDetailFields Ad detail fields array.
     * @param boolean $anchorTagFlag  Show anchor tag on defined fields flag.
     *
     * @return array
     */
    public function getAdDetailAndDimensionFields($categoryId, $adSolrObj, $container = null, $seoFlag = false, $adDetailFields = array(), $anchorTagFlag = false)
    {
        $parentCategories      = $this->_em->getRepository('FaEntityBundle:Category')->getCategoryPathArrayById($categoryId, false, $container);
        $parentCategoryIds     = array_keys($parentCategories);
        $rootCategoryId        = (isset($parentCategoryIds[0]) ? $parentCategoryIds[0] : null);
        $secondLevelCategoryId = (isset($parentCategoryIds[1]) ? $parentCategoryIds[1] : null);
        $solrMapping           = 'Fa\Bundle\AdBundle\Solr\AdSolrFieldMapping::';
        $indexableFields       = array();
        $unitForFields         = array();
        $adDetailTabFields     = array();
        $unwantedFields        = array();

        if (!count($adDetailFields)) {
            $adDetailFields = $this->getAdDetailFields($categoryId, $container);
        }

        //get dimension fields categorywise.
        if ($rootCategoryId) {
            $className   = CommonManager::getCategoryClassNameById($rootCategoryId, true);
            $solrMapping = 'Fa\Bundle\AdBundle\Solr\Ad'.$className.'SolrFieldMapping::';
            $repository  = $this->_em->getRepository('FaAdBundle:Ad'.$className);

            // get tabs field array.
            if (method_exists($repository, 'getAdDetailTabFields')) {
                $adDetailTabFields = $repository->getAdDetailTabFields();
            }
            // remove unwanted fields.
            if (!$seoFlag) {
                $unwantedFields = $this->getAdDetailUnwantedFields($parentCategories);
            }
            // remove unwanted fields.
            if (count($unwantedFields)) {
                foreach ($unwantedFields as $unwantedField) {
                    if (isset($adDetailFields[$unwantedField])) {
                        unset($adDetailFields[$unwantedField]);
                    }
                }
            }

            // ger unit array by fields.
            if (method_exists($repository, 'getUnitFieldArray')) {
                $unitForFields = $repository->getUnitFieldArray();
                $unitForFields = array_change_key_case($unitForFields, CASE_UPPER);
            }

            $indexableFields   = $repository->getIndexedFields();
            $indexableFields[] = 'category_id';
            $indexableFields[] = 'type_id';
            $indexableFields[] = 'is_new';
            $indexableFields[] = 'qty';

            if ($anchorTagFlag && $rootCategoryId == CategoryRepository::FOR_SALE_ID && isset($parentCategoryIds[2]) && count($parentCategoryIds) > 2) {
                $adDetailFields = CommonManager::insertBeforeArray($adDetailFields, 'type_id|FaEntityBundle:Entity', array('parent_category_lvl_4_id|FaEntityBundle:Category' => 'Sub category'));
                $indexableFields[] = 'parent_category_lvl_4_id';
            } elseif ($anchorTagFlag && $rootCategoryId == CategoryRepository::JOBS_ID) {
                $adDetailFields = CommonManager::insertBeforeArray($adDetailFields, 'type_id|FaEntityBundle:Entity', array('parent_category_lvl_2_id|FaEntityBundle:Category' => 'Sub category'));
                $indexableFields[] = 'parent_category_lvl_2_id';
            }

            $indexableFields   = array_map('strtoupper', $indexableFields);
        }
        //get metadata array from solr.
        $metaDataValues = array();
        if (defined($solrMapping.'META_DATA') && isset($adSolrObj[constant($solrMapping.'META_DATA')])) {
            $metaDataValues = unserialize($adSolrObj[constant($solrMapping.'META_DATA')]);
            if (is_array($metaDataValues) && count($metaDataValues)) {
                $metaDataValues = array_change_key_case($metaDataValues, CASE_UPPER);
            } else {
                $metaDataValues = array();
            }
        }

        $adDetailAndDimensionFields = $this->getSolrFieldValues($parentCategories, $adSolrObj, $adDetailFields, $indexableFields, $metaDataValues, $adDetailTabFields, $unitForFields, $solrMapping, $seoFlag, $container, $anchorTagFlag);

        return $adDetailAndDimensionFields;
    }

    /**
     * Get ad detail unwanted fields.
     *
     * @param array $parentCategories Array of parent categories.
     *
     * @return array
     */
    private function getAdDetailUnwantedFields($parentCategories)
    {
        $unwantedFields        = array();
        $parentCategoryIds     = array_keys($parentCategories);
        $rootCategoryId        = (isset($parentCategoryIds[0]) ? $parentCategoryIds[0] : null);
        $secondLevelCategoryId = (isset($parentCategoryIds[1]) ? $parentCategoryIds[1] : null);

        if (in_array($secondLevelCategoryId, array(CategoryRepository::CARS_ID, CategoryRepository::COMMERCIALVEHICLES_ID, CategoryRepository::MOTORBIKES_ID))) {
            $unwantedFields = array('has_reg_no', 'reg_no', 'colour_id|FaEntityBundle:Entity', 'reg_year', 'engine_size', 'mileage', 'fuel_type_id|FaEntityBundle:Entity');
        } elseif ($rootCategoryId == CategoryRepository::MOTORS_ID) {
            $unwantedFields = array('has_reg_no', 'reg_no', 'reg_year', 'engine_size', 'mileage', 'fuel_type_id|FaEntityBundle:Entity');
        } elseif ($rootCategoryId == CategoryRepository::COMMUNITY_ID) {
            $unwantedFields = array('include_end_time', 'event_start_time', 'event_end_time');
        } elseif ($rootCategoryId == CategoryRepository::PROPERTY_ID) {
            $unwantedFields = array('date_available', 'type_id|FaEntityBundle:Entity', 'number_of_bedrooms_id|FaEntityBundle:Entity', 'number_of_bathrooms_id|FaEntityBundle:Entity', 'bills_included_in_rent_id|FaEntityBundle:Entity', 'amenities_id|FaEntityBundle:Entity', 'rent_per_id|FaEntityBundle:Entity');
        } elseif ($rootCategoryId == CategoryRepository::JOBS_ID) {
            $unwantedFields = array('additional_job_requirements_id|FaEntityBundle:Entity', 'additional_benefits_id|FaEntityBundle:Entity', 'salary_type_id|FaEntityBundle:Entity');
        } elseif (in_array($rootCategoryId, array(CategoryRepository::SERVICES_ID, CategoryRepository::ADULT_ID))) {
            $unwantedFields = array('website_link', 'company_name', 'company_welcome_message', 'company_address', 'telephone_1', 'telephone_2', 'services_offered_id|FaEntityBundle:Entity');
            if ($rootCategoryId == CategoryRepository::ADULT_ID) {
                $unwantedFields[] = 'services_id|FaEntityBundle:Entity';
            }
        }

        return $unwantedFields;
    }

    /**
     * Get solr field value.
     *
     * @param array   $parentCategories  Parent category array.
     * @param object  $adSolrObj         Solr object.
     * @param array   $adDetailFields    Ad detail fields.
     * @param array   $indexableFields   Indexable fields.
     * @param array   $metaDataValues    Meta data fields.
     * @param array   $adDetailTabFields Ad detail tab fields.
     * @param array   $unitForFields     Unit for fields array.
     * @param string  $solrMapping       Solr mapping.
     * @param boolean $seoFlag           Seo flag.
     * @param object  $container         Container identifier.
     * @param boolean $anchorTagFlag     Show anchor tag on defined fields flag.
     *
     * @return array
     */
    private function getSolrFieldValues($parentCategories, $adSolrObj, $adDetailFields, $indexableFields, $metaDataValues, $adDetailTabFields, $unitForFields, $solrMapping, $seoFlag, $container, $anchorTagFlag)
    {
        $parentCategoryIds          = array_keys($parentCategories);
        $parentCategoryNames        = array_values($parentCategories);
        $secondLevelCategoryId      = (isset($parentCategoryIds[1]) ? $parentCategoryIds[1] : null);
        $entityCacheManager         = $container->get('fa.entity.cache.manager');
        $adDetailAndDimensionFields = array();
        // anchor tag fields
        $anchorTagFields = array(
            'CATEGORY_ID',
            'PARENT_CATEGORY_LVL_4_ID',
            'PARENT_CATEGORY_LVL_2_ID',
            'BRAND_ID',
            'BODY_TYPE_ID',
            'MAKE_ID',
            'MODEL_ID',
            'TRANSMISSION_ID',
            'FUEL_TYPE_ID',
            'ENGINE_SIZE_RANGE',
            'NUMBER_OF_BEDROOMS_ID',
            //'CONTRACT_TYPE_ID',
            'BREED_ID',
            'SPECIES_ID',
            'GENDER_ID',
            'TOWN_ID',
            'LOCALITY_ID',
            'MANUFACTURER_ID',
            'COLOUR_ID'
        );
        
        if ((isset($parentCategoryIds[0]) && (($parentCategoryIds[0] == CategoryRepository::ANIMALS_ID && isset($parentCategoryIds[2]) && $parentCategoryIds[2] != CategoryRepository::HORSES) || $parentCategoryIds[0] == CategoryRepository::ADULT_ID))) {
            $genderKey = array_search('GENDER_ID', $anchorTagFields);
            unset($anchorTagFields[$genderKey]);
        }

        //loop through all fields.
        foreach ($adDetailFields as $adDetailFieldKey => $adDetailFieldLabel) {
            $adDetailFieldKeyResult = explode('|', $adDetailFieldKey);
            $adDetailField          = strtoupper($adDetailFieldKeyResult[0]);
            $repositoryName         = isset($adDetailFieldKeyResult[1]) ? $adDetailFieldKeyResult[1] : '';
            $solrMappingField       = $solrMapping.$adDetailField;
            $unit                   = null;

            // get key for tabs.
            if (!$seoFlag) {
                $key        = 'detail';
                $adFieldKey = CommonManager::recursiveArraySearch($adDetailField, $adDetailTabFields);

                if ($adFieldKey !== false) {
                    $key = $adFieldKey;
                }
            }
            // check for unit.
            if (isset($unitForFields[$adDetailField])) {
                $unit = ' '.$unitForFields[$adDetailField];
            }
        
            //check if it is separate field else check in meta data fields.
            if (in_array($adDetailField, $indexableFields) && defined($solrMappingField) && isset($adSolrObj[constant($solrMappingField)])) {
                if ($repositoryName) {
                    if ($adDetailField == 'CATEGORY_ID' && in_array($secondLevelCategoryId, array(CategoryRepository::CARS_ID, CategoryRepository::COMMERCIALVEHICLES_ID))) {
                        if ($seoFlag) {
                            if (isset($parentCategoryNames[2])) {
                                $adDetailAndDimensionFields['MAKE_ID'] = $parentCategoryNames[2];
                            }
                            $adDetailAndDimensionFields['MODEL_ID'] = $entityCacheManager->getEntityNameById($repositoryName, $adSolrObj[constant($solrMappingField)]);
                        } else {
                            if (isset($parentCategoryNames[2])) {
                                $makeValue = null;
                                $modelValue = null;
                                if ($anchorTagFlag) {
                                    $makeValue = $this->getAdDetailLinks($adDetailField, $solrMapping, $solrMappingField, $repositoryName, $unit, $adSolrObj, $container, $entityCacheManager, $parentCategoryIds, 'Make');
                                } else {
                                    $makeValue = $parentCategoryNames[2];
                                }
                                $adDetailAndDimensionFields[$key]['Make'] = $makeValue;
                            }
                            if ($anchorTagFlag) {
                                $modelValue = $this->getAdDetailLinks($adDetailField, $solrMapping, $solrMappingField, $repositoryName, $unit, $adSolrObj, $container, $entityCacheManager, $parentCategoryIds, 'Model');
                            } else {
                                $modelValue = $entityCacheManager->getEntityNameById($repositoryName, $adSolrObj[constant($solrMappingField)]);
                            }
                            $adDetailAndDimensionFields[$key]['Model'] = $modelValue;
                        }
                    } else {
                        //check for single and multiple values.
                        if ($adSolrObj[constant($solrMappingField)] && !is_array($adSolrObj[constant($solrMappingField)])) {
                            if ($seoFlag) {
                                $adDetailAndDimensionFields[$adDetailField] = $entityCacheManager->getEntityNameById($repositoryName, $adSolrObj[constant($solrMappingField)]).$unit;
                            } elseif ($anchorTagFlag && in_array($adDetailField, $anchorTagFields)) {
                                $anchorTagValue = $this->getAdDetailLinks($adDetailField, $solrMapping, $solrMappingField, $repositoryName, $unit, $adSolrObj, $container, $entityCacheManager, $parentCategoryIds);

                                if ($anchorTagValue) {
                                    $adDetailAndDimensionFields[$key][$adDetailFieldLabel] = $anchorTagValue;
                                } else {
                                    $adDetailAndDimensionFields[$key][$adDetailFieldLabel] = $entityCacheManager->getEntityNameById($repositoryName, $adSolrObj[constant($solrMappingField)]).$unit;
                                }
                            } else {
                                $adDetailAndDimensionFields[$key][$adDetailFieldLabel] = $entityCacheManager->getEntityNameById($repositoryName, $adSolrObj[constant($solrMappingField)]).$unit;
                                if ($adDetailField == 'TRAVEL_ARRANGEMENTS_ID') {
                                    $adDetailAndDimensionFields[$key][$adDetailFieldLabel] = $this->_em->getRepository('FaEntityBundle:Entity')->customFormatOptions($adSolrObj[constant($solrMappingField)], null, $adDetailAndDimensionFields[$key][$adDetailFieldLabel]);
                                }
                            }
                        } elseif ($adSolrObj[constant($solrMappingField)] && is_array($adSolrObj[constant($solrMappingField)])) {
                            if ($anchorTagFlag && in_array($adDetailField, $anchorTagFields)) {
                                $anchorTagValue = $this->getAdDetailLinks($adDetailField, $solrMapping, $solrMappingField, $repositoryName, $unit, $adSolrObj, $container, $entityCacheManager, $parentCategoryIds);

                                if ($anchorTagValue) {
                                    $adDetailAndDimensionFields[$key][$adDetailFieldLabel] = $anchorTagValue;
                                } else {
                                    foreach ($adSolrObj[constant($solrMappingField)] as $solrFieldValue) {
                                        if ($seoFlag) {
                                            $adDetailAndDimensionFields[$adDetailField][$solrFieldValue] = $entityCacheManager->getEntityNameById($repositoryName, $solrFieldValue).$unit;
                                        } else {
                                            $adDetailAndDimensionFields[$key][$adDetailFieldLabel][$solrFieldValue] = $entityCacheManager->getEntityNameById($repositoryName, $solrFieldValue).$unit;
                                        }
                                    }
                                }
                            } else {
                                foreach ($adSolrObj[constant($solrMappingField)] as $solrFieldValue) {
                                    if ($seoFlag) {
                                        $adDetailAndDimensionFields[$adDetailField][$solrFieldValue] = $entityCacheManager->getEntityNameById($repositoryName, $solrFieldValue).$unit;
                                    } else {
                                        $adDetailAndDimensionFields[$key][$adDetailFieldLabel][$solrFieldValue] = $entityCacheManager->getEntityNameById($repositoryName, $solrFieldValue).$unit;
                                    }
                                }
                            }
                        }
                    }
                } else {
                    $fieldValue = null;
                    switch ($adDetailField) {
                        case 'IS_NEW':
                            $fieldValue = $this->_em->getRepository('FaEntityBundle:Entity')->getIsNewNameById($adSolrObj[constant($solrMappingField)], $container);
                            break;
                        case 'FEED_AD_SALARY':
                        case 'QTY':
                            $fieldValue = $adSolrObj[constant($solrMappingField)];
                            break;
                    }
                    if ($seoFlag) {
                        $adDetailAndDimensionFields[$adDetailField] = $fieldValue.$unit;
                    } else {
                        $adDetailAndDimensionFields[$key][$adDetailFieldLabel] = $fieldValue.$unit;
                    }
                }
            } elseif (array_key_exists($adDetailField, $metaDataValues) && $adDetailField != 'RATES_ID') {
                if ($repositoryName) {
                    $fieldValues = explode(',', $metaDataValues[$adDetailField]);
                    if (count($fieldValues) > 1) {
                        foreach ($fieldValues as $fieldVal) {
                            if ($seoFlag) {
                                $adDetailAndDimensionFields[$adDetailField][$fieldVal] = $entityCacheManager->getEntityNameById($repositoryName, $fieldVal).$unit;
                            } else {
                                $adDetailAndDimensionFields[$key][$adDetailFieldLabel][$fieldVal] = $entityCacheManager->getEntityNameById($repositoryName, $fieldVal).$unit;
                            }
                        }
                    } else {
                        if ($seoFlag) {
                            $adDetailAndDimensionFields[$adDetailField] = $entityCacheManager->getEntityNameById($repositoryName, $fieldValues[0]).$unit;
                        } else {
                            $adDetailAndDimensionFields[$key][$adDetailFieldLabel] = $entityCacheManager->getEntityNameById($repositoryName, $fieldValues[0]).$unit;
                        }
                    }
                } else {
                    if (strstr($adDetailField, 'DIMENSIONS')) {
                        $unit = ' '.$metaDataValues['DIMENSIONS_UNIT'];
                    }
                    $fieldValue = $metaDataValues[$adDetailField].$unit;
                    if ($adDetailField == 'SALARY' || $adDetailField == 'DEPOSIT') {
                        $fieldValue = CommonManager::formatCurrency($metaDataValues[$adDetailField], $container);
                        if ($adDetailField == 'SALARY' && isset($metaDataValues['SALARY_TYPE_ID'])) {
                            $fieldValue .= ' '.$entityCacheManager->getEntityNameById('FaEntityBundle:Entity', $metaDataValues['SALARY_TYPE_ID']);
                        }
                    } elseif ($adDetailField == 'MOT_EXPIRY_MONTH' || $adDetailField == 'ROAD_TAX_EXPIRY_MONTH') {
                        $fieldValue = CommonManager::getMonthName($metaDataValues[$adDetailField]);
                    } elseif (($adDetailField == 'EVENT_START' || $adDetailField == 'EVENT_END')) {
                        $fieldValue = CommonManager::getTimeStampFromStartDate($fieldValue);
                        $fieldValue = CommonManager::formatDate($fieldValue, $container, null, null, 'EEE dd MMM');
                        if (isset($metaDataValues[$adDetailField.'_TIME'])) {
                            $fieldValue .= ' at '.date("H:i", strtotime($metaDataValues[$adDetailField.'_TIME']));
                        }
                    } elseif ($adDetailField == 'RENTAL_LENGTH') {
                        $fieldValue = $fieldValue.' months';
                    } elseif ($adDetailField == 'ENGINE_SIZE' || $adDetailField == 'MILEAGE') {
                        $fieldValue = CommonManager::formatNumber($fieldValue, $container).$unit;
                    }

                    if (in_array($adDetailField, array('REG_YEAR', 'YEAR_BUILT', 'MOT_EXPIRY_YEAR', 'ROAD_TAX_EXPIRY_YEAR'))) {
                        $fieldValue = ucfirst(str_replace('-', ' ', $metaDataValues[$adDetailField]));
                    }
                    if ($seoFlag) {
                        $adDetailField = $this->getFieldNameForAutoSuggest($adDetailField);
                    }
                    if ($seoFlag) {
                        $adDetailAndDimensionFields[$adDetailField] = $fieldValue;
                    } else {
                        $adDetailAndDimensionFields[$key][$adDetailFieldLabel] = $fieldValue;
                    }
                }
            }
        }

        return $adDetailAndDimensionFields;
    }

    /**
     * Get ad detail links.
     *
     * @param string $adDetailField
     * @param string $solrMapping
     * @param string $solrMappingField
     * @param string $repositoryName
     * @param string $unit
     * @param object $adSolrObj
     * @param object $container
     * @param object $entityCacheManager
     * @param array  $parentCategoryIds
     * @param string $customField
     *
     * @return mixed
     */
    public function getAdDetailLinks($adDetailField, $solrMapping, $solrMappingField, $repositoryName, $unit, $adSolrObj, $container, $entityCacheManager, $parentCategoryIds, $customField = null)
    {
        $rootCategoryId = (isset($parentCategoryIds[0]) ? $parentCategoryIds[0] : null);
        $secondLevelCategoryId = (isset($parentCategoryIds[1]) ? $parentCategoryIds[1] : null);
        $adCategoryId = (isset($parentCategoryIds[count($parentCategoryIds) -1]) ? $parentCategoryIds[count($parentCategoryIds) -1] : null);
        $anchorTagValue = null;
        $location       = null;
        $categoryString = null;
        $pageString     = null;
        $queryString    = null;
        $linkTextArray  = array();
        $nofollowFlag   = false;
        $linkText       = null;
        if ((!in_array($rootCategoryId, array(CategoryRepository::FOR_SALE_ID, CategoryRepository::JOBS_ID)) && in_array($adDetailField, array('CATEGORY_ID', 'PARENT_CATEGORY_LVL_2_ID')))  || !in_array($adDetailField, array('LOCALITY_ID', 'TOWN_ID', 'GENDER_ID'))) {
            $linkText = $entityCacheManager->getEntityNameById($repositoryName, $adSolrObj[constant($solrMappingField)]);
        }

        if (in_array($rootCategoryId, array(CategoryRepository::FOR_SALE_ID)) && in_array($adDetailField, array('CATEGORY_ID', 'PARENT_CATEGORY_LVL_4_ID'))) {
            if ($adDetailField == 'CATEGORY_ID' && isset($parentCategoryIds[2]) && $parentCategoryIds[2]) {
                $linkText = $entityCacheManager->getEntityNameById($repositoryName, $parentCategoryIds[2]);
            } elseif ($adDetailField == 'PARENT_CATEGORY_LVL_4_ID' && isset($parentCategoryIds[count($parentCategoryIds)-1]) && $parentCategoryIds[count($parentCategoryIds)-1]) {
                $linkText = $entityCacheManager->getEntityNameById($repositoryName, $parentCategoryIds[count($parentCategoryIds)-1]);
            }
        }

        if (in_array($rootCategoryId, array(CategoryRepository::JOBS_ID)) && in_array($adDetailField, array('CATEGORY_ID', 'PARENT_CATEGORY_LVL_2_ID'))) {
            if ($adDetailField == 'CATEGORY_ID' && isset($parentCategoryIds[0]) && $parentCategoryIds[0]) {
                $linkText = $entityCacheManager->getEntityNameById($repositoryName, $parentCategoryIds[0]);
            } elseif ($adDetailField == 'PARENT_CATEGORY_LVL_2_ID' && isset($parentCategoryIds[count($parentCategoryIds)-1]) && $parentCategoryIds[count($parentCategoryIds)-1]) {
                $linkText = $entityCacheManager->getEntityNameById($repositoryName, $parentCategoryIds[count($parentCategoryIds)-1]);
            }
        }

        if ($adSolrObj[constant($solrMapping.'LOCALITY_ID')]) {
            $location = $entityCacheManager->getEntitySlugById('FaEntityBundle:Locality', $adSolrObj[constant($solrMapping.'LOCALITY_ID')][0]);
            if ($adDetailField == 'LOCALITY_ID') {
                $linkText = $entityCacheManager->getEntityNameById($repositoryName, $adSolrObj[constant($solrMappingField)][0]);
            }
        } elseif ($adSolrObj[constant($solrMapping.'TOWN_ID')]) {
            $location = $entityCacheManager->getEntitySlugById('FaEntityBundle:Location', $adSolrObj[constant($solrMapping.'TOWN_ID')][0]);
            if ($adDetailField == 'TOWN_ID') {
                $linkText = $entityCacheManager->getEntityNameById($repositoryName, $adSolrObj[constant($solrMappingField)][0]);
            }
        } elseif ($adSolrObj[constant($solrMapping.'DOMICILE_ID')]) {
            $location = $entityCacheManager->getEntitySlugById('FaEntityBundle:Location', $adSolrObj[constant($solrMapping.'DOMICILE_ID')][0]);
            if ($adDetailField == 'DOMICILE_ID') {
                $linkText = $entityCacheManager->getEntityNameById($repositoryName, $adSolrObj[constant($solrMappingField)][0]);
            }
        } else {
            $location = $entityCacheManager->getEntitySlugById('FaEntityBundle:Location', LocationRepository::COUNTY_ID);
            $linkText = $entityCacheManager->getEntityNameById($repositoryName, LocationRepository::COUNTY_ID);
        }

        if (
            ($rootCategoryId && !in_array($rootCategoryId, array(CategoryRepository::MOTORS_ID, CategoryRepository::PROPERTY_ID, CategoryRepository::JOBS_ID, CategoryRepository::SERVICES_ID, CategoryRepository::COMMUNITY_ID,CategoryRepository::ADULT_ID)) && $adDetailField == 'CATEGORY_ID') ||
            ($rootCategoryId && $rootCategoryId == CategoryRepository::FOR_SALE_ID && in_array($adDetailField, array('BRAND_ID', 'PARENT_CATEGORY_LVL_4_ID'))) ||
            ($rootCategoryId && $rootCategoryId == CategoryRepository::JOBS_ID && in_array($adDetailField, array('PARENT_CATEGORY_LVL_2_ID'))) ||
            ($rootCategoryId && $rootCategoryId == CategoryRepository::ADULT_ID &&  $secondLevelCategoryId== CategoryRepository::PHONE_AND_CAM_CHAT_ID) ||
            ($rootCategoryId && $rootCategoryId == CategoryRepository::MOTORS_ID && !in_array($secondLevelCategoryId, array(CategoryRepository::CARS_ID, CategoryRepository::MOTORBIKES_ID)) && !in_array($adDetailField, array('LOCALITY_ID', 'TOWN_ID', 'GENDER_ID'))) ||
            ($rootCategoryId && $rootCategoryId == CategoryRepository::ANIMALS_ID && in_array($adDetailField, array('BREED_ID', 'SPECIES_ID', 'GENDER_ID', 'COLOUR_ID')))
           ) {
            $location = $entityCacheManager->getEntitySlugById('FaEntityBundle:Location', LocationRepository::COUNTY_ID);
        }

        if ($adSolrObj[constant($solrMapping.'CATEGORY_ID')]) {
            if ($customField && in_array($secondLevelCategoryId, array(CategoryRepository::CARS_ID, CategoryRepository::COMMERCIALVEHICLES_ID))) {
                if ($customField == 'Make') {
                    $categoryString = $entityCacheManager->getEntitySlugById('FaEntityBundle:Category', $adSolrObj[constant($solrMapping.'PARENT_CATEGORY_LVL_3_ID')]);
                } elseif ($customField == 'Model') {
                    $categoryString = $entityCacheManager->getEntitySlugById('FaEntityBundle:Category', $adSolrObj[constant($solrMapping.'CATEGORY_ID')]);
                }
            } else {
                if (in_array($rootCategoryId, array(CategoryRepository::FOR_SALE_ID)) && in_array($adDetailField, array('CATEGORY_ID', 'PARENT_CATEGORY_LVL_4_ID'))) {
                    if ($adDetailField == 'CATEGORY_ID') {
                        $categoryString = $entityCacheManager->getEntitySlugById('FaEntityBundle:Category', ($adSolrObj[constant($solrMapping.'PARENT_CATEGORY_LVL_3_ID')] ? $adSolrObj[constant($solrMapping.'PARENT_CATEGORY_LVL_3_ID')] : $adSolrObj[constant($solrMapping.'CATEGORY_ID')]));
                    } elseif ($adDetailField == 'PARENT_CATEGORY_LVL_4_ID' && isset($parentCategoryIds[count($parentCategoryIds)-1]) && $parentCategoryIds[count($parentCategoryIds)-1]) {
                        $categoryString = $entityCacheManager->getEntitySlugById('FaEntityBundle:Category', $parentCategoryIds[count($parentCategoryIds)-1]);
                    }
                } elseif (in_array($rootCategoryId, array(CategoryRepository::JOBS_ID)) && in_array($adDetailField, array('CATEGORY_ID', 'PARENT_CATEGORY_LVL_2_ID'))) {
                    if ($adDetailField == 'CATEGORY_ID' && isset($parentCategoryIds[0]) && $parentCategoryIds[0]) {
                        $categoryString = $entityCacheManager->getEntitySlugById('FaEntityBundle:Category', $parentCategoryIds[0]);
                    } elseif ($adDetailField == 'PARENT_CATEGORY_LVL_2_ID' && isset($parentCategoryIds[count($parentCategoryIds)-1]) && $parentCategoryIds[count($parentCategoryIds)-1]) {
                        $categoryString = $entityCacheManager->getEntitySlugById('FaEntityBundle:Category', $parentCategoryIds[count($parentCategoryIds)-1]);
                    }
                } else {
                    $categoryString = $entityCacheManager->getEntitySlugById('FaEntityBundle:Category', $adSolrObj[constant($solrMapping.'CATEGORY_ID')]);
                }
            }
        }

        $adDetailLocationCategoryIds = array(
            CategoryRepository::MOTORS_ID,
            CategoryRepository::FOR_SALE_ID,
            CategoryRepository::JOBS_ID,
            CategoryRepository::SERVICES_ID,
            CategoryRepository::PROPERTY_ID,
            CategoryRepository::ANIMALS_ID,
            CategoryRepository::COMMUNITY_ID,
        );

        if ($adDetailField == 'CATEGORY_ID' || (in_array($rootCategoryId, $adDetailLocationCategoryIds) && in_array($adDetailField, array('LOCALITY_ID', 'TOWN_ID')))) {
            if (in_array($rootCategoryId, $adDetailLocationCategoryIds) && in_array($adDetailField, array('LOCALITY_ID', 'TOWN_ID'))) {
                switch ($rootCategoryId) {
                    case CategoryRepository::MOTORS_ID:
                    case CategoryRepository::SERVICES_ID:
                    case CategoryRepository::PROPERTY_ID:
                    case CategoryRepository::COMMUNITY_ID:
                        $categoryString = $entityCacheManager->getEntitySlugById('FaEntityBundle:Category', ($adSolrObj[constant($solrMapping.'PARENT_CATEGORY_LVL_2_ID')] ? $adSolrObj[constant($solrMapping.'PARENT_CATEGORY_LVL_2_ID')] : $adSolrObj[constant($solrMapping.'CATEGORY_ID')]));
                        break;
                    case CategoryRepository::FOR_SALE_ID:
                    case CategoryRepository::ANIMALS_ID:
                        $categoryString = $entityCacheManager->getEntitySlugById('FaEntityBundle:Category', ($adSolrObj[constant($solrMapping.'PARENT_CATEGORY_LVL_3_ID')] ? $adSolrObj[constant($solrMapping.'PARENT_CATEGORY_LVL_3_ID')] : $adSolrObj[constant($solrMapping.'CATEGORY_ID')]));
                        break;
                    case CategoryRepository::JOBS_ID:
                        $categoryString = $entityCacheManager->getEntitySlugById('FaEntityBundle:Category', $adSolrObj[constant($solrMapping.'ROOT_CATEGORY_ID')]);
                        break;
                }
            }
            $pageString = $categoryString;
        } elseif (($rootCategoryId == CategoryRepository::FOR_SALE_ID) || $rootCategoryId == CategoryRepository::PROPERTY_ID) {
            $pageString  = $categoryString;
            if ($adDetailField != 'PARENT_CATEGORY_LVL_4_ID') {
                $pageString .= '/'.$entityCacheManager->getEntitySlugById('FaEntityBundle:Entity', $adSolrObj[constant($solrMappingField)]);
            }
        } elseif ($rootCategoryId == CategoryRepository::MOTORS_ID) {
            $makeModelString = null;
            if (in_array($secondLevelCategoryId, array(CategoryRepository::CARS_ID, CategoryRepository::COMMERCIALVEHICLES_ID))) {
                $makeModelString = $entityCacheManager->getEntitySlugById('FaEntityBundle:Category', $adSolrObj[constant($solrMapping.'CATEGORY_ID')]);
            } else {
                $makeModelString = $entityCacheManager->getEntitySlugById('FaEntityBundle:Category', $adSolrObj[constant($solrMapping.'CATEGORY_ID')]);
                if (isset($adSolrObj[constant($solrMapping.'MAKE_ID')])) {
                    $makeModelString .= '/'.$entityCacheManager->getEntitySlugById('FaEntityBundle:Entity', $adSolrObj[constant($solrMapping.'MAKE_ID')]);
                }
                if (isset($adSolrObj[constant($solrMapping.'MODEL_ID')]) && $adDetailField != 'MAKE_ID') {
                    $makeModelString .= '/'.$entityCacheManager->getEntitySlugById('FaEntityBundle:Entity', $adSolrObj[constant($solrMapping.'MODEL_ID')]);
                }
            }
            $pageString .= '/'.$makeModelString;
            if ($adDetailField == 'TRANSMISSION_ID' && in_array($adSolrObj[constant($solrMappingField)], array(BaseEntityRepository::CAR_TRANSMISSION_MANUAL_ID, BaseEntityRepository::COMMERCIAL_VEHICLE_TRANSMISSION_MANUAL_ID, BaseEntityRepository::FARM_TRANSMISSION_MANUAL_ID))) {
                $queryString .= '?item_motors__transmission_id='.$adSolrObj[constant($solrMappingField)];
                $nofollowFlag = true;
            } elseif ($adDetailField == 'FUEL_TYPE_ID' && in_array($adSolrObj[constant($solrMappingField)], array(BaseEntityRepository::CAR_FUEL_TYPE_PETROL_ID, BaseEntityRepository::COMMERCIAL_VEHICLE_FUEL_TYPE_PETROL_ID, BaseEntityRepository::BOATS_FUEL_TYPE_PETROL_ID, BaseEntityRepository::FARM_FUEL_TYPE_PETROL_ID))) {
                $queryString .= '?item_motors__fuel_type_id='.$adSolrObj[constant($solrMappingField)];
                $nofollowFlag = true;
            } elseif ($adDetailField == 'ENGINE_SIZE') {
                $pageString .= '/'.$adSolrObj[constant($solrMapping.'ENGINE_SIZE_RANGE')];
                $linkText    = CommonManager::formatNumber($adSolrObj[constant($solrMapping.'ENGINE_SIZE')], $container).' '.$this->_em->getRepository('FaAdBundle:AdMotors')->getUnitByField('engine_size');
            } elseif ($adDetailField == 'MANUFACTURER_ID' && $adCategoryId == CategoryRepository::MOTORS_FARM_TRACTORS_ID) {
                $pageString .= '/'.$entityCacheManager->getEntitySlugById('FaEntityBundle:Entity', $adSolrObj[constant($solrMappingField)]);
            } elseif (!in_array($adDetailField, array('MAKE_ID', 'MODEL_ID', 'MANUFACTURER_ID'))) {
                $pageString .= '/'.$entityCacheManager->getEntitySlugById('FaEntityBundle:Entity', $adSolrObj[constant($solrMappingField)]);
            }
        } elseif ($rootCategoryId == CategoryRepository::ANIMALS_ID) {
            if (isset($parentCategoryIds[2]) && $parentCategoryIds[2] == CategoryRepository::HORSES && $adDetailField == 'GENDER_ID') {
                foreach ($adSolrObj[constant($solrMappingField)] as $solrFieldValue) {
                    $pageString = $categoryString;

                    if (isset($adSolrObj[constant($solrMapping.'BREED_ID')]) && $adSolrObj[constant($solrMapping.'BREED_ID')]) {
                        $pageString .= '/'.$entityCacheManager->getEntitySlugById('FaEntityBundle:Entity', $adSolrObj[constant($solrMapping.'BREED_ID')]);
                    }

                    if (isset($adSolrObj[constant($solrMapping.'SPECIES_ID')]) && $adSolrObj[constant($solrMapping.'SPECIES_ID')]) {
                        $pageString .= '/'.$entityCacheManager->getEntitySlugById('FaEntityBundle:Entity', $adSolrObj[constant($solrMapping.'SPECIES_ID')]);
                    }

                    $pageString .= '/'.$entityCacheManager->getEntitySlugById('FaEntityBundle:Entity', $solrFieldValue);
                    $url = $container->get('router')->generate('listing_page', array(
                        'location' => $location,
                        'page_string' => $pageString,
                    ), true).$queryString;
                    $linkTextArray[] = '<a href="'.$url.'">'.$entityCacheManager->getEntityNameById($repositoryName, $solrFieldValue).'</a>';
                }

                return implode(', ', $linkTextArray);
            } elseif ($adDetailField == 'COLOUR_ID') {
                $pageString = $categoryString;

                if (isset($adSolrObj[constant($solrMapping.'BREED_ID')]) && $adSolrObj[constant($solrMapping.'BREED_ID')]) {
                    $pageString .= '/'.$entityCacheManager->getEntitySlugById('FaEntityBundle:Entity', $adSolrObj[constant($solrMapping.'BREED_ID')]);
                }

                if (isset($adSolrObj[constant($solrMapping.'SPECIES_ID')]) && $adSolrObj[constant($solrMapping.'SPECIES_ID')]) {
                    $pageString .= '/'.$entityCacheManager->getEntitySlugById('FaEntityBundle:Entity', $adSolrObj[constant($solrMapping.'SPECIES_ID')]);
                }

                $pageString .= '/'.$entityCacheManager->getEntitySlugById('FaEntityBundle:Entity', $adSolrObj[constant($solrMappingField)]);
                $url = $container->get('router')->generate('listing_page', array(
                    'location' => $location,
                    'page_string' => $pageString,
                ), true).$queryString;

                return '<a href="'.$url.'">'.$entityCacheManager->getEntityNameById($repositoryName, $adSolrObj[constant($solrMappingField)]).'</a>';
            } else {
                $pageString  = $categoryString;
                $pageString .= '/'.$entityCacheManager->getEntitySlugById('FaEntityBundle:Entity', $adSolrObj[constant($solrMappingField)]);
            }
        } elseif ($rootCategoryId == CategoryRepository::JOBS_ID) {
            if ($adDetailField == 'CONTRACT_TYPE_ID') {
                foreach ($adSolrObj[constant($solrMappingField)] as $solrFieldValue) {
                    $pageString = $categoryString;
                    $pageString .= '/'.$entityCacheManager->getEntitySlugById('FaEntityBundle:Entity', $solrFieldValue);
                    $url = $container->get('router')->generate('listing_page', array(
                        'location' => $location,
                        'page_string' => $pageString,
                    ), true).$queryString;
                    $linkTextArray[] = '<a href="'.$url.'">'.$entityCacheManager->getEntityNameById($repositoryName, $solrFieldValue).'</a>';
                }

                return implode(', ', $linkTextArray);
            } else {
                $pageString  = $categoryString;
                if ($adDetailField != 'PARENT_CATEGORY_LVL_2_ID') {
                    $pageString .= '/'.$entityCacheManager->getEntitySlugById('FaEntityBundle:Entity', $adSolrObj[constant($solrMappingField)]);
                }
            }
        }

        $pageString = preg_replace('~^/+|/+$|/(?=/)~', '', $pageString);
        $url = $container->get('router')->generate('listing_page', array(
            'location' => $location,
            'page_string' => $pageString,
        ), true).$queryString;

        if ($customField && in_array($secondLevelCategoryId, array(CategoryRepository::CARS_ID, CategoryRepository::COMMERCIALVEHICLES_ID))) {
            if ($customField == 'Make') {
                $anchorTagValue = '<a href="'.$url.'">'.$entityCacheManager->getEntityNameById($repositoryName, $adSolrObj[constant($solrMapping.'PARENT_CATEGORY_LVL_3_ID')]).$unit.'</a>';
            } elseif ($customField == 'Model') {
                $anchorTagValue = '<a href="'.$url.'">'.$entityCacheManager->getEntityNameById($repositoryName, $adSolrObj[constant($solrMapping.'CATEGORY_ID')]).$unit.'</a>';
            }
        } else {
            $anchorTagValue = '<a href="'.$url.'" '.($nofollowFlag ? 'rel="nofollow"' : null).'>'.$linkText.$unit.'</a>';
        }

        return $anchorTagValue;
    }

    /**
     * Get field name for autosuggest.
     *
     * @param string $adDetailField Field name.
     *
     * return string
     */
    private function getFieldNameForAutoSuggest($adDetailField)
    {
        $autoSuggestFields = $this->getAutoSuggestFields();

        foreach ($autoSuggestFields as $metaDataName => $adDetailFieldName) {
            if ($adDetailField == $metaDataName) {
                $adDetailField = $adDetailFieldName;
                break;
            }
        }

        return $adDetailField;
    }

    /**
     * Get auto suggest fields.
     *
     * @return array
     */
    public function getAutoSuggestFields()
    {
        return array(
            'MAKE' => 'MAKE_ID',
            'MODEL' => 'MODEL_ID',
            'MANUFACTURER' => 'MANUFACTURER_ID',
            'PART_MANUFACTURER' => 'PART_MANUFACTURER_ID',
            'PART_OF_VEHICLE' => 'PART_OF_VEHICLE_ID',
            'BRAND' => 'BRAND_ID',
            'BREED' => 'BREED_ID',
            'SPECIES' => 'SPECIES_ID',
            'COLOUR' => 'COLOUR_ID',
        );
    }

    /**
     * Get ad list fields.
     *
     * @param integer $categoryId Category id.
     * @param object  $adSolrObj  Solr object.
     * @param object  $container  Container identifier.
     *
     * @return array
     */
    public function getAdListingFields($categoryId, $adSolrObj, $container = null)
    {
        $adListingFields          = array();
        $adListingFieldValueArray = array();
        $parentCategories         = $this->_em->getRepository('FaEntityBundle:Category')->getCategoryPathArrayById($categoryId, false, $container);
        $parentCategoryIds        = array_keys($parentCategories);
        $rootCategoryId           = (isset($parentCategoryIds[0]) ? $parentCategoryIds[0] : null);
        $solrMapping              = 'Fa\Bundle\AdBundle\Solr\AdSolrFieldMapping::';
        $entityCacheManager       = $container->get('fa.entity.cache.manager');

        //get dimension fields categorywise.
        if ($rootCategoryId) {
            $className   = CommonManager::getCategoryClassNameById($rootCategoryId, true);
            $solrMapping = 'Fa\Bundle\AdBundle\Solr\Ad'.$className.'SolrFieldMapping::';
            $repository  = $this->_em->getRepository('FaAdBundle:Ad'.$className);
            if (method_exists($repository, 'getAdListingFields')) {
                $adListingFields = $repository->getAdListingFields();
            }
        }

        $adDetailArray = $this->getAdDetailAndDimensionFields($categoryId, $adSolrObj, $container, true, $adListingFields);

        //loop through all fields.
        foreach ($adListingFields as $adListingField) {
            $fieldValue = null;
            //check if it is separate field else check in meta data fields.
            if (isset($adDetailArray[$adListingField]) && $adDetailArray[$adListingField]) {
                $fieldValue = $adDetailArray[$adListingField];
                if ($adListingField == 'CONDITION_ID') {
                    $fieldValue .= ' condition';
                } elseif ($adListingField == 'NUMBER_OF_BEDROOMS_ID') {
                    $fieldValue .= ' bedroom(s)';
                } elseif ($adListingField == 'NUMBER_OF_BATHROOMS_ID') {
                    $fieldValue .= ' bathroom(s)';
                }
            } elseif ($adListingField == 'DELIVERY_METHOD_OPTION_ID' && defined($solrMapping.$adListingField) && isset($adSolrObj[constant($solrMapping.$adListingField)])) {
                $fieldValue = $entityCacheManager->getEntityNameById('FaPaymentBundle:DeliveryMethodOption', $adSolrObj[constant($solrMapping.$adListingField)]);
            } elseif ($adListingField == 'BUSINESS_NAME' && defined($solrMapping.$adListingField) && isset($adSolrObj[constant($solrMapping.$adListingField)])) {
                $fieldValue = $adSolrObj[constant($solrMapping.$adListingField)];
            }

            if ($fieldValue) {
                $adListingFieldValueArray[$adListingField] = $fieldValue;
            }
        }

        return $adListingFieldValueArray;
    }

    /**
     * Get listing field class name.
     *
     * @param string $adListFieldName List field name.
     *
     * @return mixed.
     */
    public function getListingClass($adListFieldName)
    {
        $adListingFieldClass['REG_YEAR'] = 'reg-year';
        $adListingFieldClass['MILEAGE'] = 'mileage';
        $adListingFieldClass['ENGINE_SIZE'] = 'engine';
        $adListingFieldClass['FUEL_TYPE_ID'] = 'fuel-type';

        return (isset($adListingFieldClass[$adListFieldName]) ? $adListingFieldClass[$adListFieldName] : null);
    }

    /**
     * This method is used to activate the ads.
     *
     * @param integer $paymentId Payment id.
     * @param object  $container Container object.
     */
    public function activateAdsByPaymentId($paymentId, $container)
    {
        try {
            $paymentDetails = $this->_em->getRepository('FaPaymentBundle:PaymentTransactionDetail')->getPaymentTransactionDetailByPaymentFor($paymentId, TransactionDetailRepository::PAYMENT_FOR_PACKAGE);

            foreach ($paymentDetails as $paymentDetail) {
                $paymentDetailValue = unserialize($paymentDetail->getValue());
                $adObj              = $paymentDetail->getPaymentTransaction()->getAd();
                if ($adObj && !$adObj->getFuturePublishAt()) {
                    $this->activateAd($adObj->getId(), true, true, true, false, 0, $container);
                } elseif ($adObj && $adObj->getFuturePublishAt()) {
                    //update created at for payment report
                    $adObj->setCreatedAt(time());
                    $this->_em->persist($adObj);
                    $this->_em->flush($adObj);
                }
            }
        } catch (\Exception $e) {
            CommonManager::sendErrorMail($container, 'Error: Problem in activating ads', $e->getMessage(), $e->getTraceAsString());
        }
    }

    /**
     * This method will active the ad and also active related data
     * like upsells, packages, print ad, yac number and ad statistics.
     *
     * @param integer $adId                       Ad id.
     * @param boolean $changePublishedAtFlag      Change published at flag.
     * @param boolean $changeCreatedAtFlag        Change created at flag.
     * @param boolean $changeExpiresAtFlag        Change expires at flag.
     * @param boolean $changeRenewedAtFlag        Change renewed at flag.
     * @param integer $adExpiryDays               Ad Expiry days.
     * @param object  $container                  Container object.
     * @param boolean $cahngeAdPrintCreatedAtFlag Change ad print created at flag.
     */
    public function activateAd($adId, $changePublishedAtFlag = false, $changeCreatedAtFlag = false, $changeExpiresAtFlag = false, $changeRenewedAtFlag = false, $adExpiryDays = 0, $container = null, $cahngeAdPrintCreatedAtFlag = false)
    {
        $currentTime = time();

        // activate package & upsell
        $adUserPackageId = $this->_em->getRepository('FaAdBundle:AdUserPackage')->enableAdUserPackage($adId);
        if ($adUserPackageId) {
            $this->_em->getRepository('FaAdBundle:AdUserPackageUpsell')->enableAdUserPackageUpsell($adUserPackageId);
        }

        // activate print ad
        $this->_em->getRepository('FaAdBundle:AdPrint')->enablePrintAd($adId, $cahngeAdPrintCreatedAtFlag);

        // activate ad statistics

        // make the status active
        $object = $this->_em->getRepository('FaAdBundle:Ad')->findOneBy(array('id' => $adId));

        if (!$changeRenewedAtFlag && $object->getStatus() && in_array($object->getStatus()->getId(), array(BaseEntityRepository::AD_STATUS_EXPIRED_ID, BaseEntityRepository::AD_STATUS_SOLD_ID))) {
            $changeRenewedAtFlag = true;
        }
        $status = $this->_em->getRepository('FaEntityBundle:Entity')->findOneBy(array('id' => BaseEntityRepository::AD_STATUS_LIVE_ID));
        $object->setStatus($status);

        //if (!$object->getPublishedAt() || ($changePublishedAtFlag && (($currentTime - $object->getPublishedAt()) / (3600*24*1)) >= 7) ) { //for FFR-1675
        if (!$object->getPublishedAt() || $changePublishedAtFlag) {
            $object->setPublishedAt($currentTime);
            if (!$object->getOriginalPublishedAt()) {
                $object->setOriginalPublishedAt($currentTime);
            }
        }

        if ($changeCreatedAtFlag) {
            $object->setCreatedAt($currentTime);
        }

        if ($changeExpiresAtFlag) {
            if ($adExpiryDays) {
                $expirationDays = $adExpiryDays;
            } else {
                $expirationDays = $this->_em->getRepository('FaCoreBundle:ConfigRule')->getExpirationDays($object->getCategory()->getId());
            }

            $object->setExpiresAt($this->getAdPrintExpiry($adId, CommonManager::getTimeFromDuration($expirationDays.'d')));
        }

        if ($changeRenewedAtFlag) {
            $object->setRenewedAt($currentTime);
            if ($container && $container->get('request_stack')->getCurrentRequest()) {
                $this->_em->getRepository('FaAdBundle:AdIpAddress')->checkAndLogIpAddress($object, $container->get('request_stack')->getCurrentRequest()->getClientIp());
            }

            // Set renew mail sent flag to 0 for sending mail again before 4 days of expiry date.
            $object->setIsRenewalMailSent(0);

            if ($container && !$object->getFuturePublishAt()) {
                $sourceLatest = self::SOURCE_PAA;

                // update ad admin user and source for renew ad
                $adminUserObj = CommonManager::isAdminLoggedIn($container);
                if ($adminUserObj) {
                    $sourceLatest = self::SOURCE_ADMIN;
                    // update ad admin user for renew ad
                    $object->setAdminUserId($adminUserObj->getId());
                }
                $object->setSourceLatest($sourceLatest);
            }
            if ($object->getFuturePublishAt()) {
                $object->setSourceLatest(self::SOURCE_ADMIN);
            }
        }

        $isWeeklyRefresh = $this->checkIsWeeklyRefreshAd($object->getId());

        // Check weekly refresh upsell purchased then set weekly_refresh_at field
        if ($isWeeklyRefresh && !$object->getWeeklyRefreshAt()) {
            $object->setWeeklyRefreshAt($currentTime);
        } elseif ($isWeeklyRefresh && $object->getWeeklyRefreshAt() && $object->getPublishedAt() && $object->getWeeklyRefreshAt() < $object->getPublishedAt()) {
            $object->setWeeklyRefreshAt($object->getPublishedAt());
        } elseif ($isWeeklyRefresh === false) {
            $object->setWeeklyRefreshAt(null);
        }

        $this->_em->persist($object);
        $this->_em->flush($object);

        // activate yac number
        $this->handleAdPrivacyNumber($adId, $container);

        return array(
            'adUserPackageId' => $adUserPackageId,
        );
    }

    /**
     * Update ad privacy number.
     *
     * @param integer $adId      Ad id.
     * @param object  $container Container identifier.
     */
    public function handleAdPrivacyNumber($adId, $container)
    {
        try {
            $ad     = $this->findOneBy(array('id' => $adId));
            $adUser = $ad->getUser();

            // check user has use privacy phone number feature.
            if ($adUser && $adUser->getPhone() && $adUser->getIsPrivatePhoneNumber()) {
                $yacManager = $container->get('fa.yac.manager');
                $expiryDate = $ad->getExpiresAt();
                $expiryDate = $this->_em->getRepository('FaAdBundle:Ad')->getYacExpiry($ad->getId(), $expiryDate);
                $yacManager->init();
                // if no privacy number assigned then assigned new one else extend.
                if (!$ad->getPrivacyNumber()) {
                    $categoryNames = array_values($this->_em->getRepository('FaEntityBundle:Category')->getCategoryPathArrayById($ad->getCategory()->getId(), false, $container));
                    $yacResponse = $yacManager->allocateYacNumber($adId, $adUser->getPhone(), $expiryDate, $categoryNames[0]);
                    if (!$yacResponse['error'] && $yacResponse['YacNumber']) {
                        $ad->setPrivacyNumber($yacResponse['YacNumber']);
                    }
                } elseif ($ad->getPrivacyNumber()) {
                    $yacResponse = $yacManager->extendYacNumber($ad->getPrivacyNumber(), $expiryDate);
                    if ($yacResponse['errorCode'] && ($yacResponse['errorCode'] == '-117' || $yacResponse['errorCode'] == 'XML_ERROR')) {
                        $categoryNames = array_values($this->_em->getRepository('FaEntityBundle:Category')->getCategoryPathArrayById($ad->getCategory()->getId(), false, $container));
                        $yacResponse = $yacManager->allocateYacNumber($adId, $adUser->getPhone(), $expiryDate, $categoryNames[0]);
                        if (!$yacResponse['error'] && $yacResponse['YacNumber']) {
                            $ad->setPrivacyNumber($yacResponse['YacNumber']);
                        }
                    }
                }

                $this->_em->persist($ad);
                $this->_em->flush($ad);
            } elseif ($adUser && !$adUser->getIsPrivatePhoneNumber() && $ad->getPrivacyNumber()) {
                //remove yac number
                $ad->setPrivacyNumber(null);
                $ad->setUsePrivacyNumber(null);
                $this->_em->persist($ad);
                $this->_em->flush($ad);
            } else {
                // Detached ad
                if ($ad->getUsePrivacyNumber() && $ad->getPhone()) {
                    exec('nohup'.' '.$container->getParameter('fa.php.path').' '.$container->get('kernel')->getRootDir().'/console fa:update:ad-yac-number allocate --ad_id='.$ad->getId().' >/dev/null &');
                }
            }
        } catch (\Exception $e) {
            CommonManager::sendErrorMail($container, 'Error: Ad moderation handleAdPrivacyNumber.', $e->getMessage(), $e->getTraceAsString());
        }
    }

    /**
     * Checked whether ad has weekly refresh ad upsell or not.
     *
     * @param integer $adId
     *
     * @return boolean
     */
    public function checkIsWeeklyRefreshAd($adId)
    {
        if ($this->getEntityManager()->getRepository('FaAdBundle:AdUserPackageUpsell')->getAdPackageUpsellCountByIdAndType($adId, \Fa\Bundle\PromotionBundle\Repository\UpsellRepository::UPSELL_TYPE_AD_REFRESH_ID)) {
            return true;
        }

        return false;
    }

    /**
     * Set data on object from moderation.
     *
     * @param array $element Element from moderation.
     *
     * @return object
     */
    public function setObjectFromModerationData($element)
    {
        $object = $this->findOneBy(array('id' => $element['id']));
        foreach ($element as $field => $value) {
            $methodName = 'set'.str_replace(' ', '', ucwords(str_replace('_', ' ', $field)));
            if (method_exists($object, $methodName) === true) {
                $object->$methodName($value);
            } elseif ($object) {
                if ($field == 'type_id') {
                    if ($value) {
                        $adType = $this->_em->getRepository('FaEntityBundle:Entity')->findOneBy(array('id' => $value));
                        $object->setType($adType);
                    } else {
                        $object->setType(null);
                    }
                } elseif ($field == 'delivery_method_option_id') {
                    if ($value) {
                        $deliveryMethodOption = $this->_em->getRepository('FaPaymentBundle:DeliveryMethodOption')->findOneBy(array('id' => $value));
                        $object->setDeliveryMethodOption($deliveryMethodOption);
                    } else {
                        $object->setDeliveryMethodOption(null);
                    }
                }
            }
        }

        return $object;
    }

    /**
     * Get ad data array.
     *
     * @param object $ad Ad instance.
     *
     * @return array $adData
     */
    public function getAdDataArray($ad)
    {
        $adData = array();

        $adData['status_id'] = $ad->getStatus() ? $ad->getStatus()->getId() : null;
        $adData['type_id'] = $ad->getType() ? $ad->getType()->getId() : null;
        $adData['category_id'] = $ad->getCategory() ? $ad->getCategory()->getId() : null;
        $adData['delivery_method_option_id'] = $ad->getDeliveryMethodOption() ? $ad->getDeliveryMethodOption()->getId() : null;
        $adData['price'] = $ad->getPrice();
        $adData['price_text'] = $ad->getPriceText();
        $adData['is_new'] = $ad->getIsNew();
        $adData['use_privacy_number'] = $ad->getUsePrivacyNumber();
        $adData['privacy_number'] = $ad->getPrivacyNumber();
        $adData['use_email_response'] = $ad->getUseEmailResponse();
        $adData['use_map_link'] = $ad->getUseMapLink();
        $adData['trans_id'] = $ad->getTransId();
        $adData['ad_ref'] = $ad->getAdRef();
        $adData['old_status'] = $ad->getOldStatus();
        $adData['tamsin_ad_ref'] = $ad->getTamsinAdRef();
        $adData['title'] = $ad->getTitle();
        $adData['description'] = $ad->getDescription();
        $adData['creation_ip'] = $ad->getCreationIp();
        $adData['modify_ip'] = $ad->getModifyIp();
        $adData['has_video'] = $ad->getHasVideo();
        $adData['renewed_at'] = $ad->getRenewedAt();
        $adData['expires_at'] = $ad->getExpiresAt();
        $adData['is_renewal_mail_sent'] = $ad->getIsRenewalMailSent();
        $adData['is_feed_ad'] = $ad->getIsFeedAd();
        $adData['is_trade_ad'] = $ad->getIsTradeAd();
        $adData['renew_count'] = $ad->getRenewCount();
        $adData['sold_at'] = $ad->getSoldAt();
        $adData['sold_price'] = $ad->getSoldPrice();
        $adData['created_at'] = $ad->getCreatedAt();
        $adData['published_at'] = $ad->getPublishedAt();
        $adData['updated_at'] = $ad->getUpdatedAt();
        $adData['payment_method_id'] = $ad->getPaymentMethodId();
        $adData['personalized_title'] = $ad->getPersonalizedTitle();
        $adData['qty'] = $ad->getQty();
        $adData['qty_sold'] = $ad->getQtySold();
        $adData['old_cat_id'] = $ad->getOldCatId();
        $adData['old_class_id'] = $ad->getOldClassId();
        $adData['old_sub_class_id'] = $ad->getOldSubClassId();
        $adData['update_type'] = $ad->getUpdateType();
        $adData['old_meta_xml'] = $ad->getOldMetaXml();
        $adData['rejected_reason'] = $ad->getRejectedReason();
        $adData['weekly_refresh_at'] = $ad->getWeeklyRefreshAt();
        $adData['business_phone'] = $ad->getBusinessPhone();

        return array_filter($adData, 'strlen');
    }

    /**
     * Add weekly_refresh_at_from_to filter to existing query object
     *
     * @param string $fromTo from value | to value (pipe saperated)
     *
     * @return void
     */
    protected function addWeeklyRefreshAtFromToFilter($fromTo = null)
    {
        list($from, $to) = explode('|', $fromTo);

        if (!is_numeric($from)) {
            $from = CommonManager::getTimeStampFromStartDate($from);
        }

        if (!is_numeric($to)) {
            $to   = CommonManager::getTimeStampFromEndDate($to);
        }

        $this->addFromToFilter('weekly_refresh_at', $from, $to);
    }

    public function sendRenewalEmail($ad, $container)
    {
        $user        = $ad->getUser();
        $entityCache = $container->get('fa.entity.cache.manager');
        $editAdURL   = $container->get('router')->generate('fa_frontend_homepage', array(), true);

        $parameters = array(
                        'user_first_name' => $user->getFirstName(),
                        'user_last_name' => $user->getLastName(),
                        'user_email_address' => $user->getEmail(),
                        'text_ad_title' => $ad->getTitle(),
                        'text_ad_description' => $ad->getDescription(),
                        'text_ad_category' => $entityCache->getEntityNameById('FaEntityBundle:Category', $ad->getCategory()->getId()),
                        'url_ad_main_photo' => $this->getMainImageThumbUrlFromAd($ad, $container),
                        'url_ad_edit' => $container->get('router')->generate('ad_edit', array('id' => $ad->getId()), true),
                        'url_ad_mark_sold' => $container->get('router')->generate('manage_my_ads_mark_as_sold', array('adId' => $ad->getId()), true),
                        'url_ad_view' => $container->get('router')->generate('ad_detail_page_by_id', array('id' => $ad->getId()), true),
                        'url_account_dashboard' => '',
                        'url_ad_renew_early' => $container->get('router')->generate('ad_promote', array('type' => 'renew', 'adId' => $ad->getId()), true),
                       );

        $container->get('fa.mail.manager')->send($user->getEmail(), 'ad_needs_renewing_4_days_left', $parameters, CommonManager::getCurrentCulture($container));
    }

    public function sendRenewalEmailByUser($user, $container)
    {
        $entityCache = $container->get('fa.entity.cache.manager');

        $ads = array();
        $emailQueueIds = array();
        $emailQueues = $this->_em->getRepository('FaEmailBundle:EmailQueue')->findBy(array('user' => $user->getId(), 'identifier' => 'ad_needs_renewing_4_days_left', 'status' => 1));
        foreach ($emailQueues as $emailQueue) {
            $emailQueueIds[] = $emailQueue->getId();
            $ad = $emailQueue->getAd();
            $ads[] = array(
                'text_ad_title' => $ad->getTitle(),
                'text_ad_description' => $ad->getDescription(),
                'text_ad_category' => $entityCache->getEntityNameById('FaEntityBundle:Category', $ad->getCategory()->getId()),
                'url_ad_main_photo' => $this->getMainImageThumbUrlFromAd($ad, $container),
                'url_ad_edit' => $container->get('router')->generate('ad_edit', array('id' => $ad->getId()), true),
                'url_ad_mark_sold' => $container->get('router')->generate('manage_my_ads_mark_as_sold', array('adId' => $ad->getId()), true),
                'url_ad_view' => $container->get('router')->generate('ad_detail_page_by_id', array('id' => $ad->getId()), true),
                'url_ad_renew_early' => $container->get('router')->generate('ad_promote', array('type' => 'renew', 'adId' => $ad->getId()), true),
            );
        }

        if (count($ads)) {
            $parameters = array(
                'user_first_name' => $user->getFirstName(),
                'user_last_name' => $user->getLastName(),
                'user_email_address' => $user->getEmail(),
                'ads' => $ads,
                'total_ads' => (count($ads) - 1),
                'url_account_dashboard' => '',
            );

            $container->get('fa.mail.manager')->send($user->getEmail(), 'ad_needs_renewing_4_days_left', $parameters, CommonManager::getCurrentCulture($container));
            $this->_em->getRepository('FaEmailBundle:EmailQueue')->removeFromEmailQueue('ad_needs_renewing_4_days_left', $user, $emailQueueIds);
        }
    }

    public function sendExpirationEmail($ad, $container)
    {
        $user = $ad->getUser();
        $entityCache = $container->get('fa.entity.cache.manager');

        $viewCount  = $this->getEntityManager()->getRepository('FaAdBundle:AdViewCounter')->getAdViewCounterArrayByAdId(array($ad->getId()));
        $adEnquries = $this->getEntityManager()->getRepository('FaMessageBundle:Message')->getAdTotalMessageArrayByAdId($user->getId(), $ad->getId());

        $parameters = array(
                        'user_first_name' => $user->getFirstName(),
                        'user_last_name' => $user->getLastName(),
                        'user_email_address' => $user->getEmail(),
                        'text_ad_title' => $ad->getTitle(),
                        'text_ad_description' => $ad->getDescription(),
                        'text_ad_category' => $entityCache->getEntityNameById('FaEntityBundle:Category', $ad->getCategory()->getId()),
                        'url_ad_main_photo' => $this->getMainImageThumbUrlFromAd($ad, $container),
                        'text_ad_enquiries' => isset($adEnquries[0]) ? $adEnquries[0] : null,
                        'text_ad_views'     => isset($viewCount[$ad->getId()]) ? $viewCount[$ad->getId()] : null,
                        'url_ad_repost'  => $container->get('router')->generate('ad_promote', array('type' => 'repost', 'adId' => $ad->getId()), true),
                        'url_ad_edit' => $container->get('router')->generate('ad_edit', array('id' => $ad->getId()), true),
                        'url_ad_mark_sold' => $container->get('router')->generate('manage_my_ads_mark_as_sold', array('adId' => $ad->getId()), true),
                        'url_account_dashboard' => '',
                       );

        $container->get('fa.mail.manager')->send($user->getEmail(), 'ad_is_expired', $parameters, CommonManager::getCurrentCulture($container));
    }

    public function sendExpirationEmailByUser($user, $container)
    {
        $entityCache = $container->get('fa.entity.cache.manager');

        $emailQueueIds = array();
        $ads = array();
        $emailQueues = $this->_em->getRepository('FaEmailBundle:EmailQueue')->findBy(array('user' => $user->getId(), 'identifier' => 'ad_is_expired', 'status' => 1));
        foreach ($emailQueues as $emailQueue) {
            $emailQueueIds[] = $emailQueue->getId();
            $ad = $emailQueue->getAd();
            $viewCount  = $this->getEntityManager()->getRepository('FaAdBundle:AdViewCounter')->getAdViewCounterArrayByAdId(array($ad->getId()));
            $adEnquries = $this->getEntityManager()->getRepository('FaMessageBundle:Message')->getAdTotalMessageArrayByAdId($user->getId(), $ad->getId());
            $ads[] = array(
                'text_ad_title' => $ad->getTitle(),
                'text_ad_description' => $ad->getDescription(),
                'text_ad_category' => $entityCache->getEntityNameById('FaEntityBundle:Category', $ad->getCategory()->getId()),
                'url_ad_main_photo' => $this->getMainImageThumbUrlFromAd($ad, $container),
                'text_ad_enquiries' => isset($adEnquries[0]) ? $adEnquries[0] : null,
                'text_ad_views'     => isset($viewCount[$ad->getId()]) ? $viewCount[$ad->getId()] : null,
                'url_ad_repost'  => $container->get('router')->generate('ad_promote', array('type' => 'repost', 'adId' => $ad->getId()), true),
                'url_ad_upsell'  => $container->get('router')->generate('ad_promote', array('type' => 'repost', 'adId' => $ad->getId()), true),
                'url_ad_edit' => $container->get('router')->generate('ad_edit', array('id' => $ad->getId()), true),
                'url_ad_mark_sold' => $container->get('router')->generate('manage_my_ads_mark_as_sold', array('adId' => $ad->getId()), true),
            );

            //send push notifications
            CommonManager::sendPushNotificationMessage('Your ad has expired. Repost it today!', 'Expired', $container->get('router')->generate('ad_promote', array('type' => 'repost', 'adId' => $ad->getId()), true), $user, $container);
        }

        if (count($ads)) {
            $parameters = array(
                'user_first_name' => $user->getFirstName(),
                'user_last_name' => $user->getLastName(),
                'user_email_address' => $user->getEmail(),
                'ads' => $ads,
                'total_ads' => (count($ads) - 1),
                'url_account_dashboard' => '',
            );
            $container->get('fa.mail.manager')->send($user->getEmail(), 'ad_is_expired', $parameters, CommonManager::getCurrentCulture($container));
            $this->_em->getRepository('FaEmailBundle:EmailQueue')->removeFromEmailQueue('ad_is_expired', $user, $emailQueueIds);
        }
    }

    /**
     * Get left search label for user type.
     *
     * @param string  $rootCategoryId Root category id.
     * @param boolean $useIdAsKey     Use id as key.
     *
     * @return array
     */
    public function getLeftSearchLabelForUserType($rootCategoryId = null, $useIdAsKey = false)
    {
        $userTypes              = RoleRepository::getUserTypes();
        $label['header']        = 'Seller';
        $label[($useIdAsKey ? RoleRepository::ROLE_SELLER_ID : 'private_user')]           = $userTypes[RoleRepository::ROLE_SELLER_ID];
        $label[($useIdAsKey ? RoleRepository::ROLE_BUSINESS_SELLER_ID : 'business_user')] = $userTypes[RoleRepository::ROLE_BUSINESS_SELLER_ID];
        $label[($useIdAsKey ? RoleRepository::ROLE_NETSUITE_SUBSCRIPTION_ID : 'netsuite_user')] = $userTypes[RoleRepository::ROLE_NETSUITE_SUBSCRIPTION_ID];

        if ($rootCategoryId) {
            switch ($rootCategoryId) {
                case CategoryRepository::FOR_SALE_ID:
                    $label['header']        = 'Seller';
                    $label[($useIdAsKey ? RoleRepository::ROLE_SELLER_ID : 'private_user')]           = 'Private advertiser';
                    $label[($useIdAsKey ? RoleRepository::ROLE_BUSINESS_SELLER_ID : 'business_user')] = 'Shop';
                    break;
                case CategoryRepository::MOTORS_ID:
                    $label['header']        = 'Seller';
                    $label[($useIdAsKey ? RoleRepository::ROLE_SELLER_ID : 'private_user')]           = 'Private advertiser';
                    $label[($useIdAsKey ? RoleRepository::ROLE_BUSINESS_SELLER_ID : 'business_user')] = 'Dealer';
                    break;
                case CategoryRepository::PROPERTY_ID:
                    $label['header']        = 'Seller';
                    $label[($useIdAsKey ? RoleRepository::ROLE_SELLER_ID : 'private_user')]           = 'Private advertiser';
                    $label[($useIdAsKey ? RoleRepository::ROLE_BUSINESS_SELLER_ID : 'business_user')] = 'Agency';
                    break;
                case CategoryRepository::ANIMALS_ID:
                    $label['header']        = 'Seller';
                    $label[($useIdAsKey ? RoleRepository::ROLE_SELLER_ID : 'private_user')]           = 'Private advertiser';
                    $label[($useIdAsKey ? RoleRepository::ROLE_BUSINESS_SELLER_ID : 'business_user')] = 'Breeder';
                    break;
                case CategoryRepository::COMMUNITY_ID:
                    $label['header']        = 'Advertiser';
                    $label[($useIdAsKey ? RoleRepository::ROLE_SELLER_ID : 'private_user')]           = 'Private advertiser';
                    $label[($useIdAsKey ? RoleRepository::ROLE_BUSINESS_SELLER_ID : 'business_user')] = 'Business advertiser';
                    break;
                case CategoryRepository::JOBS_ID:
                    $label['header']        = 'Advertiser';
                    $label[($useIdAsKey ? RoleRepository::ROLE_SELLER_ID : 'private_user')]           = 'Private advertiser';
                    $label[($useIdAsKey ? RoleRepository::ROLE_BUSINESS_SELLER_ID : 'business_user')] = 'Recruiter';
                    break;
            }
        }

        return $label;
    }

    /**
     * Send live ad package email.
     *
     * @param string  $template  Template name.
     * @param integer $adId      Ad id.
     * @param integer $packageId Package id.
     * @param object  $container Container object.
     */
    public function sendLiveAdPackageEmail($template, $adId, $packageId, $container)
    {
        $adObj = $this->find($adId);
        if ($adObj) {
            $userObj = $adObj->getUser();
            if ($userObj) {
                //send adult extra email if user is private
                $userRole = $this->_em->getRepository('FaUserBundle:User')->getUserRole($userObj->getId(), $container);
                $adRootCategory = null;
                if ($adObj->getCategory()) {
                    $adRootCategory = $this->_em->getRepository('FaEntityBundle:Category')->getRootCategoryId($adObj->getCategory()->getId(), $container);
                }
                if ($adRootCategory && $adRootCategory == CategoryRepository::ADULT_ID && $userRole == RoleRepository::ROLE_SELLER) {
                    //$this->_em->getRepository('FaEmailBundle:EmailQueue')->addEmailToQueue($template.'_private_adult', $userObj, $adObj, $container, array('packageId' => $packageId));
                    $this->_em->getRepository('FaEmailBundle:EmailQueue')->addEmailToQueue('ad_is_received_live_adult_private', $userObj, $adObj, $container, array('packageId' => $packageId));
                } else {
                    $this->_em->getRepository('FaEmailBundle:EmailQueue')->addEmailToQueue($template, $userObj, $adObj, $container, array('packageId' => $packageId));
                }
            }
        }
    }

    /**
     * Send live ad package email.
     *
     * @param string  $template  Template name.
     * @param integer $adId      Ad id.
     * @param integer $packageId Package id.
     * @param object  $container Container object.
     */
    public function sendLiveAdPackageEmailForAd($template, $adId, $packageId, $container)
    {
        $adObj = $this->find($adId);
        if ($adObj) {
            $userObj = $adObj->getUser();
            if ($userObj) {
                $parameters = $this->generateAdPackageParameters($adObj, $userObj, $container);

                // generate other package specific parameters
                $packageObj = $this->_em->getRepository('FaPromotionBundle:Package')->find($packageId);
                if ($packageObj) {
                    $parameters['text_package_name'] = $packageObj->getTitle();

                    // text_lowest_category_package_price
                    if ($packageObj->getPrice() == 0) {
                        $isAdminPostedAd = false;
                        if ($adObj && $adObj->getSource() == self::SOURCE_ADMIN) {
                            $isAdminPostedAd = true;
                        }
                        $price = $this->_em->getRepository('FaPromotionBundle:Package')->findLowestCategoryPackagePrice($adId, $userObj->getId(), $adObj->getCategory()->getId(), $isAdminPostedAd, $container);
                        if ($price) {
                            $formattedPrice = CommonManager::formatCurrency($price, $container);
                            $parameters['text_lowest_category_package_price'] = $formattedPrice;
                        }

                        $parameters['url_ad_upsell'] = $container->get('router')->generate('ad_promote', array('adId' => $adId, 'type' => 'promote'), true);
                    }
                }

                $container->get('fa.mail.manager')->send($userObj->getEmail(), $template, $parameters, CommonManager::getCurrentCulture($container));
            }
        }
    }

    /**
     * Send live ad package email.
     *
     * @param object  $user      User object.
     * @param string  $template  Template name
     * @param object  $container Container object.
     */
    public function sendLiveAdPackageEmailByUser($user, $template, $container)
    {
        $entityCache = $container->get('fa.entity.cache.manager');
        $emailQueueIds = array();
        $ads = array();
        $emailQueues = $this->_em->getRepository('FaEmailBundle:EmailQueue')->findBy(array('user' => $user->getId(), 'identifier' => $template, 'status' => 1));
        foreach ($emailQueues as $emailQueue) {
            $emailQueueIds[] = $emailQueue->getId();
            $ad = $emailQueue->getAd();
            $text_package_name = '';
            $text_lowest_category_package_price = '';
            $url_ad_upsell = '';
            $emailQueueValue = unserialize($emailQueue->getValue());

            // generate other package specific parameters
            if (isset($emailQueueValue['packageId']) && $emailQueueValue['packageId']) {
                $packageObj = $this->_em->getRepository('FaPromotionBundle:Package')->find($emailQueueValue['packageId']);
                if ($packageObj) {
                    $text_package_name = $packageObj->getTitle();

                    // text_lowest_category_package_price
                    if ($packageObj->getPrice() == 0) {
                        $isAdminPostedAd = false;
                        if ($ad && $ad->getSource() == self::SOURCE_ADMIN) {
                            $isAdminPostedAd = true;
                        }
                        $price = $this->_em->getRepository('FaPromotionBundle:Package')->findLowestCategoryPackagePrice($ad->getId(), $user->getId(), $ad->getCategory()->getId(), $isAdminPostedAd, $container);
                        if ($price) {
                            $formattedPrice = CommonManager::formatCurrency($price, $container);
                            $text_lowest_category_package_price = $formattedPrice;
                        }

                        $url_ad_upsell = $container->get('router')->generate('ad_promote', array('adId' => $ad->getId(), 'type' => 'promote'), true);
                    }
                }
            }
            $ads[] = array(
                'text_ad_title' => $ad->getTitle(),
                'text_ad_description' => $ad->getDescription(),
                'text_ad_category' => $entityCache->getEntityNameById('FaEntityBundle:Category', $ad->getCategory()->getId()),
                'url_ad_preview' => $container->get('router')->generate('ad_detail_page_by_id', array('id' => $ad->getId()), true),
                'url_ad_view' => $container->get('router')->generate('ad_detail_page_by_id', array('id' => $ad->getId()), true),
                'text_adref' => $ad->getId(),
                'url_ad_main_photo' => $this->getMainImageThumbUrlFromAd($ad, $container),
                'url_ad_edit' => $container->get('router')->generate('ad_edit', array('id' => $ad->getId()), true),
                'text_package_name' => $text_package_name,
                'text_lowest_category_package_price' => $text_lowest_category_package_price,
                'url_ad_upsell' => $url_ad_upsell,
            );
        }

        if (count($ads)) {
            $parameters = array(
                'user_first_name' => $user->getFirstName(),
                'user_last_name' => $user->getLastName(),
                'ads' => $ads,
                'total_ads' => (count($ads) - 1),
                'url_account_dashboard' => $container->get('router')->generate('dashboard_home', array(), true),
            );

            $container->get('fa.mail.manager')->send($user->getEmail(), $template, $parameters, CommonManager::getCurrentCulture($container));
            $this->_em->getRepository('FaEmailBundle:EmailQueue')->removeFromEmailQueue($template, $user, $emailQueueIds);
        }
    }

    /**
     * Send reject ad email.
     *
     * @param integer $adId      Ad id.
     * @param object  $container Container object.
     * @param string  $reason    Reson for reject.
     */
    public function sendRejectAdEmail($adId, $container, $reason = null)
    {
        $adObj = $this->find($adId);
        if ($adObj) {
            $userObj = $adObj->getUser();
            $parameters = $this->generateAdPackageParameters($adObj, $userObj, $container);
            $parameters['text_rejection_message'] = $reason;

            $container->get('fa.mail.manager')->send($userObj->getEmail(), 'ad_is_rejected', $parameters, CommonManager::getCurrentCulture($container));
        }
    }

    /**
     * Generate email parameters.
     *
     * @param Ad      $adObj     Ad object.
     * @param User    $userObj   User object.
     * @param object  $container Container object.
     *
     * @return array
     */
    public function generateAdPackageParameters(Ad $adObj, User $userObj, $container)
    {
        // user information
        $parameters['user_first_name']       = $userObj->getFirstName();
        $parameters['user_last_name']        = $userObj->getLastName();
        $parameters['url_account_dashboard'] = $container->get('router')->generate('dashboard_home', array(), true);

        // ad information
        $parameters['text_ad_title']       = $adObj->getTitle();
        $parameters['text_ad_category']    = $adObj->getCategory()->getName();
        $parameters['text_ad_description'] = $adObj->getDescription();
        $parameters['text_adref']          = $adObj->getId();

        if ($url = $container->get('router')->generate('ad_detail_page_by_id', array('id' => $adObj->getId()), true)) {
            $parameters['url_ad_preview'] = $url;
            $parameters['url_ad_view']    = $url;
        }

        // TODO: {url_ad_edit}
        $parameters['url_ad_edit'] = $container->get('router')->generate('ad_edit', array('id' => $adObj->getId()), true);

        // TODO: {url_ad_upsell}

        //image url
        $parameters['url_ad_main_photo'] = $this->getMainImageThumbUrlFromAd($adObj, $container);

        return $parameters;
    }

    /**
     * Send ad package email.
     *
     * @param integer $paymentId Payment id.
     * @param object  $container Container object.
     */
    public function sendAdPackageEmailByPaymentId($paymentId, $container)
    {
        try {
            $paymentDetails = $this->_em->getRepository('FaPaymentBundle:PaymentTransactionDetail')->getPaymentTransactionDetailByPaymentFor($paymentId, TransactionDetailRepository::PAYMENT_FOR_PACKAGE);

            foreach ($paymentDetails as $paymentDetail) {
                $paymentDetailValue = unserialize($paymentDetail->getValue());
                $adObj = $paymentDetail->getPaymentTransaction()->getAd();
                if ($adObj && isset($paymentDetailValue['package']) && !$adObj->getFuturePublishAt()) {
                    foreach ($paymentDetailValue['package'] as $packageId => $packageValueArray) {
                        $packageObj = $this->_em->getRepository('FaPromotionBundle:Package')->find($packageId);
                        if ($packageObj && $packageObj->getEmailTemplate()) {
                            $this->sendLiveAdPackageEmail($packageObj->getEmailTemplate()->getIdentifier(), $adObj->getId(), $packageObj->getId(), $container);
                        }
                    }
                }
            }
        } catch (\Exception $e) {
            CommonManager::sendErrorMail($container, 'Error: Problem in ad package mail sending', $e->getMessage(), $e->getTraceAsString());
        }
    }

    /**
     * Update ad status by user id.
     *
     * @param integer $userId
     * @param integer $statusId
     *
     */
    public function updateAdStatusByUserId($userId, $statusId)
    {
        $updateQuery = $this->createQueryBuilder(self::ALIAS)
            ->update()
            ->set(self::ALIAS.'.status', $statusId)
            ->where(self::ALIAS.'.user = '.$userId);

        return $updateQuery->getQuery()->execute();
    }

    /**
     * Block ad by user id.
     *
     * @param integer $userId
     * @param integer $isBlockedAd
     */
    public function blockUnblockAdByUserId($userId, $isBlockedAd = 0)
    {
        $updateQuery = $this->createQueryBuilder(self::ALIAS)
        ->update()
        ->set(self::ALIAS.'.is_blocked_ad', $isBlockedAd)
        ->where(self::ALIAS.'.user = '.$userId);

        return $updateQuery->getQuery()->execute();
    }

    /**
     * Delete ad from solr by user id.
     *
     * @param integer $userId
     * @param object  $container
     */
    public function deleteAdFromSolrByUserId($userId, $container)
    {
        if ($userId) {
            $solrClient = $container->get('fa.solr.client.ad');
            if (!$solrClient->ping()) {
                return false;
            }

            $solr = $solrClient->connect();

            $solr->deleteByQuery('a_user_id_i:"'.$userId.'"');
            $solr->commit(true);
        }
    }

    
    /**
     * Get main image thumb url from ad.
     *
     * @param object $ad
     * @param object $container
     *
     * @return string
     */
    public function getMainImageThumbUrlFromAd($ad, $container)
    {
        //image url
        $adMainPhoto = null;
        if ($url = $this->_em->getRepository('FaAdBundle:AdImage')->getImageUrl($ad, '300X225', 1, $container)) {
            $adMainPhoto = $container->getParameter('fa.url.scheme').":".$url;
        } else {
            $adMainPhoto = $container->getParameter('fa.url.scheme').":".$container->getParameter('fa.static.url').'/fafrontend/images/no-image-grey.png';
        }
        return $adMainPhoto;
    }

    /**
     * Send buyer email for purchased item.
     *
     * @param object  $ad        Ad object.
     * @param object  $buyerObj  Buyer user object.
     * @param integer $cartTotal Cart total.
     * @param string  $cartCode  Cart code.
     * @param object  $container Container identifier.
     */
    public function sendBuyNowBuyerEmail($ad, $buyerObj, $cartTotal, $cartCode, $container)
    {
        $adUserObj   = $ad->getUser();
        $entityCache = $container->get('fa.entity.cache.manager');

        $parameters = array(
            'user_first_name' => $buyerObj->getFirstName(),
            'user_last_name' => $buyerObj->getLastName(),
            'text_item_title' => $ad->getTitle(),
            'text_item_description' => $ad->getDescription(),
            'text_item_category' => $entityCache->getEntityNameById('FaEntityBundle:Category', $ad->getCategory()->getId()),
            'url_item_main_photo' => $this->getMainImageThumbUrlFromAd($ad, $container),
            'text_delivery_method' => ($ad->getDeliveryMethodOption() ? $entityCache->getEntityNameById('FaPaymentBundle:DeliveryMethodOption', $ad->getDeliveryMethodOption()->getId()): null),
            'text_total_cost'     => CommonManager::formatCurrency($cartTotal, $container),
            'text_order_number'  => $cartCode,
            'seller_profile_name' => $adUserObj->getProfileName(),
            'seller_first_name' => $adUserObj->getFirstName(),
            'seller_last name' => $adUserObj->getLastName(),
            'url_purchase_details' => $container->get('router')->generate('my_purchases', array('orderId' => $cartCode), true),
            'url_account_dashboard' => '',
            'text_adref' => $ad->getId(),
        );

        $container->get('fa.mail.manager')->send($buyerObj->getEmail(), 'confirmation_of_purchase_your_order_with_fad', $parameters, CommonManager::getCurrentCulture($container));
    }

    /**
     * Send buyer email for purchased item.
     *
     * @param object  $ad            Ad object.
     * @param object  $buyerObj      Buyer user object.
     * @param integer $cartTotal     Cart total.
     * @param string  $cartCode      Cart code.
     * @param integer $orderStatusId Order status id.
     * @param object  $container     Container identifier.
     */
    public function sendBuyNowBuyerDeliveryStatusEmail($ad, $buyerObj, $cartTotal, $cartCode, $orderStatusId, $container)
    {
        $adUserObj   = $ad->getUser();
        $entityCache = $container->get('fa.entity.cache.manager');

        $parameters = array(
            'user_first_name' => $buyerObj->getFirstName(),
            'user_last_name' => $buyerObj->getLastName(),
            'text_item_title' => $ad->getTitle(),
            'text_item_description' => $ad->getDescription(),
            'text_item_category' => $entityCache->getEntityNameById('FaEntityBundle:Category', $ad->getCategory()->getId()),
            'url_item_main_photo' => $this->getMainImageThumbUrlFromAd($ad, $container),
            'text_delivery_method' => ($ad->getDeliveryMethodOption() ? $entityCache->getEntityNameById('FaEntityBundle:Entity', $ad->getDeliveryMethodOption()->getId()): null),
            'text_total_cost'     => CommonManager::formatCurrency($cartTotal, $container),
            'text_order_number'  => $cartCode,
            'seller_profile_name' => $adUserObj->getProfileName(),
            'seller_first_name' => $adUserObj->getFirstName(),
            'seller_last name' => $adUserObj->getLastName(),
            'url_purchase_details' => $container->get('router')->generate('my_purchases', array('orderId' => $cartCode), true),
            'url_account_dashboard' => '',
        );

        // order status
        $status = $this->_em->getRepository('FaPaymentBundle:Payment')->getDeliveryStatusByStatusId($orderStatusId, $container);
        if ($status) {
            $parameters['text_order_status'] = $status;
        }

        $container->get('fa.mail.manager')->send($buyerObj->getEmail(), 'order_updates_from_seller_delivery_status', $parameters, CommonManager::getCurrentCulture($container));
    }

    /**
     * Send seller email for reminding to review buyer.
     *
     * @param object  $ad        Ad object.
     * @param object  $buyerObj  Buyer user object.
     * @param string  $cartCode  Cart code.
     * @param object  $container Container identifier.
     */
    public function sendBuyNowSellerClosedStatusEmail($ad, $buyerObj, $cartCode, $container)
    {
        $adUserObj   = $ad->getUser();
        $entityCache = $container->get('fa.entity.cache.manager');

        $parameters = array(
            'user_first_name' => $adUserObj->getFirstName(),
            'user_last_name' => $adUserObj->getLastName(),
            'text_ad_title' => $ad->getTitle(),
            'text_ad_description' => $ad->getDescription(),
            'text_ad_category' => $entityCache->getEntityNameById('FaEntityBundle:Category', $ad->getCategory()->getId()),
            'url_ad_main_photo' => $this->getMainImageThumbUrlFromAd($ad, $container),
            'buyer_profile_name' => $buyerObj->getProfileName(),
            'url_order_details' => $container->get('router')->generate('my_orders', array('orderId' => $cartCode), true),
            'url_account_dashboard' => '',
        );

        $container->get('fa.mail.manager')->send($adUserObj->getEmail(), 'you_need_to_leave_a_review_seller', $parameters, CommonManager::getCurrentCulture($container));
    }

    /**
     * send refresh ad email
     *
     * @param ad object $ad
     * @param string $refreshEmailTemplate
     * @param string $refreshDuration
     * @param object $container
     */
    public function sendRefreshAdEmail($ad, $refreshEmailTemplate, $refreshDuration, $container)
    {
        $user   = $ad->getUser();
        if ($user) {
            $entityCache = $container->get('fa.entity.cache.manager');

            $adUpsellUrl     = $container->get('router')->generate('ad_promote', array('type' => 'promote', 'adId' => $ad->getId()), true);
            $editAdURL       = $container->get('router')->generate('ad_edit', array('id' => $ad->getId()), true);
            $markAsSoldURL   = $container->get('router')->generate('manage_my_ads_mark_as_sold', array('adId' => $ad->getId()), true);
            $dashBoardUrl    = $container->get('router')->generate('dashboard_home', array(), true);
            if ($refreshDuration) {
                $refreshAdUrl = $container->get('router')->generate('manage_my_ads_refresh_ad', array('adId' => $ad->getId(), 'date' => $refreshDuration), true);
            } else {
                $refreshAdUrl = '';
            }
            $adViewUrl       = $container->get('fa_ad.manager.ad_routing')->getDetailUrl($ad);
            $viewCount       = $this->_em->getRepository('FaAdBundle:AdViewCounter')->getAdViewCounterArrayByAdId(array($ad->getId()));
            $adEnquries      = $this->_em->getRepository('FaMessageBundle:Message')->getAdTotalMessageArrayByAdId($user->getId(), $ad->getId());
            $turnOffAlertUrl = $container->get('router')->generate('list_search_agent', array(), true).'?guid='.$user->getGuid();

            $parameters = array(
                    'user_first_name' => $user->getFirstName(),
                    'user_last_name' => $user->getLastName(),
                    'user_email_address' => $user->getEmail(),
                    'text_ad_title' => $ad->getTitle(),
                    'text_ad_description' => $ad->getDescription(),
                    'text_ad_category' => $entityCache->getEntityNameById('FaEntityBundle:Category', $ad->getCategory()->getId()),
                    'url_ad_main_photo' => $this->getMainImageThumbUrlFromAd($ad, $container),
                    'text_ad_enquiries' => isset($adEnquries[0]) ? $adEnquries[0] : null,
                    'text_ad_views'     => isset($viewCount[$ad->getId()]) ? $viewCount[$ad->getId()] : null,
                    'url_ad_upsell'  => $adUpsellUrl,
                    'url_ad_edit' => $editAdURL,
                    'url_ad_mark_sold' => $markAsSoldURL,
                    'url_ad_view' => $adViewUrl,
                    'url_account_dashboard' => $dashBoardUrl,
                    'manual_refresh_url' => $refreshAdUrl,
            );

            // Lowest category package price
            $adUserPackage = $this->getEntityManager()->getRepository('FaAdBundle:AdUserPackage')->getActiveAdPackage($ad->getId());

            if ($adUserPackage && $adUserPackage->getPackage() && $adUserPackage->getPackage()->getPrice() == 0 && $ad->getUser()) {
                $isAdminPostedAd = false;
                if ($ad && $ad->getSource() == self::SOURCE_ADMIN) {
                    $isAdminPostedAd = true;
                }
                $price = $this->getEntityManager()->getRepository('FaPromotionBundle:Package')->findLowestCategoryPackagePrice($ad->getId(), $ad->getUser()->getId(), $ad->getCategory()->getId(), $isAdminPostedAd, $container);
                if ($price) {
                    $formattedPrice = CommonManager::formatCurrency($price, $container);
                    $parameters['text_lowest_category_package_price'] = $formattedPrice;
                }
            }

            $container->get('fa.mail.manager')->send($user->getEmail(), $refreshEmailTemplate, $parameters, CommonManager::getCurrentCulture($container));
        }
    }

    /**
     * send refresh ad email
     *
     * @param ad object $ad
     * @param string $refreshEmailTemplate
     * @param string $refreshDuration
     * @param object $container
     */
    public function sendRefreshAdEmailByUser($user, $refreshEmailTemplate, $refreshDuration, $container)
    {
        if ($user) {
            $entityCache = $container->get('fa.entity.cache.manager');
            $dashBoardUrl    = $container->get('router')->generate('dashboard_home', array(), true);

            $emailQueueIds = array();
            $ads = array();
            $emailQueues = $this->_em->getRepository('FaEmailBundle:EmailQueue')->findBy(array('user' => $user->getId(), 'identifier' => $refreshEmailTemplate, 'status' => 1));
            foreach ($emailQueues as $emailQueue) {
                $emailQueueIds[] = $emailQueue->getId();
                $ad = $emailQueue->getAd();

                $adUpsellUrl     = $container->get('router')->generate('ad_promote', array('type' => 'promote', 'adId' => $ad->getId()), true);
                $editAdURL       = $container->get('router')->generate('ad_edit', array('id' => $ad->getId()), true);
                $markAsSoldURL   = $container->get('router')->generate('manage_my_ads_mark_as_sold', array('adId' => $ad->getId()), true);

                if ($refreshDuration) {
                    $refreshAdUrl = $container->get('router')->generate('manage_my_ads_refresh_ad', array('adId' => $ad->getId(), 'date' => $refreshDuration), true);
                } else {
                    $refreshAdUrl = '';
                }
                $adViewUrl       = $container->get('fa_ad.manager.ad_routing')->getDetailUrl($ad);
                $viewCount       = $this->_em->getRepository('FaAdBundle:AdViewCounter')->getAdViewCounterArrayByAdId(array($ad->getId()));
                $adEnquries      = $this->_em->getRepository('FaMessageBundle:Message')->getAdTotalMessageArrayByAdId($user->getId(), $ad->getId());
                $turnOffAlertUrl = $container->get('router')->generate('list_search_agent', array(), true).'?guid='.$user->getGuid();

                // Lowest category package price
                $adUserPackage = $this->getEntityManager()->getRepository('FaAdBundle:AdUserPackage')->getActiveAdPackage($ad->getId());

                $text_lowest_category_package_price = '';
                if ($adUserPackage && $adUserPackage->getPackage() && $adUserPackage->getPackage()->getPrice() == 0 && $ad->getUser()) {
                    $isAdminPostedAd = false;
                    if ($ad && $ad->getSource() == self::SOURCE_ADMIN) {
                        $isAdminPostedAd = true;
                    }
                    $price = $this->getEntityManager()->getRepository('FaPromotionBundle:Package')->findLowestCategoryPackagePrice($ad->getId(), $ad->getUser()->getId(), $ad->getCategory()->getId(), $isAdminPostedAd, $container);
                    if ($price) {
                        $formattedPrice = CommonManager::formatCurrency($price, $container);
                        $text_lowest_category_package_price = $formattedPrice;
                    }
                }

                $ads[] = array(
                    'text_ad_title' => $ad->getTitle(),
                    'text_ad_description' => $ad->getDescription(),
                    'text_ad_category' => $entityCache->getEntityNameById('FaEntityBundle:Category', $ad->getCategory()->getId()),
                    'url_ad_main_photo' => $this->getMainImageThumbUrlFromAd($ad, $container),
                    'text_ad_enquiries' => isset($adEnquries[0]) ? $adEnquries[0] : null,
                    'text_ad_views'     => isset($viewCount[$ad->getId()]) ? $viewCount[$ad->getId()] : null,
                    'url_ad_upsell'  => $adUpsellUrl,
                    'url_ad_edit' => $editAdURL,
                    'url_ad_mark_sold' => $markAsSoldURL,
                    'url_ad_view' => $adViewUrl,
                    'manual_refresh_url' => $refreshAdUrl,
                    'text_lowest_category_package_price' => $text_lowest_category_package_price,
                );
            }

            if (count($ads)) {
                $parameters = array(
                    'user_first_name' => $user->getFirstName(),
                    'user_last_name' => $user->getLastName(),
                    'user_email_address' => $user->getEmail(),
                    'ads' => $ads,
                    'total_ads' => (count($ads) - 1),
                    'url_account_dashboard' => $dashBoardUrl,
                );

                $container->get('fa.mail.manager')->send($user->getEmail(), $refreshEmailTemplate, $parameters, CommonManager::getCurrentCulture($container));
                $this->_em->getRepository('FaEmailBundle:EmailQueue')->removeFromEmailQueue($refreshEmailTemplate, $user, $emailQueueIds);
            }
        }
    }

    /**
    * send renewal reminder email
    *
    * @param user object $user
    * @param string $renewalReminderEmailTemplate
    * @param object $container
    */
    public function sendRenewalReminderEmailByUser($user, $renewalReminderEmailTemplate, $container)
    {
        if ($user) {
            $entityCache = $container->get('fa.entity.cache.manager');
            $dashBoardUrl    = $container->get('router')->generate('dashboard_home', array(), true);

            $emailQueueIds = array();
            $ads = array();
            $emailQueues = $this->_em->getRepository('FaEmailBundle:EmailQueue')->findBy(array('user' => $user->getId(), 'identifier' => $renewalReminderEmailTemplate, 'status' => 1));
            foreach ($emailQueues as $emailQueue) {
                $emailQueueIds[] = $emailQueue->getId();
                $ad = $emailQueue->getAd();

                $adRepostUrl     = $container->get('router')->generate('ad_promote', array('type' => 'repost', 'adId' => $ad->getId()), true);
                $editAdURL       = $container->get('router')->generate('ad_edit', array('id' => $ad->getId()), true);
                $markAsSoldURL   = $container->get('router')->generate('manage_my_ads_mark_as_sold', array('adId' => $ad->getId()), true);

                
                $adViewUrl       = $container->get('fa_ad.manager.ad_routing')->getDetailUrl($ad);
                $viewCount       = $this->_em->getRepository('FaAdBundle:AdViewCounter')->getAdViewCounterArrayByAdId(array($ad->getId()));
                $adEnquries      = $this->_em->getRepository('FaMessageBundle:Message')->getAdTotalMessageArrayByAdId($user->getId(), $ad->getId());
                $turnOffAlertUrl = $container->get('router')->generate('list_search_agent', array(), true).'?guid='.$user->getGuid();

                $text_lowest_category_package_price = '';
                if ($ad->getUser()) {
                    $isAdminPostedAd = false;
                    if ($ad && $ad->getSource() == self::SOURCE_ADMIN) {
                        $isAdminPostedAd = true;
                    }
                }

                $ads[] = array(
                    'text_ad_title' => $ad->getTitle(),
                    'text_ad_description' => $ad->getDescription(),
                    'text_ad_category' => $entityCache->getEntityNameById('FaEntityBundle:Category', $ad->getCategory()->getId()),
                    'url_ad_main_photo' => $this->getMainImageThumbUrlFromAd($ad, $container),
                    'text_ad_enquiries' => isset($adEnquries[0]) ? $adEnquries[0] : null,
                    'text_ad_views'     => isset($viewCount[$ad->getId()]) ? $viewCount[$ad->getId()] : null,
                    'url_ad_repost'  => $adRepostUrl,
                    'url_ad_edit' => $editAdURL,
                    'url_ad_mark_sold' => $markAsSoldURL,
                    'url_ad_view' => $adViewUrl,
                    'text_lowest_category_package_price' => $text_lowest_category_package_price,
                );
            }

            if (count($ads)) {
                $parameters = array(
                    'user_first_name' => $user->getFirstName(),
                    'user_last_name' => $user->getLastName(),
                    'user_email_address' => $user->getEmail(),
                    'ads' => $ads,
                    'total_ads' => (count($ads) - 1),
                    'url_account_dashboard' => $dashBoardUrl,
                );

                $container->get('fa.mail.manager')->send($user->getEmail(), $renewalReminderEmailTemplate, $parameters, CommonManager::getCurrentCulture($container));
                $this->_em->getRepository('FaEmailBundle:EmailQueue')->removeFromEmailQueue($renewalReminderEmailTemplate, $user, $emailQueueIds);
            }
        }
    }

    /**
     * Send seller email for new order.
     *
     * @param object  $ad        Ad object.
     * @param object  $buyerObj  Buyer user object.
     * @param string  $cartCode  Cart code.
     * @param integer $paymentId Payment id.
     * @param object  $container Container identifier.
     */
    public function sendBuyNowSellerEmail($ad, $buyerObj, $cartCode, $paymentId, $container)
    {
        $adUserObj = $ad->getUser();
        $entityCache = $container->get('fa.entity.cache.manager');

        //@TODO: url_contact_buyer, url_set_delivery_status, url_account_dashboard
        $paymentObj   = $this->_em->getRepository('FaPaymentBundle:Payment')->findOneBy(array('id' => $paymentId));
        $paymentValue = ($paymentObj ? unserialize($paymentObj->getValue()) : array());
        $deliveryAddress = array();
        if (isset($paymentValue['delivery_address_info']) && count($paymentValue['delivery_address_info'])) {
            $deliveryAddress = $paymentValue['delivery_address_info'];
        }
        $parameters = array(
            'user_first_name' => $adUserObj->getFirstName(),
            'user_last_name' => $adUserObj->getLastName(),
            'text_item_title' => $ad->getTitle(),
            'text_item_description' => $ad->getDescription(),
            'text_item_category' => $entityCache->getEntityNameById('FaEntityBundle:Category', $ad->getCategory()->getId()),
            'url_item_main_photo' => $this->getMainImageThumbUrlFromAd($ad, $container),
            'text_delivery_method' => ($ad->getDeliveryMethodOption() ? $entityCache->getEntityNameById('FaEntityBundle:Entity', $ad->getDeliveryMethodOption()->getId()): null),
            'text_order_number'  => $cartCode,
            'buyer_first_name' => $buyerObj->getFirstName(),
            'buyer_last_name' => $buyerObj->getLastName(),
            'buyer_delivery_address' => implode(', ', $deliveryAddress),
            'url_order_details'     => $container->get('router')->generate('my_orders', array('orderId' => $cartCode), true),
            'url_set_delivery_status'  => $container->get('router')->generate('my_orders', array('orderId' => $cartCode), true),
            'url_account_dashboard' => '',
            'text_adref' => $ad->getId(),
        );

        //send push notifications
        CommonManager::sendPushNotificationMessage('You have received a new order!', 'New-order', $container->get('router')->generate('my_orders', array('orderId' => $cartCode), true), $adUserObj, $container);

        $container->get('fa.mail.manager')->send($adUserObj->getEmail(), 'you_have_a_new_order', $parameters, CommonManager::getCurrentCulture($container));
    }

    /**
     * Send advert receipt email to user.
     *
     * @param object  $cart      Cart object.
     * @param object  $container Container identifier.
     */
    public function sendAdvertReceiptEmail($cart, $container)
    {
        $ad              = null;
        $adUserObj       = null;
        $transactionsObj = $this->_em->getRepository('FaPaymentBundle:Transaction')->getTransactionsByCartId($cart->getId());
        $packageId       = null;

        if (count($transactionsObj)) {
            foreach ($transactionsObj as $transactionObj) {
                if ($transactionObj->getValue()) {
                    $value = unserialize($transactionObj->getValue());
                    
                    if (isset($value['package'])) {
                        $keys = array_keys($value['package']);
                        if (isset($keys[0])) {
                            $packageId = $keys[0];
                        }
                    }
                }
                
                if ($transactionObj->getAmount() || (isset($value['user_credit_id']) && $value['user_credit_id'] != '') || (isset($value['discount_values']))) {
                    if ($transactionObj && $transactionObj->getAd()) {
                        $ad = $transactionObj->getAd();
                        if ($ad) {
                            $adUserObj = $ad->getUser();
                        }
                    }

                    if ($ad && $adUserObj) {
                        $parameters['text_transaction_id'] = $cart->getCartCode();
                        $parameters['text_payment_source'] = ($cart->getPaymentMethod() != 'NULL')?ucfirst($cart->getPaymentMethod()):'';

                        $parameters['user_first_name'] = $adUserObj->getFirstName();
                        $parameters['user_last_name']  = $adUserObj->getLastName();

                        $userSite = $this->_em->getRepository('FaUserBundle:UserSite')->findOneBy(array('user' => $adUserObj->getId()));

                        if ($userSite) {
                            $parameters['business_name']         = $adUserObj->getProfileName();
                            $parameters['text_business_address'] = $userSite->getCompanyAddress();
                        }

                        $parameters['text_ad_title']   = $ad->getTitle();
                        $parameters['text_adref']      = $ad->getId();

                        
                        
                        // generate other package specific parameters
                        if ($packageId) {
                            $packageObj = $this->_em->getRepository('FaPromotionBundle:Package')->find($packageId);
                            if ($packageObj) {
                                $parameters['text_package_name'] = $packageObj->getTitle();
                                
                                if (isset($value['package'][$packageId]) && isset($value['package'][$packageId]['price'])) {
                                    $parameters['text_package_price'] = CommonManager::formatCurrency($value['package'][$packageId]['price'], $container);
                                }
                                $packagePrice = (isset($value['package'][$packageId]['price']))?$value['package'][$packageId]['price']:0;
                                
                                if (isset($value['package'][$packageId]['price']) && $value['package'][$packageId]['price'] > 0  && !isset($value['user_credit_id']) && !isset($value['discount_values'])) {
                                    $packagePrice = $value['package'][$packageId]['price'];
                                    $parameters['text_package_cost_with_vat']    = CommonManager::formatCurrency($packagePrice, $container);
                                    $parameters['text_package_cost_without_vat'] = CommonManager::formatCurrency(($packagePrice/(1+(20/100))), $container);
                                    $parameters['text_package_cost_vat']         = CommonManager::formatCurrency(($packagePrice - ($packagePrice/(1+(20/100)))), $container);
                                }
                                
                                //Adding variable if credits are used
                                if (isset($value['user_credit_id'])) {
                                    $parameters['text_credit_applied'] = '-100%';
                                    $parameters['text_package_cost_without_vat'] = CommonManager::formatCurrency(($packagePrice/(1+(20/100))), $container);
                                    $parameters['text_package_cost_with_vat'] = CommonManager::formatCurrency(0, $container);
                                    $parameters['text_package_cost_vat']      = CommonManager::formatCurrency(0, $container);
                                    $parameters['text_package_price'] 		  = CommonManager::formatCurrency(0, $container);
                                }
                                
                                //Adding variable if promotional code is applied
                                if (isset($value['discount_values'])) {
                                    $textPackageWithoutVat = ($packagePrice/(1+(20/100))) - $value['discount_values']['discount_given'];
                                    $totalAmount = $packagePrice - $value['discount_values']['discount_given'];
                                    $totalVat = ($totalAmount - ($totalAmount/(1+(20/100))));
                                    $totalPackageCost = $totalAmount - $totalVat;
                                    
                                    $parameters['text_original_cost'] = CommonManager::formatCurrency($packagePrice, $container);
                                    $parameters['text_promotional_code_applied'] = '-'.(isset($value['discount_values']['discount_value']) && $value['discount_values']['discount_type'] == '2'?CommonManager::formatCurrency($value['discount_values']['discount_value'], $container):(isset($value['discount_values']['discount_value']) && $value['discount_values']['discount_type'] == '1'?$value['discount_values']['discount_value'].'%':''));
                                    $parameters['text_package_cost_with_vat'] = CommonManager::formatCurrency($packagePrice - $value['discount_values']['discount_given'], $container);
                                    $parameters['text_package_price'] = CommonManager::formatCurrency($packagePrice - $value['discount_values']['discount_given'], $container);
                                    if ($textPackageWithoutVat > 0) {
                                        $parameters['text_package_cost_without_vat'] = CommonManager::formatCurrency($totalPackageCost, $container);
                                        $parameters['text_package_cost_vat'] = CommonManager::formatCurrency($totalVat, $container);
                                    } else {
                                        $parameters['text_package_cost_without_vat'] = CommonManager::formatCurrency(0, $container);
                                        $parameters['text_package_cost_vat'] = CommonManager::formatCurrency(0, $container);
                                    }
                                }
                            }
                        }

                        $container->get('fa.mail.manager')->send($adUserObj->getEmail(), 'advert_receipt', $parameters, CommonManager::getCurrentCulture($container));
                    }
                }
            }
        }
    }

    /**
     * Get key-word search array.
     *
     * @param object  $ad                 Ad object
     * @param integer $categoryId         Ad category id.
     * @param object  $adCategoryTableObj Ad category table object (i.e. adProperty etc.).
     * @param object  $container          Container identifier.
     *
     * @return mixed
     */
    public function getKeywordSearchArray($ad, $categoryId, $adCategoryTableObj, $container)
    {
        $keywordSearch = array();
        // Index for parent categories
        $parentCategories = $this->_em->getRepository('FaEntityBundle:Category')->getCategoryPathArrayById($categoryId, false, $container);
        // create comma separated string for category and dimension
        $keywordSearch = array();
        foreach ($parentCategories as $parentId => $parentName) {
            $keywordSearch[] = $parentName;
        }
        // get dimension array.
        if ($categoryId && $adCategoryTableObj) {
            $categoryIds    = array_keys($parentCategories);
            $rootCategoryId = $categoryIds[0];
            $paaFields      = $this->getAdDetailFields($categoryId, $container);
            $className      = CommonManager::getCategoryClassNameById($rootCategoryId, true);
            $metaData       = ($adCategoryTableObj->getMetaData() ? unserialize($adCategoryTableObj->getMetaData()) : null);
            $entityCacheManager = $container->get('fa.entity.cache.manager');

            unset($paaFields['category_id|FaEntityBundle:Category']);
            foreach ($paaFields as $field => $fieldLabel) {
                $adDetailFieldKeyResult = explode('|', $field);
                $field                  = $adDetailFieldKeyResult[0];
                $repositoryName         = isset($adDetailFieldKeyResult[1]) ? $adDetailFieldKeyResult[1] : '';

                if (in_array($field, array('is_new', 'type_id'))) {
                    switch ($field) {
                        case 'is_new':
                            $value = $this->_em->getRepository('FaEntityBundle:Entity')->getIsNewNameById($ad->getIsNew(), $container);
                            break;
                        case 'type_id':
                            $value = null;
                            if ($ad->getType()) {
                                $value = $entityCacheManager->getEntityNameById($repositoryName, $ad->getType()->getId());
                            }
                            break;
                    }
                } else {
                    $value = $this->_em->getRepository('FaAdBundle:PaaField')->getPaaFieldValue($field, $adCategoryTableObj, $metaData, $container, $className, false);
                }
                if ($value && !is_numeric($value)) {
                    $keywordSearch[] = $value;
                }
            }
        }
    
        return $keywordSearch;
    }

    /**
     * Get ad count based on search parameters.
     *
     * @param array  $searchParams Saved query filters.
     * @param object $container    Container object.
     *
     * @return integer
     */
    public function getLandingPageAdCountsBasedOnSearchParams($searchParams = array(), $container = null)
    {
        $facetData      = array();
        $data['search'] = $searchParams;
        $keywords       = null;

        $container->get('fa.searchfilters.manager')->init($this, $this->getEntityManager()->getClassMetadata('FaAdBundle:Ad')->getTableName(), 'search', $data);
        $data = $container->get('fa.searchfilters.manager')->getFiltersData();

        $getDefaultRadius = $this->_em->getRepository('FaEntityBundle:Category')->getDefaultRadiusBySearchParams($searchParams, $container);

        if (isset($searchParams['item__location']) && $searchParams['item__location']) {
            $distance = (isset($searchParams['item__distance']) && $searchParams['item__distance']) ? $searchParams['item__distance'] : ($getDefaultRadius)?$getDefaultRadius:'';
            $data['query_filters']['item']['location'] = $searchParams['item__location'].'|'.$distance;
        }

        $data['query_filters']['item']['status_id'] = BaseEntityRepository::AD_STATUS_LIVE_ID;

        $data['facet_fields'] = array(
            AdSolrFieldMapping::ROOT_CATEGORY_ID         => array('min_count' => 1),
            AdSolrFieldMapping::PARENT_CATEGORY_LVL_2_ID => array('min_count' => 1),
            AdSolrFieldMapping::TYPE_ID                  => array('min_count' => 1),
            AdSolrFieldMapping::CATEGORY_ID              => array('min_count' => 1),
            AdSolrFieldMapping::PARENT_CATEGORY_LVL_3_ID => array('min_count' => 1),
        );

        $container->get('fa.solrsearch.manager')->init('ad', $keywords, $data, 1, 1);
        $facetResult = $container->get('fa.solrsearch.manager')->getSolrResponseFacetFields();

        foreach ($data['facet_fields'] as $facetField => $facetInfo) {
            if (isset($facetResult[$facetField])) {
                $facetData[$facetField] = get_object_vars($facetResult[$facetField]);
            }
        }

        return $facetData;
    }

    /**
     * Get active ad count for user.
     *
     * @param array $searchParam Search parameters.
     *
     * @return Doctrine_Query Object.
     */
    public function getActiveAdCountForUser($userId)
    {
        $qb = $this->getBaseQueryBuilder()
            ->select('COUNT('.self::ALIAS.'.id)')
            ->andWhere(self::ALIAS.'.user = '.$userId)
            ->andWhere(self::ALIAS.'.status = '.BaseEntityRepository::AD_STATUS_LIVE_ID);

        return $qb->getQuery()->getSingleScalarResult();
    }

    /**
     * Get my ads query.
     *
     * @param integer $userId
     * @param string  $type
     *
     */
    public function getMyAdsQuery($userId, $type = 'active', $isOnlyCount = false, $adIds = array())
    {
        $qb = $this->createQueryBuilder(self::ALIAS);

        if ($isOnlyCount) {
            $qb->select('COUNT('.self::ALIAS.'.id) as total_ads');
        } else {
            $qb->select(self::ALIAS.'.id', self::ALIAS.'.title', self::ALIAS.'.price', self::ALIAS.'.qty', self::ALIAS.'.qty_sold', self::ALIAS . '.renewed_at', self::ALIAS . '.weekly_refresh_at', self::ALIAS.'.is_boosted', self::ALIAS . '.boosted_at', self::ALIAS .'.created_at', self::ALIAS.'.updated_at', self::ALIAS.'.published_at', self::ALIAS.'.expires_at', self::ALIAS.'.sold_at', BaseEntityRepository::ALIAS_ADSTATUS.'.id as status_id', BaseEntityRepository::ALIAS_ADTYPE.'.id as type_id', CategoryRepository::ALIAS.'.id as cat_id','IDENTITY('.AdLocationRepository::ALIAS.'.location_town) as town_id', 'IDENTITY('.AdLocationRepository::ALIAS.'.location_area) as area_id','IDENTITY('.AdLocationRepository::ALIAS.'.locality) as locality_id');
        }


        $qb->where(self::ALIAS.'.user = '.$userId)
        ->addSelect('(case when '.self::ALIAS.'.renewed_at is not null and '.self::ALIAS.'.renewed_at>'.self::ALIAS.'.created_at then '.self::ALIAS.'.renewed_at when '.self::ALIAS.'.updated_at is not null and '.self::ALIAS.'.updated_at >'.self::ALIAS.'.created_at then '.self::ALIAS.'.updated_at else '.self::ALIAS.'.created_at end) as ad_date')
        ->innerJoin(self::ALIAS.'.status', BaseEntityRepository::ALIAS_ADSTATUS)
        ->innerJoin(self::ALIAS.'.category', CategoryRepository::ALIAS)
        ->leftJoin(self::ALIAS.'.ad_locations', AdLocationRepository::ALIAS)
        ->leftJoin(self::ALIAS.'.type', BaseEntityRepository::ALIAS_ADTYPE)
        ->andWhere(self::ALIAS.'.future_publish_at IS NULL');

        if ($type == 'both') {
            $qb->andWhere(self::ALIAS.'.status IN (:status)');
            $qb->setParameter('status', array(BaseEntityRepository::AD_STATUS_LIVE_ID, BaseEntityRepository::AD_STATUS_EXPIRED_ID, BaseEntityRepository::AD_STATUS_SOLD_ID, BaseEntityRepository::AD_STATUS_DRAFT_ID, BaseEntityRepository::AD_STATUS_REJECTED_ID, BaseEntityRepository::AD_STATUS_REJECTEDWITHREASON_ID, BaseEntityRepository::AD_STATUS_IN_MODERATION_ID));
        } elseif ($type == 'active') {
            $qb->andWhere('('.self::ALIAS.'.status = '.BaseEntityRepository::AD_STATUS_LIVE_ID.' OR ('.self::ALIAS.'.status IN (:status)'.' AND ('.self::ALIAS.'.created_at >= :created_at OR '.self::ALIAS.'.updated_at >= :updated_at)))');
            //$qb->andWhere('('.self::ALIAS.'.is_boosted IS NULL OR '.self::ALIAS.'.is_boosted=0)');
            $qb->setParameter('status', array(BaseEntityRepository::AD_STATUS_DRAFT_ID, BaseEntityRepository::AD_STATUS_REJECTED_ID, BaseEntityRepository::AD_STATUS_REJECTEDWITHREASON_ID, BaseEntityRepository::AD_STATUS_IN_MODERATION_ID));
            $qb->setParameter('updated_at', strtotime('-29 days'));
            $qb->setParameter('created_at', strtotime('-29 days'));
        } elseif ($type == 'onlyactive') {
            $qb->andWhere('('.self::ALIAS.'.status = '.BaseEntityRepository::AD_STATUS_LIVE_ID.' AND ('.self::ALIAS.'.created_at >= :created_at OR '.self::ALIAS.'.updated_at >= :updated_at))');
            $qb->setParameter('updated_at', strtotime('-29 days'));
            $qb->setParameter('created_at', strtotime('-29 days'));
        } elseif ($type == 'inactive') {
            $qb->andWhere('('.self::ALIAS.'.status IN (:other_status) AND (('.self::ALIAS.'.created_at < :created_at AND '.self::ALIAS.'.updated_at IS NULL) OR ('.self::ALIAS.'.updated_at < :updated_at AND '.self::ALIAS.'.updated_at IS NOT NULL))) OR '.self::ALIAS.'.status IN (:inactive_status)');
            $qb->setParameter('other_status', array(BaseEntityRepository::AD_STATUS_DRAFT_ID, BaseEntityRepository::AD_STATUS_REJECTED_ID, BaseEntityRepository::AD_STATUS_REJECTEDWITHREASON_ID, BaseEntityRepository::AD_STATUS_IN_MODERATION_ID));
            $qb->setParameter('inactive_status', array(BaseEntityRepository::AD_STATUS_EXPIRED_ID, BaseEntityRepository::AD_STATUS_SOLD_ID));
            $qb->setParameter('created_at', strtotime('-29 days'));
            $qb->setParameter('updated_at', strtotime('-29 days'));
        } elseif ($type == 'boosted') {
            $qb->andWhere('('.self::ALIAS.'.status = '.BaseEntityRepository::AD_STATUS_LIVE_ID.' OR ('.self::ALIAS.'.status IN (:status)'.' AND ('.self::ALIAS.'.created_at >= :created_at OR '.self::ALIAS.'.updated_at >= :updated_at)))');
            $qb->andWhere(self::ALIAS.'.is_boosted = 1');
            $qb->setParameter('status', array(BaseEntityRepository::AD_STATUS_DRAFT_ID, BaseEntityRepository::AD_STATUS_REJECTED_ID, BaseEntityRepository::AD_STATUS_REJECTEDWITHREASON_ID, BaseEntityRepository::AD_STATUS_IN_MODERATION_ID));
            $qb->setParameter('updated_at', strtotime('-29 days'));
            $qb->setParameter('created_at', strtotime('-29 days'));
        }

        if (count($adIds)) {
            $qb->andWhere(self::ALIAS.'.id IN (:adIds)');
            $qb->setParameter('adIds', $adIds);
        }

        $qb->addOrderBy('ad_date', 'DESC');

        return $qb->getQuery();
    }

    /**
     * Update ad status.
     *
     * @param integer $id        Id of ad.
     * @param integer $status_id Id of status.
     * @param object  $container Object
     *
     * @return boolean
     */
    public function changeAdStatus($id, $status_id, $container, $clearFlag = true)
    {
        $return    = false;
        $objAd     = $this->find($id);
        $objStatus = $this->_em->getRepository('FaEntityBundle:Entity')->find($status_id);

        if ($objAd && $objStatus) {
            if ($status_id == BaseEntityRepository::AD_STATUS_EXPIRED_ID) {
                $objAd->setExpiresAt(time());
                $this->_em->getRepository('FaMessageBundle:NotificationMessageEvent')->closeNotificationByOnlyAdId($objAd->getId());
            } else {
                $this->_em->getRepository('FaMessageBundle:NotificationMessageEvent')->closeNotificationByOnlyAdId($objAd->getId());
            }

            $objAd->setEditedAt(time());
            $objAd->setStatus($objStatus);
            $objAd->setIsBoosted(0);
            $objAd->setBoostedAt(null);
            $this->_em->persist($objAd);
            $this->_em->flush($objAd);
            $return = true;
            if ($container && $container->get('request_stack')->getCurrentRequest()) {
                $this->_em->getRepository('FaAdBundle:AdIpAddress')->checkAndLogIpAddress($objAd, $container->get('request_stack')->getCurrentRequest()->getClientIp());
            }

            $disabledAdStusesArray = array(BaseEntityRepository::AD_STATUS_EXPIRED_ID, BaseEntityRepository::AD_STATUS_INACTIVE_ID, BaseEntityRepository::AD_STATUS_SOLD_ID);
            if (in_array($status_id, $disabledAdStusesArray)) {
                $this->doAfterAdCloseProcess($id, $container);
            }
        }

        if ($clearFlag) {
            $this->clear();
        }

        return $return;
    }

    /**
     * Do after ad close process.
     *
     * @param integer $adId      Id of ad.
     * @param object  $container Container object.
     *
     * @return boolean
     */
    public function doAfterAdCloseProcess($adId, $container)
    {
        $objAd             = $this->find($adId);
        $adStatus          = ($objAd->getStatus() ? $objAd->getStatus()->getId() : null);
        $objAdUserPackages = $this->_em->getRepository('FaAdBundle:AdUserPackage')->findBy(array('ad_id' => $adId, 'status' => AdUserPackageRepository::STATUS_ACTIVE), array('id' => 'DESC'), 1);
        if ($objAdUserPackages) {
            $adUserPackageStatus = AdUserPackageRepository::STATUS_EXPIRED;
            if ($adStatus == BaseEntityRepository::AD_STATUS_INACTIVE_ID) {
                $adUserPackageStatus = AdUserPackageRepository::STATUS_FRONTEND_DISABLED;
            }
            foreach ($objAdUserPackages as $objAdUserPackage) {
                $objAdUserPackage->setStatus($adUserPackageStatus);
                $this->_em->persist($objAdUserPackage);
                $this->_em->flush($objAdUserPackage);
            }
        }

        if ($objAdUserPackages && isset($objAdUserPackages[0]) && $objAdUserPackages[0]->getId()) {
            $objAdUserPackageUpsells = $this->_em->getRepository('FaAdBundle:AdUserPackageUpsell')->findBy(array('ad_id' => $adId, 'ad_user_package' => $objAdUserPackages[0]->getId()));
            if ($objAdUserPackageUpsells) {
                $adUserPackageUpsellStatus = AdUserPackageUpsellRepository::STATUS_EXPIRED;
                if ($adStatus == BaseEntityRepository::AD_STATUS_INACTIVE_ID) {
                    $adUserPackageUpsellStatus = AdUserPackageUpsellRepository::STATUS_FRONTEND_DISABLED;
                }
                foreach ($objAdUserPackageUpsells as $objAdUserPackageUpsell) {
                    $objAdUserPackageUpsell->setStatus($adUserPackageUpsellStatus);
                    $this->_em->persist($objAdUserPackageUpsell);
                    $this->_em->flush($objAdUserPackageUpsell);
                }
            }
        }

        //remove yac number
        exec('nohup'.' '.$container->getParameter('fa.php.path').' '.$container->get('kernel')->getRootDir().'/console fa:update:ad-yac-number setsold --ad_id='.$objAd->getId().' >/dev/null &');
        // No need to do anything with print ad status as we are checking ad status into account while sending advert for printing.

        /*$objAdPrints = $this->_em->getRepository('FaAdBundle:AdPrint')->findBy(array('ad' => $adId));
        if ($objAdPrints) {
            foreach ($objAdPrints as $objAdPrint) {
                $objAdPrint->setPrintQueue(AdPrintRepository::PRINT_QUEUE_STATUS_EXPIRED);
                $objAdPrint->setAdModerateStatus(AdPrintRepository::AD_MODERATE_STATUS_EXPIRED);
                $this->_em->persist($objAdPrint);
            }
            $this->_em->flush();
        }*/
    }

    /**
     * Find the ads by id array.
     *
     * @param integer $id Ad id.
     *
     * @return array
     */
    public function getAdByAdId($adId)
    {
        $qb = $this->getBaseQueryBuilder();

        if (!is_array($adId)) {
            $adId = array($adId);
        }

        $qb->andWhere(self::ALIAS.'.id IN (:id)');
        $qb->setParameter('id', $adId);

        return $qb->getQuery()->getResult();
    }

    /**
     * Get sold ad count for user for given categories.
     *
     * @param array $searchParam Search parameters.
     *
     * @return Doctrine_Query Object.
     */
    public function getSoldAdCountForUserByCategories($userId, $categoryIds, $container)
    {
        $catIdArray = array();
        foreach ($categoryIds as $categoryId) {
            $catIdArray = array_merge($catIdArray, $this->_em->getRepository('FaEntityBundle:Category')->getNestedChildrenIdsByCategoryId($categoryId, $container));
        }

        $qb = $this->getBaseQueryBuilder()
        ->select('COUNT('.self::ALIAS.'.id)')
        ->andWhere(self::ALIAS.'.user = '.$userId)
        ->andWhere(self::ALIAS.'.status = '.BaseEntityRepository::AD_STATUS_SOLD_ID)
        ->andWhere(self::ALIAS.'.category IN (:categoryIds) ')
        ->setParameter('categoryIds', $catIdArray);

        return $qb->getQuery()->getSingleScalarResult();
    }

    /**
     * Get ad status which needs to direct save in edit, no need send for moderation.
     *
     * @return array
     */
    public function getDirectSaveInEditAdStatus()
    {
        return array(
            BaseEntityRepository::AD_STATUS_DRAFT_ID
        );
    }

    /**
     * Display repost button in advert edit for following status.
     *
     * @return array
     */
    public function getRepostButtonInEditAdStatus()
    {
        return array(
            BaseEntityRepository::AD_STATUS_EXPIRED_ID,
            BaseEntityRepository::AD_STATUS_SOLD_ID
        );
    }

    /**
     * Get ad detail array.
     *
     * @param integer $adId      Ad id.
     * @param object  $container Continer identifier.
     *
     * @return array
     */
    public function getFavouriteAdDetailArray($adIds, $container, $seoFlag = false)
    {
        $query = $this->getBaseQueryBuilder()
        ->select(self::ALIAS.'.id as ad_id', self::ALIAS.'.privacy_number', self::ALIAS.'.qty', self::ALIAS.'.is_new', self::ALIAS.'.payment_method_id', UserRepository::ALIAS.'.id as user_id', self::ALIAS.'.title', self::ALIAS.'.description', self::ALIAS.'.personalized_title', self::ALIAS.'.price', self::ALIAS.'.published_at', self::ALIAS.'.created_at', CategoryRepository::ALIAS.'.id as category_id', BaseEntityRepository::ALIAS.'.id as type_id', AdImageRepository::ALIAS.'.path as image_path', AdImageRepository::ALIAS.'.hash as image_hash', AdImageRepository::ALIAS.'.aws as image_aws', AdImageRepository::ALIAS.'.image_name')
        ->leftJoin('FaAdBundle:AdImage', AdImageRepository::ALIAS, 'WITH', AdImageRepository::ALIAS.'.ad = '.self::ALIAS.'.id AND '.AdImageRepository::ALIAS.'.ord = 1')
        ->innerJoin(self::ALIAS.'.category', CategoryRepository::ALIAS)
        ->leftJoin(self::ALIAS.'.user', UserRepository::ALIAS)
        ->leftJoin(self::ALIAS.'.type', BaseEntityRepository::ALIAS)
        ->where(self::ALIAS.'.id IN (:adId)')
        ->setParameter('adId', $adIds)
        ->addGroupBy(self::ALIAS.'.id');

        $categoryPath  = array();
        $adDetails     = $query->getQuery()->getResult();
        $adDetailArray = array();

        foreach ($adDetails as $adDetail) {
            $adDetailArray[$adDetail['ad_id']]['ad_id'] = $adDetail['ad_id'];
            $adDetailArray[$adDetail['ad_id']]['privacy_number'] = $adDetail['privacy_number'];
            $adDetailArray[$adDetail['ad_id']]['qty'] = $adDetail['qty'];
            $adDetailArray[$adDetail['ad_id']]['is_new'] = $adDetail['is_new'];
            $adDetailArray[$adDetail['ad_id']]['payment_method_id'] = $adDetail['payment_method_id'];
            $adDetailArray[$adDetail['ad_id']]['user_id'] = $adDetail['user_id'];
            $adDetailArray[$adDetail['ad_id']]['title'] = $adDetail['title'];
            $adDetailArray[$adDetail['ad_id']]['description'] = $adDetail['description'];
            $adDetailArray[$adDetail['ad_id']]['personalized_title'] = $adDetail['personalized_title'];
            $adDetailArray[$adDetail['ad_id']]['price'] = $adDetail['price'];
            $adDetailArray[$adDetail['ad_id']]['published_at'] = $adDetail['published_at'];
            $adDetailArray[$adDetail['ad_id']]['created_at'] = $adDetail['created_at'];
            $adDetailArray[$adDetail['ad_id']]['category_id'] = $adDetail['category_id'];
            $adDetailArray[$adDetail['ad_id']]['type_id'] = $adDetail['type_id'];
            $adDetailArray[$adDetail['ad_id']]['image_path'] = $adDetail['image_path'];
            $adDetailArray[$adDetail['ad_id']]['image_hash'] = $adDetail['image_hash'];
            $adDetailArray[$adDetail['ad_id']]['image_aws'] = $adDetail['image_aws'];
            $adDetailArray[$adDetail['ad_id']]['image_name'] = $adDetail['image_name'];

            if (isset($adDetail['category_id']) && $adDetail['category_id']) {
                $categoryPath = $this->_em->getRepository('FaEntityBundle:Category')->getCategoryPathArrayById($adDetail['category_id'], false, $container);
                $adDetailArray[$adDetail['ad_id']]['category_path'] = $categoryPath;
            }

            //ad dimensions
            if (isset($adDetail['category_id']) && $adDetail['category_id']) {
                $dimensionArray = $this->getAdDimensionByCategoryIdAndAdId($adDetail['category_id'], $adDetail['ad_id'], $categoryPath, $adDetail, $container, $seoFlag);
                if (count($dimensionArray)) {
                    $adDetailArray[$adDetail['ad_id']] = $adDetailArray[$adDetail['ad_id']] + $dimensionArray;
                }
            }
        }

        return $adDetailArray;
    }

    /**
     * Handle renewed at and quantity
     *
     * @param object $ad
     * @param object $container
     */
    public function handleRenewAndQty($ad, $container = null)
    {
        if ($ad->getStatus() && (in_array($ad->getStatus()->getId(), array(BaseEntityRepository::AD_STATUS_EXPIRED_ID, BaseEntityRepository::AD_STATUS_SOLD_ID)))) {
            if ($ad->getCategory() && $ad->getCategory()->getId()) {
                $rootCategoryId = $this->_em->getRepository('FaEntityBundle:Category')->getRootCategoryId($ad->getCategory()->getId(), $container);
                if ($rootCategoryId == CategoryRepository::FOR_SALE_ID && $ad->getQty() < 1) {
                    $ad->setQty(1);
                    $ad->setQtySold(0);
                }
            }

            $ad->setRenewedAt(time());
            if ($container) {
                $sourceLatest = self::SOURCE_PAA;

                if (CommonManager::isAdminLoggedIn($container)) {
                    $sourceLatest = self::SOURCE_ADMIN;
                }
                $ad->setSourceLatest($sourceLatest);
            }
            $this->_em->persist($ad);
            $this->_em->flush($ad);
        }
    }

    /**
     * Add detached ad filter
     *
     * @param boolean $isDetachedAd
     */
    protected function addIsDetachedAdFilter($isDetachedAd = 0)
    {
        if ($isDetachedAd) {
            $this->queryBuilder->andWhere($this->getRepositoryAlias().'.user is null');
        } else {
            $this->queryBuilder->andWhere($this->getRepositoryAlias().'.user is not null');
        }
    }

    /**
     * Select ad details
     *
     * @param array $adIds
     */
    public function getAdDetailsByAdIdsForAdEnquiryReport($adIds = null)
    {
        $qb = $this->getBaseQueryBuilder()
        ->select(self::ALIAS.'.id as ad_id', self::ALIAS.'.title', self::ALIAS.'.description', 'IDENTITY('.self::ALIAS.'.category) as category_id', AdLocationRepository::ALIAS.'.postcode', 'IDENTITY('.AdLocationRepository::ALIAS.'.location_domicile) as domicile_id', 'IDENTITY('.AdLocationRepository::ALIAS.'.location_town) as town_id', 'COUNT('.AdFavoriteRepository::ALIAS.'.id) As saved_ads', '(LENGTH('.self::ALIAS.'.title) - LENGTH(REPLACE('.self::ALIAS.'.title, \' \', \'\'))+1) As title_word_count', 'LENGTH('.self::ALIAS.'.title) As title_character_count', '(LENGTH('.self::ALIAS.'.description) - LENGTH(REPLACE('.self::ALIAS.'.description, \' \', \'\'))+1) As description_word_count', 'LENGTH('.self::ALIAS.'.description) As description_character_count', self::ALIAS.'.use_privacy_number')
        ->leftJoin(self::ALIAS.'.ad_locations', AdLocationRepository::ALIAS)
        ->leftJoin('FaAdBundle:AdFavorite', AdFavoriteRepository::ALIAS, 'WITH', AdFavoriteRepository::ALIAS.'.ad = '.self::ALIAS.'.id')
        ->where(self::ALIAS.'.id IN (:adId)')
        ->setParameter('adId', $adIds)
        ->addGroupBy(self::ALIAS.'.id')
        ->addOrderBy(self::ALIAS.'.id');

        return $qb->getQuery()->execute();
    }

    /**
     * Send email for draft ads.
     *
     * @param object $ad        Ad object.
     * @param object $container Container identifier.
     */
    public function sendEmailForDraftAd($ad, $container)
    {
        $adUser      = $ad->getUser();
        $entityCache = $container->get('fa.entity.cache.manager');
        $parameters  = array(
                           'user_first_name'            => $adUser->getFirstName(),
                           'user_last_name'             => $adUser->getLastName(),
                           'text_ad_title'              => $ad->getTitle(),
                           'text_ad_category'           => $entityCache->getEntityNameById('FaEntityBundle:Category', $ad->getCategory()->getId()),
                           'text_ad_description'        => $ad->getDescription(),
                           'url_edit_incomplete_advert' => $container->get('router')->generate('ad_edit', array('id' => $ad->getId()), true)
                       );

        $container->get('fa.mail.manager')->send($adUser->getEmail(), 'ad_abandoned', $parameters, CommonManager::getCurrentCulture($container));
    }

    /**
     * Send email for print ad package.
     *
     * @param object $ad        Ad object.
     * @param object $container Container identifier.
     */
    public function sendEmailForPrintAdPackage($ad, $container)
    {
        $adUser      = $ad->getUser();
        $entityCache = $container->get('fa.entity.cache.manager');

        $viewCount  = $this->getEntityManager()->getRepository('FaAdBundle:AdViewCounter')->getAdViewCounterArrayByAdId(array($ad->getId()));
        $adEnquries = $this->getEntityManager()->getRepository('FaMessageBundle:Message')->getAdTotalMessageArrayByAdId($adUser->getId(), $ad->getId());

        $parameters  = array(
            'user_first_name'     => $adUser->getFirstName(),
            'user_last_name'      => $adUser->getLastName(),
            'text_ad_title'       => $ad->getTitle(),
            'text_ad_category'    => $entityCache->getEntityNameById('FaEntityBundle:Category', $ad->getCategory()->getId()),
            'text_ad_description' => $ad->getDescription(),
            'url_ad_main_photo'   => $this->getMainImageThumbUrlFromAd($ad, $container),
            'text_ad_views'       => isset($viewCount[$ad->getId()]) ? $viewCount[$ad->getId()] : null,
            'text_ad_enquiries'   => isset($adEnquries[0]) ? $adEnquries[0] : null,
            'url_ad_print_upsell' => $container->get('router')->generate('ad_promote', array('adId' => $ad->getId(), 'type' => 'promote'), true),
            'url_ad_edit'         => $container->get('router')->generate('ad_edit', array('id' => $ad->getId()), true),
            'url_ad_mark_sold'    => $container->get('router')->generate('manage_my_ads_mark_as_sold', array('adId' => $ad->getId()), true),
            'url_ad_view'         => $container->get('router')->generate('ad_detail_page_by_id', array('id' => $ad->getId()), true)
        );

        $container->get('fa.mail.manager')->send($adUser->getEmail(), 'print_your_ad_upsell', $parameters, CommonManager::getCurrentCulture($container));
    }

    /**
     * Send email for print ad package.
     *
     * @param object $user      User object.
     * @param object $container Container identifier.
     */
    public function sendEmailForPrintAdPackageByUser($user, $container)
    {
        $entityCache = $container->get('fa.entity.cache.manager');

        $emailQueueIds = array();
        $ads = array();
        $emailQueues = $this->_em->getRepository('FaEmailBundle:EmailQueue')->findBy(array('user' => $user->getId(), 'identifier' => 'print_your_ad_upsell', 'status' => 1));
        foreach ($emailQueues as $emailQueue) {
            $emailQueueIds[] = $emailQueue->getId();
            $ad = $emailQueue->getAd();
            $viewCount  = $this->getEntityManager()->getRepository('FaAdBundle:AdViewCounter')->getAdViewCounterArrayByAdId(array($ad->getId()));
            $adEnquries = $this->getEntityManager()->getRepository('FaMessageBundle:Message')->getAdTotalMessageArrayByAdId($user->getId(), $ad->getId());
            $ads[] = array(
                'text_ad_title'       => $ad->getTitle(),
                'text_ad_category'    => $entityCache->getEntityNameById('FaEntityBundle:Category', $ad->getCategory()->getId()),
                'text_ad_description' => $ad->getDescription(),
                'url_ad_main_photo'   => $this->getMainImageThumbUrlFromAd($ad, $container),
                'text_ad_views'       => isset($viewCount[$ad->getId()]) ? $viewCount[$ad->getId()] : null,
                'text_ad_enquiries'   => isset($adEnquries[0]) ? $adEnquries[0] : null,
                'url_ad_print_upsell' => $container->get('router')->generate('ad_promote', array('adId' => $ad->getId(), 'type' => 'promote'), true),
                'url_ad_edit'         => $container->get('router')->generate('ad_edit', array('id' => $ad->getId()), true),
                'url_ad_mark_sold'    => $container->get('router')->generate('manage_my_ads_mark_as_sold', array('adId' => $ad->getId()), true),
                'url_ad_view'         => $container->get('router')->generate('ad_detail_page_by_id', array('id' => $ad->getId()), true)
            );
        }
        if (count($ads)) {
            $parameters = array(
                'user_first_name'          => $user->getFirstName(),
                'user_last_name'           => $user->getLastName(),
                'ads' => $ads,
                'total_ads' => (count($ads) - 1),
            );

            $container->get('fa.mail.manager')->send($user->getEmail(), 'print_your_ad_upsell', $parameters, CommonManager::getCurrentCulture($container));
            $this->_em->getRepository('FaEmailBundle:EmailQueue')->removeFromEmailQueue('print_your_ad_upsell', $user, $emailQueueIds);
        }
    }

    /**
     * send email for low view alert
     *
     * @param object $ad
     * @param object $container
     * @param integer $viewCount
     */
    public function sendEmailForLowViewAlert($ad, $container, $viewCount = 0)
    {
        $adUser      = $ad->getUser();
        $entityCache = $container->get('fa.entity.cache.manager');
        $adEnquries  = $this->getEntityManager()->getRepository('FaMessageBundle:Message')->getAdTotalMessageArrayByAdId($adUser->getId(), $ad->getId(), $ad->getPublishedAt());

        $parameters = array(
                'user_first_name'       => $adUser->getFirstName(),
                'user_last_name'        => $adUser->getLastName(),
                'text_ad_title'         => $ad->getTitle(),
                'text_ad_category'      => $entityCache->getEntityNameById('FaEntityBundle:Category', $ad->getCategory()->getId()),
                'text_ad_description'   => $ad->getDescription(),
                'url_ad_main_photo'     => $this->getMainImageThumbUrlFromAd($ad, $container),
                'text_ad_views'         => $viewCount,
                'text_ad_enquiries'     => isset($adEnquries[0]) ? $adEnquries[0] : null,
                'url_ad_upsell'         => $container->get('router')->generate('ad_promote', array('adId' => $ad->getId(), 'type' => 'promote'), true),
                'url_ad_edit'           => $container->get('router')->generate('ad_edit', array('id' => $ad->getId()), true),
                'url_ad_mark_sold'      => $container->get('router')->generate('manage_my_ads_mark_as_sold', array('adId' => $ad->getId()), true),
                'url_ad_view'           => $container->get('router')->generate('ad_detail_page_by_id', array('id' => $ad->getId()), true),
                'url_account_dashboard' => $container->get('router')->generate('dashboard_home', array(), true),
                'text_adref'            => $ad->getId()
        );

        $container->get('fa.mail.manager')->send($adUser->getEmail(), 'low_views_boost_response', $parameters, CommonManager::getCurrentCulture($container));
    }

    /**
     * send email for low view alert
     *
     * @param object  $ad
     * @param object  $container
     * @param integer $viewCount
     * @param integer $adEnquriesCount
     */
    public function sendEmailForLowEnquiryAlert($ad, $container, $viewCount = 0, $adEnquriesCount = 0, $adCallClicks = 0)
    {
        $adUser      = $ad->getUser();
        $entityCache = $container->get('fa.entity.cache.manager');

        $parameters = array(
                'user_first_name'       => $adUser->getFirstName(),
                'user_last_name'        => $adUser->getLastName(),
                'text_ad_title'         => $ad->getTitle(),
                'text_ad_category'      => $entityCache->getEntityNameById('FaEntityBundle:Category', $ad->getCategory()->getId()),
                'text_ad_description'   => $ad->getDescription(),
                'url_ad_main_photo'     => $this->getMainImageThumbUrlFromAd($ad, $container),
                'text_ad_views'         => $viewCount,
                'text_ad_enquiries'     => $adEnquriesCount,
                'url_ad_upsell'         => $container->get('router')->generate('ad_promote', array('adId' => $ad->getId(), 'type' => 'promote'), true),
                'url_ad_edit'           => $container->get('router')->generate('ad_edit', array('id' => $ad->getId()), true),
                'url_ad_mark_sold'      => $container->get('router')->generate('manage_my_ads_mark_as_sold', array('adId' => $ad->getId()), true),
                'url_ad_view'           => $container->get('router')->generate('ad_detail_page_by_id', array('id' => $ad->getId()), true),
                'url_account_dashboard' => $container->get('router')->generate('dashboard_home', array(), true),
                'text_adref'            => $ad->getId(),
                'text_ad_click_to_reveal' => $adCallClicks,
        );

        $container->get('fa.mail.manager')->send($adUser->getEmail(), 'low_enquiries_boost_response', $parameters, CommonManager::getCurrentCulture($container));
    }

    /**
     * Update created at for ad
     *
     * @param object $cart Cart object.
     */
    public function updateAdCreatedAtForCart($cart)
    {
        $transactions = $this->_em->getRepository('FaPaymentBundle:Transaction')->getTransactionsByCartId($cart->getId());

        if ($transactions) {
            foreach ($transactions as $transaction) {
                if ($transaction->getAd()) {
                    $ad = $transaction->getAd();

                    //update created_at of ad.
                    if ($transaction->getAmount() > 0 && $ad) {
                        $ad->setCreatedAt(time());
                        $this->_em->persist($ad);
                        $this->_em->flush($ad);
                    }
                }
            }
        }
    }

    /**
     * Get yac expiry.
     *
     * @param integer $adId
     * @param integer $adExpiry
     *
     * @return integer
     */
    public function getYacExpiry($adId, $adExpiry)
    {
        $adPrint = $this->_em->getRepository('FaAdBundle:AdPrint')->getLastPaidPrintEntryForAd($adId);
        if ($adPrint) {
            $lastPrintInsertDate = $adPrint->getInsertDate();
            if ($lastPrintInsertDate > $adExpiry) {
                $adExpiry = $lastPrintInsertDate;
            }
        }

        return $adExpiry;
    }

    /**
     * Get ad print expiry.
     *
     * @param integer $adId
     * @param integer $adExpiry
     *
     * @return integer
     */
    public function getAdPrintExpiry($adId, $adExpiry)
    {
        $adPrint = $this->_em->getRepository('FaAdBundle:AdPrint')->getLastPaidPrintEntryForAd($adId);
        if ($adPrint) {
            $lastPrintInsertDate = $adPrint->getInsertDate();
            if ($lastPrintInsertDate > $adExpiry) {
                $adExpiry = $lastPrintInsertDate;
                $adExpiry = strtotime('+7 days', $adExpiry);
            }
        }

        return $adExpiry;
    }

    /**
     * Check if ad category can be changed or not in edit mode.
     *
     * @param object $ad Ad object.
     */
    public function isAdCategoryChangableInEditMode($ad)
    {
        // Allow for draft, inactive, sold, expired and live ads.
        if ($ad->getStatus() && in_array($ad->getStatus()->getId(), array(BaseEntityRepository::AD_STATUS_DRAFT_ID, BaseEntityRepository::AD_STATUS_INACTIVE_ID, BaseEntityRepository::AD_STATUS_EXPIRED_ID, BaseEntityRepository::AD_STATUS_SOLD_ID, BaseEntityRepository::AD_STATUS_LIVE_ID))) {
            return true;
        }

        return false;
    }

    /**
     *  Send ad expiration alert before one day.
     *
     * @param object $ad Ad object.
     * @param object  $container
     *
     */
    public function sendExpireTomorrowAlertEmail($ad, $container)
    {
        $user        = $ad->getUser();
        $entityCache = $container->get('fa.entity.cache.manager');
        $editAdURL   = $container->get('router')->generate('fa_frontend_homepage', array(), true);

        $parameters = array(
            'user_first_name'          => $user->getFirstName(),
            'user_last_name'           => $user->getLastName(),
            'text_ad_title'            => $ad->getTitle(),
            'text_ad_category'         => $entityCache->getEntityNameById('FaEntityBundle:Category', $ad->getCategory()->getId()),
            'text_ad_description'      => $ad->getDescription(),
            'url_ad_main_photo'        => $this->getMainImageThumbUrlFromAd($ad, $container),
            'url_ad_mark_sold'         => $container->get('router')->generate('manage_my_ads_mark_as_sold', array('adId' => $ad->getId()), true),
            'url_ad_renew_early_1_day' => $container->get('router')->generate('ad_promote', array('type' => 'renew', 'adId' => $ad->getId()), true),
        );

        $container->get('fa.mail.manager')->send($user->getEmail(), 'ad_expires_tomorrow', $parameters, CommonManager::getCurrentCulture($container));
    }

    /**
     *  Send ad expiration alert before one day user wise.
     *
     * @param object $user      User object.
     * @param object $container Container object
     *
     */
    public function sendExpireTomorrowAlertEmailByUser($user, $container)
    {
        $entityCache = $container->get('fa.entity.cache.manager');
        $ads = array();
        $emailQueueIds = array();
        $emailQueues = $this->_em->getRepository('FaEmailBundle:EmailQueue')->findBy(array('user' => $user->getId(), 'identifier' => 'ad_expires_tomorrow', 'status' => 1));
        foreach ($emailQueues as $emailQueue) {
            $emailQueueIds[] = $emailQueue->getId();
            $ad = $emailQueue->getAd();
            $ads[] = array(
                'text_ad_title'            => $ad->getTitle(),
                'text_ad_category'         => $entityCache->getEntityNameById('FaEntityBundle:Category', $ad->getCategory()->getId()),
                'text_ad_description'      => $ad->getDescription(),
                'url_ad_main_photo'        => $this->getMainImageThumbUrlFromAd($ad, $container),
                'url_ad_mark_sold'         => $container->get('router')->generate('manage_my_ads_mark_as_sold', array('adId' => $ad->getId()), true),
                'url_ad_renew_early_1_day' => $container->get('router')->generate('ad_promote', array('type' => 'renew', 'adId' => $ad->getId()), true),
            );
            //send push notifications
            CommonManager::sendPushNotificationMessage('Your ad expires tomorrow. Repost it today!', 'Expires-tomorrow', $container->get('router')->generate('ad_promote', array('type' => 'renew', 'adId' => $ad->getId()), true), $user, $container);
        }
        if (count($ads)) {
            $parameters = array(
                'user_first_name'          => $user->getFirstName(),
                'user_last_name'           => $user->getLastName(),
                'ads' => $ads,
                'total_ads' => (count($ads) - 1),
            );

            $container->get('fa.mail.manager')->send($user->getEmail(), 'ad_expires_tomorrow', $parameters, CommonManager::getCurrentCulture($container));
            $this->_em->getRepository('FaEmailBundle:EmailQueue')->removeFromEmailQueue('ad_expires_tomorrow', $user, $emailQueueIds);
        }
    }

    /**
     * Get user ids array based on ad ids
     *
     * @param array $adIds Array of ad id.
     */
    public function getUserIdArrayByAdIds($adIds)
    {
        $qb = $this->getBaseQueryBuilder()
        ->select(self::ALIAS.'.id as ad_id', 'IDENTITY('.self::ALIAS.'.user) as user_id')
        ->where(self::ALIAS.'.id IN (:adId)')
        ->setParameter('adId', $adIds);

        $adDetails = $qb->getQuery()->getResult();
        $adUserIdArray = array();

        foreach ($adDetails as $adDetail) {
            $adUserIdArray[$adDetail['ad_id']] = $adDetail['user_id'];
        }

        return $adUserIdArray;
    }

    /**
     * Get query builder for ad api resutl.
     *
     * @param array  $searchParam Search parameters.
     * @param object $container   Container object.
     *
     * @return Doctrine_Query object
     */
    public function getAdApiQueryBuilder($searchParam, $container)
    {
        $adStatusIds = array(BaseEntityRepository::AD_STATUS_LIVE_ID);
        $query = $this->getBaseQueryBuilder()
        ->innerJoin(AdRepository::ALIAS.'.category', CategoryRepository::ALIAS)
        ->andwhere(AdRepository::ALIAS.'.status IN (:ad_status)')
        ->andwhere(AdRepository::ALIAS.'.source IN (:source)'.' OR '.AdRepository::ALIAS.'.source_latest IN (:source)')
        ->andwhere(AdRepository::ALIAS.'.is_feed_ad = 0 OR '.AdRepository::ALIAS.'.is_feed_ad IS NULL')
        ->setParameter('source', array(self::SOURCE_PAA, self::SOURCE_ADMIN))
        ->setParameter('ad_status', $adStatusIds)
        ->orderBy(AdRepository::ALIAS.'.published_at', 'DESC');

        $query->innerJoin(AdRepository::ALIAS.'.user', UserRepository::ALIAS, 'WITH', UserRepository::ALIAS.'.status = :user_status')
        ->setParameter('user_status', BaseEntityRepository::USER_STATUS_ACTIVE_ID);

        // filter by categories.
        if (isset($searchParam['Categories'])) {
            $categoryIds = explode(',', $searchParam['Categories']);
            $catIdArray = array();
            foreach ($categoryIds as $categoryId) {
                $catIdArray = array_merge($catIdArray, $this->_em->getRepository('FaEntityBundle:Category')->getNestedChildrenIdsByCategoryId($categoryId, $container));
            }
            if (count($catIdArray)) {
                $query->andWhere(AdRepository::ALIAS.'.category IN (:categoryIds) ')
                ->setParameter('categoryIds', $catIdArray);
            }
        }

        // filter by user id.
        if (isset($searchParam['UserID']) && $searchParam['UserID']) {
            $query->andWhere(AdRepository::ALIAS.'.user = :UserID ')
            ->setParameter('UserID', $searchParam['UserID']);
        }

        // filter by user type.
        if (isset($searchParam['UserType']) && $searchParam['UserType']) {
            $userRoleId = null;
            if ($searchParam['UserType'] == 'Private') {
                $userRoleId = RoleRepository::ROLE_SELLER_ID;
            } elseif ($searchParam['UserType'] == 'Business') {
                $userRoleId = RoleRepository::ROLE_BUSINESS_SELLER_ID;
            }
            if ($userRoleId) {
                $query->andWhere(UserRepository::ALIAS.'.role = :role ')
                ->setParameter('role', $userRoleId);
            }
        }

        return $query;
    }

    /**
     * Get last draft ad of user.
     *
     * @param array $userId User id array.
     *
     * @return array
     */
    public function getLastDraftAdByUser($userId)
    {
        $qb = $this->createQueryBuilder(self::ALIAS)
        ->where(self::ALIAS.'.user = :userId')
        ->setParameter('userId', $userId)
        ->andWhere(self::ALIAS.'.status = :statusId')
        ->setParameter('statusId', BaseEntityRepository::AD_STATUS_DRAFT_ID)
        ->orderBy(self::ALIAS.'.id', 'DESC')
        ->setMaxResults(1);

        return $qb->getQuery()->getOneOrNullResult();
    }

    /**
     * Get users placed ads count.
     *
     * @param integet $userId    User id.
     * @param object  $container Container identifier.
     *
     * @return array
     */
    public function getPlacedAdCountByUserId($userId, $container = null)
    {
        $query = $this->createQueryBuilder(self::ALIAS)
        ->select('COUNT('.self::ALIAS.'.id) as adCount')
        ->innerJoin(self::ALIAS.'.user', UserRepository::ALIAS, 'WITH', self::ALIAS.'.user = '.UserRepository::ALIAS.'.id')
        ->andWhere($this->getRepositoryAlias().'.user = :userId')
        ->setParameter('userId', $userId)
        ->andWhere(self::ALIAS.'.status <> :statusId')
        ->setParameter('statusId', BaseEntityRepository::AD_STATUS_DRAFT_ID);

        $resultArray = $query->getQuery()->getArrayResult();

        $totalAds = 0;
        if ($resultArray && isset($resultArray[0])) {
            $totalAds = $resultArray[0]['adCount'];
        }

        return $totalAds;
    }

    /**
     * Check whether user is allowed to post ad.
     *
     * @param integer $userId     User id.
     * @param integer $categoryId Ad category id.
     * @param object  $container  Container identifier.
     *
     * @return array
     */
    public function getPrivateUserPostAdParams($userId, $categoryId, $adId = null, $container)
    {
        $allowPrivateUserToPostAdFlag = true;
        $privateUserAdParams = array();
        $adCategories = array();
        $userRole = $this->_em->getRepository('FaUserBundle:User')->getUserRole($userId, $container);

        if ($userRole == RoleRepository::ROLE_SELLER) {
            $privateUserAdPostLimitRules = $this->_em->getRepository('FaCoreBundle:ConfigRule')->getPrivateUserAdPostLimit($categoryId, $container);
            $privateUserAdParams['adCategoryId'] = $categoryId;
            $privateUserAdParams['privateUserAdPostLimitRules'] = $privateUserAdPostLimitRules;

            $query = $this->createQueryBuilder(self::ALIAS)
            ->select('COUNT(DISTINCT '.self::ALIAS.'.id) as ad_cnt')
            ->innerJoin(self::ALIAS.'.user', UserRepository::ALIAS, 'WITH', self::ALIAS.'.user = '.UserRepository::ALIAS.'.id')
            ->andWhere(self::ALIAS.'.status IN (:adStatus)')
            ->setParameter('adStatus', array(BaseEntityRepository::AD_STATUS_LIVE_ID, BaseEntityRepository::AD_STATUS_IN_MODERATION_ID))
            ->andWhere($this->getRepositoryAlias().'.user = :userId')
            ->setParameter('userId', $userId)
            ->setMaxResults(1);

            if (isset($privateUserAdPostLimitRules['configRuleCategoryId']) && $privateUserAdPostLimitRules['configRuleCategoryId']) {
                $adCategories = $this->_em->getRepository('FaEntityBundle:Category')->getNestedChildrenIdsByCategoryId($privateUserAdPostLimitRules['configRuleCategoryId'], $container);
                $query->andWhere($this->getRepositoryAlias().'.category IN (:adCategories)')
                    ->setParameter('adCategories', $adCategories);
            }

            $totalAds = 0;
            $userAd = $query->getQuery()->getOneOrNullResult();
            $totalAds += $userAd['ad_cnt'];

            $cartUserAd = $this->_em->getRepository('FaPaymentBundle:Transaction')->getTotalAdByUserIdAndCategoryId($userId, $adCategories, array($adId));
            $totalAds += $cartUserAd;

            if (isset($privateUserAdPostLimitRules['privateUserAdPostLimit']) && $privateUserAdPostLimitRules['privateUserAdPostLimit'] > 0 && $totalAds >= $privateUserAdPostLimitRules['privateUserAdPostLimit']) {
                $allowPrivateUserToPostAdFlag = false;
            }

            $privateUserAdParams['userAdsTotal'] = $totalAds;
            $privateUserAdParams['allowPrivateUserToPostAdFlag'] = $allowPrivateUserToPostAdFlag;

            return $privateUserAdParams;
        } elseif ($userRole == RoleRepository::ROLE_BUSINESS_SELLER) {
            $privateUserAdParams['allowPrivateUserToPostAdFlag'] = $allowPrivateUserToPostAdFlag;

            return $privateUserAdParams;
        }
    }

    /**
     * Send live ad upload photo email.
     *
     * @param integer $adId      Ad id.
     * @param object  $container Container object.
     */
    public function sendLiveAdUploadPhotoEmailForAd($adId, $container)
    {
        $adObj = $this->find($adId);
        if ($adObj) {
            $userObj = $adObj->getUser();
            if ($userObj) {
                $parameters = $this->generateAdPackageParameters($adObj, $userObj, $container);

                $parameters['add_photo_url'] = $container->get('router')->generate('show_ad_image_upload_no_photo', array('adIdUserId' => CommonManager::encryptDecrypt($container->getParameter('add_a_photo_encryption_key'), $adObj->getId().'||'.$userObj->getId())), true);
            }

            $container->get('fa.mail.manager')->send($userObj->getEmail(), 'add_a_photo', $parameters, CommonManager::getCurrentCulture($container));
        }
    }
    
    /**
     * get User Last Live Basic Advert
     *
     * @param integer $userId      User $userId.
     * @param object  $container Container object.
     */
    public function getUserLastBasicLiveAdvert($userId, $adId, $categoryId, $container)
    {
        $catIdArray = $this->_em->getRepository('FaEntityBundle:Category')->getNestedChildrenIdsByCategoryId($categoryId, $container);
        
        $qb = $this->createQueryBuilder(self::ALIAS)
        ->select(self::ALIAS.'.id as adId', self::ALIAS.'.source', PackageRepository::ALIAS.'.id as packageId', PackageRepository::ALIAS.'.price as package_price', CategoryRepository::ALIAS.'.id as categoryId')
        ->innerJoin('FaAdBundle:AdUserPackage', AdUserPackageRepository::ALIAS, 'WITH', self::ALIAS.'.id = '.AdUserPackageRepository::ALIAS.'.ad_id')
        ->innerJoin('FaPromotionBundle:Package', PackageRepository::ALIAS, 'WITH', AdUserPackageRepository::ALIAS.'.package = '.PackageRepository::ALIAS.'.id')
        ->innerJoin(AdRepository::ALIAS.'.user', UserRepository::ALIAS, 'WITH', UserRepository::ALIAS.'.status = :user_status')
        ->innerJoin('FaEntityBundle:Category', CategoryRepository::ALIAS, 'WITH', self::ALIAS.'.category = '.CategoryRepository::ALIAS.'.id')
        ->setParameter('user_status', BaseEntityRepository::USER_STATUS_ACTIVE_ID)
        ->where(self::ALIAS.'.status = :statusId')
        ->setParameter('statusId', BaseEntityRepository::AD_STATUS_LIVE_ID)
        ->andWhere(self::ALIAS.'.user = :userId')
        ->setParameter('userId', $userId)
        ->andWhere(self::ALIAS.'.id = :adId')
        ->setParameter('adId', $adId)
        ->andWhere(self::ALIAS.'.category IN (:categoryIds) ')
        ->setParameter('categoryIds', $catIdArray)
        ->orderBy(AdUserPackageRepository::ALIAS.'.id', 'DESC')
        ->setMaxResults(1);
        return $qb->getQuery()->getOneOrNullResult();
    }
    
    /**
     * get Package Id if featured top upsell exist
     *
     * @param integer $packageid
     * @param all package available for upgrade
     *
     * @return package id
     */
    public function getFeaturedAdForUpgrade($packageIds=[])
    {
        $featuredPackageId = null;
        if (!empty($packageIds)) {
            foreach ($packageIds as $package) {
                $featuredPackageId = $package;
                $featuredUpsellResult = $this->_em->getRepository('FaPromotionBundle:Package')->getFeaturedTopUpsell($package);
                if (!empty($featuredUpsellResult)) {
                    $featuredPackageId = $package;
                    break;
                }
            }
            
            return $featuredPackageId;
        }
    }
    
    /**
     * get category object if is_featured_upgrade is enabled
     *
     * @param integer $categoryId   Category $categoryId.
     * @param object  $container Container object.
     *
     * @return category object
     */
    public function checkIsfeaturedUpgradeEnabledForCategory($rootCategoryId, $container)
    {
        $categObj = null;
        if ($rootCategoryId!= '') {
            //$getRootCategoryId = $this->_em->getRepository('FaEntityBundle:Category')->getRootCategoryId($categoryId, $container);
            $categObj = $this->_em->getRepository('FaEntityBundle:Category')->findOneBy(array('id' => $rootCategoryId, 'is_featured_upgrade_enabled' => '1'));
        }
        return $categObj;
    }
    
    /**
     * Get user all adverts
     *
     * @param integer $userId      User id.
     * @param object  $container Continer identifier.
     *
     * @return array
     */
    public function getUserAllAdverts($userId, $container)
    {
        $qb = $this->getBaseQueryBuilder()
        ->select(self::ALIAS)
        ->innerJoin(AdRepository::ALIAS.'.user', UserRepository::ALIAS, 'WITH', UserRepository::ALIAS.'.status = :user_status')
        ->setParameter('user_status', BaseEntityRepository::USER_STATUS_ACTIVE_ID)
        ->where(self::ALIAS.'.status = :statusId')
        ->setParameter('statusId', BaseEntityRepository::AD_STATUS_LIVE_ID)
        ->andWhere(self::ALIAS.'.user = :userId')
        ->setParameter('userId', $userId)
        ->orderBy(self::ALIAS.'.id', 'DESC');
        
        return $qb->getQuery()->getResult();
    }
    
    /**
     * Get ad information that have basic package.
     *
     * @param string $rootCategoryid Category id.
     * @param string $userId User id.
     * @param object $container  Container object.
     *
     * @return array
     */
    public function getLastBasicPackageAdvertForUpgrade($rootCategoryid, $userId, $keywords = null, $container)
    {
        $getBasicAdResult = null;
        $availablePackageIds = [];
        $getNestedRootCategory = $this->_em->getRepository('FaEntityBundle:Category')->getNestedChildrenIdsByCategoryId($rootCategoryid, $container);
        $userLiveAdverts = $this->_em->getRepository('FaAdBundle:Ad')->getUserAllAdverts($userId, $container);
        if (!empty($userLiveAdverts)) {
            foreach ($userLiveAdverts as $adId) {
                //check is it transaction happend earlier like upgrade or something else
                $isAdFree = $this->_em->getRepository('FaAdBundle:AdUserPackage')->getAdPackageArrayByAdId($adId->getId());
                if (!empty($isAdFree) && isset($isAdFree[$adId->getId()]) && $isAdFree[$adId->getId()]['price'] == 0) {
                    $getUserLastBasicAdvert = $this->_em->getRepository('FaAdBundle:Ad')->getUserLastBasicLiveAdvert($userId, $adId->getId(), $rootCategoryid, $container);
                    if (!empty($getUserLastBasicAdvert)) {
                        $systemUserRoles  = $this->_em->getRepository('FaUserBundle:Role')->getRoleArrayByType('C', $container);
                        $userRole         = $this->_em->getRepository('FaUserBundle:User')->getUserRole($userId, $container);
                        $userRolesArray[] = array_search($userRole, $systemUserRoles);
                        $locationGroupIds = $this->_em->getRepository('FaAdBundle:AdLocation')->getLocationGroupIdForAd($getUserLastBasicAdvert['adId'], true);
                        $packages         = $this->_em->getRepository('FaPromotionBundle:PackageRule')->getActivePackagesByCategoryId($getUserLastBasicAdvert['categoryId'], $locationGroupIds, $userRolesArray, array(), $container);
                        
                        //loop through all show packages
                        foreach ($packages as $package) {
                            $availablePackageIds[] = $package->getPackage()->getId();
                        }
                        //check last user advert is Basic
                        if (isset($availablePackageIds[0]) && in_array($getUserLastBasicAdvert['packageId'], $availablePackageIds) &&  $getUserLastBasicAdvert['package_price'] == 0) {
                            //remove basic advert from package list and check Featured Top upsell exist for this package
                            array_shift($availablePackageIds);
                            $getNextFeaturedTopPackageId= $this->_em->getRepository('FaAdBundle:Ad')->getFeaturedAdForUpgrade($availablePackageIds);
                            //no featured top upsell exist
                            if (!empty($getNextFeaturedTopPackageId)) {
                                $getSearchRootCategory = $this->_em->getRepository('FaEntityBundle:Category')->getRootCategoryId($rootCategoryid, $container);
                                $getFeaturedAdRootCategory = $this->_em->getRepository('FaEntityBundle:Category')->getRootCategoryId($getUserLastBasicAdvert['categoryId'], $container);
                                
                                $solrAd = [];
                                $featuredAd['query_filters']['item']['id']        = $getUserLastBasicAdvert['adId'];
                                $featuredAd['query_filters']['item']['status_id'] = BaseEntityRepository::AD_STATUS_LIVE_ID;
                                $container->get('fa.solrsearch.manager')->init('ad', $keywords, $featuredAd, 1, 1, 0, true);
                                $getBasicAdResult = $container->get('fa.solrsearch.manager')->getSolrResponseDocs();
                                break;
                            }
                        }
                    }
                }
            }
        }
        
        return $getBasicAdResult;
    }
    
    /**
     * Delete ad from solr by Advert id.
     *
     * @param integer $adId
     * @param object  $container
     */
    public function deleteAdFromSolrByAdId($adId, $container)
    {
        if ($adId) {
            $solrClient = $container->get('fa.solr.client.ad');
            if (!$solrClient->ping()) {
                return false;
            }
            
            $solr = $solrClient->connect();
            
            $solr->deleteByQuery('id:"'.$adId.'"');
            $solr->commit(true);
        }
    }

    /**
     * Update ad status by ad.
     *
     * @param integer $ad
     * @param integer $container
     *
     */
    public function updateAdStatusInSolrByAd($ad, $container)
    {
        if ($ad) {
            $solrClient = $container->get('fa.solr.client.ad');
            if (!$solrClient->ping()) {
                return false;
            }
            
            $solr = $solrClient->connect();
            $adSolrIndex = $container->get('fa.ad.solrindex');
            $adSolrIndex->update($solrClient, $ad, $container, true);
            
            $solr->commit(true);
        }
    }

    public function getAdCountByCampaignUser($campaign, $user)
    {
        $results = $this->createQueryBuilder(self::ALIAS)
        ->select('COUNT('.self::ALIAS.'.id) as adCount')
        ->where(self::ALIAS.".campaign = :campaign")
        ->setParameter('campaign', $campaign)
        ->andWhere(self::ALIAS.".user= :user")
        ->setParameter('user', $user)
        ->getQuery()->getSingleScalarResult();
        return $results;
    }

    /**
     * Send complete advert mail.
     *
     * @param object $user    User.
     * @param object $ad    Ad.
     * @param object $paaLiteEmailNotification paaLiteEmailNotification.
     * @param object  $container Container identifier.
     *
     * @return integer
     */
    public function sendCompleteAdvertEmail($user, $ad, $paaLiteEmailNotification, $container = null)
    {
        $adPackage = $this->_em->getRepository('FaAdBundle:AdUserPackage')->findOneBy(array('ad_id'=>$ad->getId()));
        $adPackagePrice = $adPackage->getPackage()->getPrice();
        $entityCache =   $container->get('fa.entity.cache.manager');
        $text_package_name = '';
        $text_lowest_category_package_price = '';
        $url_ad_upsell = '';
        //send email only if ad has user and status is active and not feed ad.
        if ($user && CommonManager::checkSendEmailToUser($user, $container)) {
            $ads[] = array(
                'text_ad_title' => $ad->getTitle(),
                'text_ad_description' => $ad->getDescription(),
                'text_ad_category' => $entityCache->getEntityNameById('FaEntityBundle:Category', $ad->getCategory()->getId()),
                'url_ad_preview' => $container->get('router')->generate('ad_detail_page_by_id', array('id' => $ad->getId()), true),
                'url_ad_view' => $container->get('router')->generate('ad_detail_page_by_id', array('id' => $ad->getId()), true),
                'text_adref' => $ad->getId(),
                'url_ad_main_photo' => $this->getMainImageThumbUrlFromAd($ad, $container),
                'url_ad_edit' => $container->get('router')->generate('ad_edit', array('id' => $ad->getId()), true),
                'text_package_name' => $text_package_name,
                'text_lowest_category_package_price' => $text_lowest_category_package_price,
                'url_ad_upsell' => $container->get('router')->generate('ad_promote', array('type' => 'promote', 'adId' => $ad->getId()), true),
            );
            
            if (count($ads)) {
                $parameters = array(
                    'user_first_name' => $user->getFirstName()?$user->getFirstName():$user->getUserName(),
                    'ads' => $ads,
                    'show_upgrade_button' => ($adPackagePrice==0)?1:0,
                    'total_ads' => (count($ads) - 1),
                    'url_account_dashboard' => $container->get('router')->generate('dashboard_home', array(), true),
                );

                $container->get('fa.mail.manager')->send($user->getEmail(), 'complete_advert', $parameters, CommonManager::getCurrentCulture($container));
                $paaLiteEmailNotification->setIsAdConfirmationMailSent(1);
                //$output->writeln('Complete your Advert mail sent to User Id:'.($user ? $user->getId() : null), true);
                //$this->_em->getRepository('FaMessageBundle:NotificationMessageEvent')->setNotificationEvents('complete_advert', $ad->getId(), $user->getId());
                //$paaLiteEmailNotification->setIsAdConfirmationNotificationSent(1);
                $this->_em->persist($paaLiteEmailNotification);
                $this->_em->flush($paaLiteEmailNotification);
                //$output->writeln('Complete your Advert notification sent to User Id:'.($user ? $user->getId() : null), true);

            }
        }
    }

    /**
     * Un boost ad by user id.
     *
     * @param integer $userId
     * @param integer $isBoostedAd
     */
    public function unboostAdByUserId($userId, $isBoostedAd = 0)
    {
        $updateQuery = $this->createQueryBuilder(self::ALIAS)
        ->update()
        ->set(self::ALIAS.'.is_boosted', $isBoostedAd)
        ->set(self::ALIAS.'.boosted_at', '0')
        ->where(self::ALIAS.'.user = '.$userId);

        return $updateQuery->getQuery()->execute();
    }

    /* Find ads count by search params.
     *
     * @param array $searchParams.
     *
     * @return array
     */
    public function getAdsCountBySearchParams($searchParams)
    {
        
        $arrResources = array();
        $townId = $searchParams['search']['item__location'];
        $distance = isset($searchParams['search']['item__distance'])?$searchParams['search']['item__distance']:-1;
        if($townId) {
            $location = $this->_em->getRepository('FaEntityBundle:Location')->find($townId);
            $distance = ($distance)?$distance:-1;

            $query = $this->createQueryBuilder(self::ALIAS)
            ->select(LocationRepository::ALIAS.'.name,( 3959 * ACOS( COS( RADIANS('.$location->getLatitude().') ) * COS( RADIANS( '.LocationRepository::ALIAS.'.latitude ) ) * COS( RADIANS( '.LocationRepository::ALIAS.'.longitude ) - RADIANS('.$location->getLongitude().') ) + SIN( RADIANS('.$location->getLatitude().') ) * SIN( RADIANS( '.LocationRepository::ALIAS.'.latitude ) ) ) ) AS distance, IDENTITY('.AdLocationRepository::ALIAS.'.location_town) as town_id, GROUP_CONCAT('.self::ALIAS.'.id, \',\') as ids, COUNT('.self::ALIAS.'.id) as cnt')
            ->leftJoin(self::ALIAS.'.ad_locations', AdLocationRepository::ALIAS)
            ->leftJoin(AdLocationRepository::ALIAS.'.location_town', LocationRepository::ALIAS);

            if(isset($searchParams['search']) && isset($searchParams['search']['keywords'])) {
                $query->andWhere('('.self::ALIAS.'.title like \'%'.$searchParams['search']['keywords'].'%\' or '.self::ALIAS.'.description like \'%'.$searchParams['search']['keywords'].'%\')');
            }
            if(isset($searchParams['search']) && isset($searchParams['search']['item__category_id'])) {
                $query->andWhere(self::ALIAS.'.category IN (:CategoryId)');
                $query->setParameter('CategoryId',$searchParams['search']['item__category_id']);
            }
            $query->andWhere('IDENTITY('.AdLocationRepository::ALIAS.'.location_town) IS NOT NULL');
            $query->andWhere('IDENTITY('.self::ALIAS.'.status) ='.BaseEntityRepository::AD_STATUS_LIVE_ID);
            $query->andWhere(self::ALIAS.'.is_blocked_ad=0');
            $query->andWhere(AdLocationRepository::ALIAS.'.location_town !='.$townId);
            $query->addGroupBy(AdLocationRepository::ALIAS.'.location_town');
            $query->addOrderBy('distance','asc');
            //$query->setMaxResults(4);
            $arrResources = $query->getQuery()->getArrayResult();
        }
       
        return $arrResources;
    }
}
