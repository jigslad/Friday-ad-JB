<?php

/**
 * This file is part of the fa bundle.
 *
 * @copyright Copyright (c) 2014, FMG
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Fa\Bundle\AdBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Fa\Bundle\AdBundle\Solr\AdPropertySolrFieldMapping;
use Fa\Bundle\EntityBundle\FaEntityBundle;
use Fa\Bundle\CoreBundle\Manager\CommonManager;
use Fa\Bundle\AdBundle\Entity\AdProperty;

/**
 * AdPropertyRepository.
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 *
 * @author Janak Jadeja <janak@aspl.in>
 * @copyright 2014 Friday Media Group Ltd
 * @version 1.0
 */
class AdPropertyRepository extends EntityRepository
{
    use \Fa\Bundle\CoreBundle\Search\Search;

    const ALIAS = 'afj';

    /**
     * Prepare query builder.
     *
     * @param array $data Array of data.
     *
     * @return Doctrine\ORM\QueryBuilder The query builder.
     */
    public function getBaseQueryBuilder()
    {
        return $this->createQueryBuilder(self::ALIAS);
    }

    /**
     * Find the dimension by ad id.
     *
     * @param integer $adId Ad id.
     *
     * @return array
     */
    public function findByAdId($adId)
    {
        $qb = $this->getBaseQueryBuilder();

        if (!is_array($adId)) {
            $adId = array($adId);
        }

        $qb->andWhere(self::ALIAS.'.ad IN (:adId)');
        $qb->setParameter('adId', $adId);

        return $qb->getQuery()->getArrayResult();
    }

    /**
     * Returns ad solr document object.
     *
     * @param object $ad Ad object.
     *
     * @return Apache_Solr_Document
     */
    public function getSolrDocument($ad, $container)
    {
        $document = new \SolrInputDocument($ad);

        $document = $this->_em->getRepository('FaAdBundle:Ad')->getSolrDocument($ad, $document, $container);

        $categoryId = ($ad->getCategory() ? $ad->getCategory()->getId() : null);
        // get property object
        $adProperty = $this->findOneBy(array('ad' => $ad->getId()));

        if ($adProperty) {
            $document = $this->addField($document, AdPropertySolrFieldMapping::NUMBER_OF_BEDROOMS_ID, $adProperty->getNumberOfBedroomsId());
            $document = $this->addField($document, AdPropertySolrFieldMapping::ROOM_SIZE_ID, $adProperty->getRoomSizeId());
            $metaData = ($adProperty->getMetaData() ? unserialize($adProperty->getMetaData()) : null);

            if ($metaData && count($metaData)) {
                $document = $this->addField($document, AdPropertySolrFieldMapping::META_DATA, $adProperty->getMetaData());
                if (isset($metaData['number_of_bathrooms_id'])) {
                    $document = $this->addField($document, AdPropertySolrFieldMapping::NUMBER_OF_BATHROOMS_ID, $metaData['number_of_bathrooms_id']);
                }

                if (isset($metaData['furnishing_id'])) {
                    $document = $this->addField($document, AdPropertySolrFieldMapping::FURNISHING_ID, $metaData['furnishing_id']);
                }

                if (isset($metaData['rent_per_id'])) {
                    $document = $this->addField($document, AdPropertySolrFieldMapping::RENT_PER_ID, $metaData['rent_per_id']);
                }

                if (isset($metaData['date_available'])) {
                    $document = $this->addField($document, AdPropertySolrFieldMapping::DATE_AVAILABLE, $metaData['date_available']);
                    $document = $this->addField($document, AdPropertySolrFieldMapping::DATE_AVAILABLE_INT, CommonManager::getTimeStampFromStartDate($metaData['date_available']));
                }

                if (isset($metaData['number_of_rooms_available_id'])) {
                    $document = $this->addField($document, AdPropertySolrFieldMapping::NUMBER_OF_ROOMS_AVAILABLE_ID, $metaData['number_of_rooms_available_id']);
                }
            }
            // add amenities.
            $amenitiesIds = explode(',', $adProperty->getAmenitiesId());
            if (count($amenitiesIds)) {
                foreach ($amenitiesIds as $amenityId) {
                    $document = $this->addField($document, AdPropertySolrFieldMapping::AMENITIES_ID, $amenityId);
                }
            }
        }

        // update keyword search fields.
        $keywordSearch = $this->_em->getRepository('FaAdBundle:Ad')->getKeywordSearchArray($ad, $categoryId, $adProperty, $container);
        if (count($keywordSearch)) {
            $document = $this->addField($document, AdPropertySolrFieldMapping::KEYWORD_SEARCH, implode(',', $keywordSearch));
        }

        return $document;
    }

    /**
     * Add field to solr document.
     *
     * @param object $document Solr document object.
     * @param string $field    Field to index or store.
     * @param string $value    Value of field.
     *
     * @return object
     */
    private function addField($document, $field, $value)
    {
        if ($value != null) {
            $document->addField($field, $value);
        }

        return $document;
    }

    /**
     * Get ad vertical data array.
     *
     * @param object $adId Ad id.
     *
     * @return array
     */
    public function getAdVerticalDataArray($adId)
    {
        $adVerticalData = $this->findByAdId($adId);
        if (count($adVerticalData)) {
            return array_filter($adVerticalData[0], 'strlen');
        }

        return array();
    }

    /**
     * Remove ad from vertical by ad id.
     *
     * @param integer $adId Ad id.
     */
    public function removeByAdId($adId)
    {
        $adVertical = $this->createQueryBuilder(self::ALIAS)
        ->andWhere(self::ALIAS.'.ad = :adId')
        ->setParameter('adId', $adId)
        ->getQuery()
        ->getOneOrNullResult();

        if ($adVertical) {
            $this->_em->remove($adVertical);
            $this->_em->flush($adVertical);
        }
    }

    /**
     * Get ad listing fields.
     *
     * @return array
     */
    public function getAdListingFields()
    {
        $adListingFields['TYPE_ID|FaEntityBundle:Entity']                = 'TYPE_ID';
        $adListingFields['CATEGORY_ID|FaEntityBundle:Category']          = 'CATEGORY_ID';
        $adListingFields['NUMBER_OF_BATHROOMS_ID|FaEntityBundle:Entity'] = 'NUMBER_OF_BATHROOMS_ID';
        $adListingFields['NUMBER_OF_BEDROOMS_ID|FaEntityBundle:Entity']  = 'NUMBER_OF_BEDROOMS_ID';

        return $adListingFields;
    }

    /**
     * Update data from moderation.
     *
     * @param array $data Data from moderation.
     */
    public function updateDataFromModeration($data)
    {
        foreach ($data as $element) {
            $object = null;
            if (isset($element['id'])) {
                $object = $this->findOneBy(array('id' => $element['id']));
            } else {
                $object = $this->findOneBy(array('ad' => $element['ad_id']));
            }

            if (!$object && isset($element['ad_id'])) {
                $object = new AdProperty();
                $ad = $this->_em->getRepository('FaAdBundle:Ad')->findOneBy(array('id' => $element['ad_id']));
                if ($ad) {
                    $object->setAd($ad);
                }
            }

            foreach ($element as $field => $value) {
                $methodName = 'set'.str_replace(' ', '', ucwords(str_replace('_', ' ', $field)));
                if (method_exists($object, $methodName) === true) {
                    if ($value === '') {
                        $value = null;
                    }
                    $object->$methodName($value);
                }
            }
            if ($object) {
                $this->_em->persist($object);
                $this->_em->flush($object);
            }
        }
    }

    /**
     * Get other features.
     *
     * @param array $element Element from moderation.
     *
     * @return object
     */
    public function setObjectFromModerationData($element)
    {
        if (isset($element['id'])) {
            $object = $this->findOneBy(array('id' => $element['id']));
        } else {
            $object = $this->findOneBy(array('ad' => $element['ad_id']));
        }

        foreach ($element as $field => $value) {
            $methodName = 'set'.str_replace(' ', '', ucwords(str_replace('_', ' ', $field)));
            if (method_exists($object, $methodName) === true) {
                $object->$methodName($value);
            }
        }

        return $object;
    }

    /**
     * Get ad forsale fields.
     *
     * @return array
     */
    public function getAllFields()
    {
        return array(
                'number_of_bedrooms_id',
                'number_of_bathrooms_id',
                'amenities_id',
                'furnishing_id',
                'rent_per_id',
                'bills_included_in_rent_id',
                'deposit',
                'date_available',
                'rental_length',
                'smoking_allowed_id',
                'pets_allowed_id',
                'dss_tenants_allowed_id',
                'number_of_rooms_in_property_id',
                'number_of_rooms_available_id',
                'rooms_for_id',
                'room_size_id',
                'ownership_id',
                'lease_type_id'
        );
    }

    /**
     * Get ad not-inexed forsale fields.
     *
     * @return array
     */
    public function getNotIndexedFields()
    {
        return array(
                'number_of_bathrooms_id',
                'furnishing_id',
                'rent_per_id',
                'bills_included_in_rent_id',
                'deposit',
                'date_available',
                'rental_length',
                'smoking_allowed_id',
                'pets_allowed_id',
                'dss_tenants_allowed_id',
                'number_of_rooms_in_property_id',
                'number_of_rooms_available_id',
                'rooms_for_id',
                'ownership_id',
                'lease_type_id'
        );
    }

    /**
     * Get ad inexed forsale fields.
     *
     * @return array
     */
    public function getIndexedFields()
    {
        return array(
                'number_of_bedrooms_id',
                'amenities_id',
                'room_size_id'
        );
    }

    /**
     * Get ad detail fields.
     *
     * @return array
     */
    public function getAdDetailTabFields()
    {
        $adDetailFields['more_details'][] = 'RENTAL_LENGTH';
        $adDetailFields['more_details'][] = 'FURNISHING_ID';
        $adDetailFields['more_details'][] = 'DEPOSIT';
        $adDetailFields['more_details'][] = 'SMOKING_ALLOWED_ID';
        $adDetailFields['more_details'][] = 'PETS_ALLOWED_ID';
        $adDetailFields['more_details'][] = 'DSS_TENANTS_ALLOWED_ID';

        return $adDetailFields;
    }

    /**
     * Get rent post fix text.
     *
     * @param integer $id        Entity id.
     * @param object  $container Container identifier.
     */
    public function getRentPostFixText($id, $container, $value = null)
    {
        if ($value != null) {
            $words = explode(' ', $value);
        } else {
            $entityCacheManager = $container->get('fa.entity.cache.manager');
            $words = explode(' ', $entityCacheManager->getEntityNameById('FaEntityBundle:Entity', $id));
        }
        $acronym = '';

        foreach ($words as $w) {
            $acronym .= $w[0];
        }

        return strtolower($acronym);
    }
}
