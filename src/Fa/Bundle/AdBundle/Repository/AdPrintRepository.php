<?php

/**
 * This file is part of the fa bundle.
 *
 * @copyright Copyright (c) 2014, FMG
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Fa\Bundle\AdBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Fa\Bundle\UserBundle\Repository\UserRepository;
use Fa\Bundle\EntityBundle\Repository\CategoryRepository;
use Fa\Bundle\EntityBundle\Repository\LocationRepository;
use Fa\Bundle\AdBundle\Entity\AdPrint;
use Fa\Bundle\CoreBundle\Manager\CommonManager;
use Fa\Bundle\EntityBundle\Repository\EntityRepository as BaseEntityRepository;
use Fa\Bundle\AdBundle\Entity\PrintEdition;

/**
 * AdPrintRepository.
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 *
 * @author Samir Amrutya <samiram@aspl.in>
 * @copyright  2014 Friday Media Group Ltd
 * @version 1.0
 */
class AdPrintRepository extends EntityRepository
{
    use \Fa\Bundle\CoreBundle\Search\Search;

    const ALIAS = 'ap';

    const PRINT_QUEUE_STATUS_SEND = 0;

    const PRINT_QUEUE_STATUS_SENT = 1;

    const PRINT_QUEUE_STATUS_EXPIRED = 5;

    const AD_MODERATE_STATUS_EXPIRED = 5;

    /**
     * PrepareQueryBuilder.
     *
     * @param array $data Array of data.
     *
     * @return Doctrine\ORM\QueryBuilder The query builder.
     */
    public function getBaseQueryBuilder()
    {
        return $this->createQueryBuilder(self::ALIAS);
    }

    /**
     * Get query builder for ad print.
     *
     * @param array  $searchParam Search parameters.
     * @param object $container   Container object.
     *
     * @return Doctrine_Query object
     */
    public function getAdPrintQueryBuilder($searchParam, $container)
    {
        $adStatusIds = array(BaseEntityRepository::AD_STATUS_LIVE_ID, BaseEntityRepository::AD_STATUS_EXPIRED_ID);
        if (isset($searchParam['excludeExpired']) && $searchParam['excludeExpired'] && $searchParam['excludeExpired'] == 'true') {
            $adStatusIds = array(BaseEntityRepository::AD_STATUS_LIVE_ID);
        }
        $query = $this->getBaseQueryBuilder()
            ->innerJoin(self::ALIAS.'.print_edition', PrintEditionRepository::ALIAS)
            ->innerJoin(self::ALIAS.'.ad', AdRepository::ALIAS)
            ->leftJoin(AdRepository::ALIAS.'.user', UserRepository::ALIAS)
            ->innerJoin(AdRepository::ALIAS.'.status', BaseEntityRepository::ALIAS)
            ->leftJoin(AdRepository::ALIAS.'.category', CategoryRepository::ALIAS)
            ->andwhere(self::ALIAS.'.ad_moderate_status = '.AdModerateRepository::MODERATION_QUEUE_STATUS_OKAY)
            ->andwhere(AdRepository::ALIAS.'.status IN (:ad_status)')
            ->setParameter('ad_status', $adStatusIds)
            ->orderBy(AdRepository::ALIAS.'.published_at', 'DESC');

        // filter ad id.
        if (isset($searchParam['adRef']) && $searchParam['adRef']) {
            $query->andWhere(AdRepository::ALIAS.'.id = :adRef')
            ->setParameter('adRef', $searchParam['adRef'])
            ->groupBy(AdRepository::ALIAS.'.id');
        }

        // filter editions.
        if (isset($searchParam['Edition']) && $searchParam['Edition']) {
            $query->andWhere(PrintEditionRepository::ALIAS.'.code = :code')
                ->setParameter('code', $searchParam['Edition']);
        }

        // filter paid ads.
        if (isset($searchParam['PaidInsert'])) {
            $query->andWhere(self::ALIAS.'.is_paid = :is_paid')
            ->setParameter('is_paid', (strtolower($searchParam['PaidInsert']) === 'true' ? '1' : '0'));
        }

        // filter by categories.
        if (isset($searchParam['Categories'])) {
            $categoryIds = explode(',', $searchParam['Categories']);
            $catIdArray = array();
            foreach ($categoryIds as $categoryId) {
                $catIdArray = array_merge($catIdArray, $this->_em->getRepository('FaEntityBundle:Category')->getNestedChildrenIdsByCategoryId($categoryId, $container));
            }
            if (count($catIdArray)) {
                $query->andWhere(AdRepository::ALIAS.'.category IN (:categoryIds) ')
                    ->setParameter('categoryIds', $catIdArray);
            }
        }

        // filter insert date.
        if (isset($searchParam['InsertDate']) && $searchParam['InsertDate']) {
            $midnight = mktime(0, 0, 0);
            $newData =  date('Y-m-d h:i:s A', strtotime($searchParam['InsertDate']));
            $insertDate = date(strtotime($newData, $midnight));
            $query->andWhere(self::ALIAS.'.insert_date = :insert_date')
                ->setParameter('insert_date', $insertDate);
        }

        return $query;
    }

    /**
     * Add print ad.
     *
     * @param integer $limit             Print edition limit.
     * @param string  $duration          Duration od print upsell.
     * @param object  $adObj             Ad object.
     * @param boolean $addAdToModeration Send ad to moderate or not.
     * @param boolean $isPaid            Flag for print ad is paid or free.
     * @param boolean $batchUpdate       if call from batch update
     * @param string  $rundate           Run date.
     * @param boolean $futureAdPostFlag  Future advert post flag.
     * @param integer $adUserPackageId   Ad user package id.
     *
     */
    public function addPrintAd($limit, $duration, $adObj, $addAdToModeration = true, $isPaid = false, $batchUpdate = false, $rundate = null, $futureAdPostFlag = false, $adUserPackageId = null)
    {
        $printEditions = array();
        //get print editions based on ad location group
        $duration = (int) $duration;
        if ($adUserPackageId) {
            $adUserPackageObj = $this->_em->getRepository('FaAdBundle:AdUserPackage')->find($adUserPackageId);
            $adUserPackageValue = unserialize($adUserPackageObj->getValue());
            if (isset($adUserPackageValue['printEditions'])) {
                $adUserPackagePrintEditionIds = array_slice($adUserPackageValue['printEditions'], 0, $limit);
                $printEditions = $this->_em->getRepository('FaAdBundle:PrintEdition')->findBy(array('id' => $adUserPackagePrintEditionIds, 'status' => 1));
            }
        }
        if (!count($printEditions)) {
            $printEditions = $this->getPrintEditionForAd($limit, $adObj->getId());
        }
        $defaultPrinEditionValues = $this->_em->getRepository('FaAdBundle:PrintEdition')->getDefaultPrinEditionValues();
        if (!$duration) {
            $duration = $defaultPrinEditionValues['no_of_week'];
        }

        // delete old packages
        //$this->deleteOldPackages($adObj->getId(), $isPaid);
        // for future post ad
        if ($futureAdPostFlag && !$rundate) {
            $rundate = $adObj->getFuturePublishAt();
        }

        // get latest sequence for ad.
        $prevAdPrintObj = $this->findOneBy(array('ad' => $adObj->getId()), array('id' => 'desc'));
        foreach ($printEditions as $printEdition) {
            //get insert date.
            $insertDate = $this->getInsertDateForPrintEdition($printEdition, $defaultPrinEditionValues, $rundate);

            $sequence = 1;
            if ($prevAdPrintObj && $prevAdPrintObj->getSequence()) {
                $sequence = $prevAdPrintObj->getSequence() + 1;
            }
            //insert duration wise print ad.
            for ($i=0; $i < $duration; $i++) {
                $adPrint = new AdPrint();
                $adPrint->setAd($adObj);
                $adPrint->setPrintEdition($printEdition);
                $adPrint->setDuration($duration.' weeks');
                $adPrint->setSequence($sequence);

                if ($isPaid) {
                    $adPrint->setIsPaid(1);
                } else {
                    $adPrint->setIsPaid(0);
                }

                $adPrint->setPrintQueue(self::PRINT_QUEUE_STATUS_SEND);

                if (!$addAdToModeration && !$futureAdPostFlag) {
                    $adPrint->setAdModerateStatus(AdModerateRepository::MODERATION_QUEUE_STATUS_OKAY);
                } else {
                    $adPrint->setAdModerateStatus(AdModerateRepository::MODERATION_QUEUE_STATUS_SENT);
                }
                $adPrint->setInsertDate(strtotime('+'.$i.' weeks', $insertDate));

                if ($isPaid) {
                    $startDate = strtotime('+'.$i.' weeks', strtotime('next monday'));
                    if ($adObj->getUser()) {
                        $this->_em->getRepository('FaMessageBundle:NotificationMessageEvent')->setNotificationEvents('4_days_to_print_date', $adObj->getId(), $adObj->getUser()->getId(), $startDate, true);
                    }
                }

                $this->_em->persist($adPrint);
                $sequence++;
            }

            if ($batchUpdate == false) {
                $this->_em->flush();
            }
        }
    }

    /**
     * Delete old print ad packages.
     *
     * @param integer $adId
     * @param boolean $is_paid
     */
    public function deleteOldPackages($adId, $isPaid = null)
    {
        $query = $this->getBaseQueryBuilder()
            ->delete()
            ->andwhere(self::ALIAS.'.print_queue != '.self::PRINT_QUEUE_STATUS_EXPIRED)
            ->andwhere(self::ALIAS.'.ad_moderate_status != '.self::AD_MODERATE_STATUS_EXPIRED)
            ->andwhere(self::ALIAS.'.ad = '.$adId);

        if ($isPaid) {
            $query->andwhere(self::ALIAS.'.is_paid = '.$isPaid);
        }

        return $query->getQuery()->execute();
    }

    /**
     * Get insert date for print edition.
     *
     * @param object  $printEdition             Print edition object.
     * @param array   $defaultPrinEditionValues Print edition default value array.
     * @param integer $rundate run date
     *
     * @return integer
     */
    public function getInsertDateForPrintEdition($printEdition, $defaultPrinEditionValues, $rundate = null)
    {
        //for manual testing uncomment $rundate
        //$rundate = strtotime('2016-01-07 19:00:00');
        $insertDate          = null;
        $daysArray           = CommonManager::getDaysOfWeekArray();
        $deadlineDayOfWeek   = $printEdition->getDeadlineDayOfWeek() ? $printEdition->getDeadlineDayOfWeek() : $defaultPrinEditionValues['deadline_day_of_week'];
        $deadlineTimeOfDay   = $printEdition->getDeadlineTimeOfDay() ? $printEdition->getDeadlineTimeOfDay() : $defaultPrinEditionValues['deadline_time_of_day'];
        $insertDateDayOfWeek = $printEdition->getInsertDateDayOfWeek() ? $printEdition->getInsertDateDayOfWeek() : $defaultPrinEditionValues['insertdate_day_of_week'];
        $insertDateTimeOfDay = $printEdition->getInsertDateTimeOfDay() ? $printEdition->getInsertDateDayOfWeek() : $defaultPrinEditionValues['insertdate_time_of_day'];
        $rundate             = $rundate > 0 ? $rundate : time();
        $currentDayOfWeek    = date('N', $rundate);
        $currentTime         = date('H:i', $rundate);

        // for xmas fix 2018
        // for Tunbridge Wells, Hastings & Uckfield 18th December 6pm and before 1st January 6pm HAVE to be booked with publish date 4th January.
        if (in_array($printEdition->getId(), array(2, 5, 9)) && $rundate > strtotime('2018-12-18 18:00:00') && $rundate < strtotime('2019-01-01 18:00:00')) {
            $insertDate = strtotime('2019-01-04 00:00:00');
        }  // for Eastbourne, Brighton, Crawley, Worthing & Seaford 19th December 6pm and before 2nd January 6pm HAVE to be booked with publish date 4th January.
        elseif (in_array($printEdition->getId(), array(8, 11, 10, 12, 7)) && $rundate > strtotime('2018-12-19 18:00:00') && $rundate < strtotime('2019-01-02 18:00:00')) {
            $insertDate = strtotime('2019-01-04 00:00:00');
        } else {
            //check for dead line.
            if ($currentDayOfWeek == $deadlineDayOfWeek && $currentTime <= $deadlineTimeOfDay) {
                $insertDate = strtotime($daysArray[$insertDateDayOfWeek], $rundate);
            } elseif ($currentDayOfWeek == $deadlineDayOfWeek && $currentTime > $deadlineTimeOfDay) {
                $insertDate = strtotime('next '.$daysArray[$insertDateDayOfWeek].' +1 week', $rundate);
            } elseif ($currentDayOfWeek > $deadlineDayOfWeek) {
                if ($currentDayOfWeek >= $insertDateDayOfWeek) {
                    $insertDate = strtotime('next '.$daysArray[$insertDateDayOfWeek], $rundate);
                } else {
                    $insertDate = strtotime('next '.$daysArray[$insertDateDayOfWeek].' +1 week', $rundate);
                }
            } elseif ($currentDayOfWeek < $deadlineDayOfWeek) {
                $insertDate = strtotime($daysArray[$insertDateDayOfWeek], $rundate);
            }
        }

        return $insertDate;
    }

    /**
     * Get print editions for ad.
     *
     * @param integer $limit            Print edition limit.
     * @param integer $adId             Ad id.
     * @param boolean $getOnlyIds       Get only ids.
     * @param array   $locationGroupIds Location group ids.
     *
     * @return mixed
     */
    public function getPrintEditionForAd($limit, $adId, $getOnlyIds = false, $locationGroupIds = null)
    {
        if (!$locationGroupIds) {
            $locationGroupIds = $this->_em->getRepository('FaAdBundle:AdLocation')->getLocationGroupIdForAd($adId);
        }
        $tmpPrintEditions = $this->_em->getRepository('FaAdBundle:PrintEditionRule')->getPrintEditionByLocationGroup($locationGroupIds);
        $printEditionIds  = array();
        foreach ($tmpPrintEditions as $tmpPrintEdition) {
            $printEditionIds[] = $tmpPrintEdition->getPrintEdition()->getId();
            if (count($printEditionIds) >= $limit) {
                break;
            }
            if ($tmpPrintEdition->getLocationGroup()->getRelatedPrintEdition()) {
                $relatedEditionString = $tmpPrintEdition->getLocationGroup()->getRelatedPrintEdition();
                $printEditionTableName   = $this->_em->getClassMetadata('FaAdBundle:PrintEdition')->getTableName();
                $sql = 'SELECT * FROM '.$printEditionTableName.' as '.PrintEditionRepository::ALIAS.' WHERE '.PrintEditionRepository::ALIAS.'.id IN ('.$relatedEditionString.') AND '.PrintEditionRepository::ALIAS.'.status = 1 ORDER BY FIELD('.PrintEditionRepository::ALIAS.'.id, '.$relatedEditionString.');';
                $stmt = $this->_em->getConnection()->prepare($sql);
                $stmt->execute();
                $relatedPrintEditions = $stmt->fetchAll();
                foreach ($relatedPrintEditions as $relatedPrintEdition) {
                    $printEditionIds[] = $relatedPrintEdition['id'];
                }
                array_unique($printEditionIds);
            }
        }
        $printEditionIds = array_slice($printEditionIds, 0, $limit);

        if ($getOnlyIds) {
            return $printEditionIds;
        }

        $printEditions   = $this->_em->getRepository('FaAdBundle:PrintEdition')->findBy(array('id' => $printEditionIds, 'status' => 1));

        return $printEditions;
    }

    /**
     * Find current inactive print ad.
     *
     * @param integer $adId Ad Id.
     *
     * @return integer
     */
    public function findCurrentInactivePrintAd($adId)
    {
        return $this->findBy(array('ad' => $adId, 'print_queue' => self::PRINT_QUEUE_STATUS_SEND, 'ad_moderate_status' => AdModerateRepository::MODERATION_QUEUE_STATUS_SENT));
    }

    /**
     * Enable print ad.
     *
     * @param integer $adId                       Ad user Ad id.
     * @param boolean $cahngeAdPrintCreatedAtFlag Change ad print created at flag.
     */
    public function enablePrintAd($adId, $cahngeAdPrintCreatedAtFlag=false)
    {
        $adPrints = $this->findCurrentInactivePrintAd($adId);

        $defaultPrinEditionValues = $this->_em->getRepository('FaAdBundle:PrintEdition')->getDefaultPrinEditionValues();
        $mulipleWeekBookingCount  = array();
        $adObj = $this->_em->getRepository('FaAdBundle:Ad')->findOneBy(array('id' => $adId));

        if (count($adPrints) > 0) {
            foreach ($adPrints as $adPrint) {
                // get and update insert date
                $insertDate = $this->getInsertDateForPrintEdition($adPrint->getPrintEdition(), $defaultPrinEditionValues, ($adObj && $adObj->getFuturePublishAt() ? $adObj->getFuturePublishAt() : null));
                $week       = (isset($mulipleWeekBookingCount[$adPrint->getPrintEdition()->getId()]) ? ($mulipleWeekBookingCount[$adPrint->getPrintEdition()->getId()] + 1) : 0);
                $adPrint->setInsertDate(strtotime('+'.$week.' weeks', $insertDate));
                if ($cahngeAdPrintCreatedAtFlag) {
                    $adPrint->setCreatedAt(time());
                }
                $mulipleWeekBookingCount[$adPrint->getPrintEdition()->getId()] = $week;

                // update status
                $adPrint->setAdModerateStatus(AdModerateRepository::MODERATION_QUEUE_STATUS_OKAY);
                $this->_em->persist($adPrint);
            }

            $this->_em->flush();
        }
    }

    /**
     * Remove ad prints by ad id.
     *
     * @param integer $adId Ad id.
     */
    public function removeByAdId($adId)
    {
        $adprints = $this->getBaseQueryBuilder()
                         ->andWhere(self::ALIAS.'.ad = :adId')
                         ->setParameter('adId', $adId)
                         ->getQuery()
                         ->getResult();

        //remove print ad from table.
        if ($adprints) {
            foreach ($adprints as $adprint) {
                $this->_em->remove($adprint);
            }
            $this->_em->flush();
        }
    }

    /**
     * Find current active/inactive package.
     *
     * @param integer $adId Ad Id.
     *
     * @return mixed
     */
    public function getNextPrintEntry($adId)
    {
        $query = $this->getBaseQueryBuilder()
        ->andWhere(self::ALIAS.'.ad = :ad_id')
        ->andWhere(self::ALIAS.'.ad_moderate_status = :status')
        ->andWhere(self::ALIAS.'.is_paid = :is_paid')
        ->setParameter('ad_id', $adId)
        ->setParameter('status', AdModerateRepository::MODERATION_QUEUE_STATUS_OKAY)
        ->setParameter('is_paid', 1)
        ->orderBy(self::ALIAS.'.insert_date', 'asc')
        ->setMaxResults(1);

        return $query->getQuery()->getOneOrNullResult();
    }



    /**
     * get Print edition for an ad
     *
     * @param integer $adId Ad Id.
     *
     * @return mixed
     */
    public function getPrintEditionEntries($adId)
    {
        $query = $this->getBaseQueryBuilder()
        ->select(PrintEditionRepository::ALIAS.'.id', PrintEditionRepository::ALIAS.'.code')
        ->leftJoin(self::ALIAS.'.print_edition', PrintEditionRepository::ALIAS)
        ->andWhere(self::ALIAS.'.ad = :ad_id')
        ->andWhere(self::ALIAS.'.ad_moderate_status = :status')
        ->setParameter('ad_id', $adId)
        ->setParameter('status', AdModerateRepository::MODERATION_QUEUE_STATUS_OKAY)
        ->orderBy(self::ALIAS.'.insert_date', 'asc')
        ->groupBy(self::ALIAS.'.print_edition');

        return $query->getQuery()->getArrayResult();
    }

    /**
     * Get ad print latest entry.
     *
     * @param array   $adId                   Ad id array.
     * @param integer $startDate              Start date.
     * @param integer $endDate                End date.
     * @param boolean $getAllInsertDateFlag   Get all insert dates.
     * @param boolean $getFirstInsertDateFlag Get first insert dates by print editions.
     *
     * @return array
     */
    public function getAdPrintDetailByAdIdForAdReport($adId, $startDate, $endDate, $getAllInsertDateFlag = false, $getFirstInsertDateFlag = false)
    {
        $qb = $this->createQueryBuilder(self::ALIAS)
        ->select('IDENTITY('.self::ALIAS.'.ad) as ad_id', 'IDENTITY('.self::ALIAS.'.print_edition) as print_edition_id', self::ALIAS.'.insert_date', self::ALIAS.'.duration')
        ->innerJoin(self::ALIAS.'.ad', AdRepository::ALIAS)
        ->andwhere(self::ALIAS.'.is_paid = 1')
        ->andwhere(AdRepository::ALIAS.'.status IN (:ad_status)')
        ->setParameter('ad_status', array(BaseEntityRepository::AD_STATUS_LIVE_ID, BaseEntityRepository::AD_STATUS_IN_MODERATION_ID))
        ->andWhere(self::ALIAS.'.created_at BETWEEN '.$startDate.' AND '.$endDate);

        if (!is_array($adId)) {
            $adId = array($adId);
        }

        if (count($adId)) {
            $qb->andWhere(self::ALIAS.'.ad IN (:adId)')
            ->setParameter('adId', $adId);
        }

        $adPrints   = $qb->getQuery()->getArrayResult();
        $adPrintArr = array();
        if (count($adPrints)) {
            foreach ($adPrints as $adPrint) {
                if ($getAllInsertDateFlag) {
                    $adPrintArr[$adPrint['ad_id']][] = array(
                            'insert_date' => $adPrint['insert_date'],
                            'print_edition_id' => $adPrint['print_edition_id'],
                        );
                } elseif ($getFirstInsertDateFlag) {
                    if (!isset($adPrintArr[$adPrint['ad_id']][$adPrint['print_edition_id']])) {
                        $adPrintArr[$adPrint['ad_id']][$adPrint['print_edition_id']] = array(
                            'insert_date' => $adPrint['insert_date'],
                            'duration' => $adPrint['duration'],
                        );
                    }
                } else {
                    if (!isset($adPrintArr[$adPrint['ad_id']][$adPrint['print_edition_id']]) || (isset($adPrintArr[$adPrint['ad_id']][$adPrint['print_edition_id']]['insert_date']) && $adPrint['insert_date'] > $adPrintArr[$adPrint['ad_id']][$adPrint['print_edition_id']]['insert_date'])) {
                        $adPrintArr[$adPrint['ad_id']][$adPrint['print_edition_id']] = array(
                            'insert_date' => $adPrint['insert_date'],
                            'duration' => $adPrint['duration'],
                        );
                    }
                }
            }
        }

        return $adPrintArr;
    }

    /**
     * Add is paid filter to query
     *
     * @param boolean $isPaid
     */
    protected function addIsPaidFilter($isPaid = 0)
    {
        $this->queryBuilder->andWhere($this->getRepositoryAlias().'.is_paid = :is_paid')->setParameter('is_paid', $isPaid);
    }

    /**
     * Get ad print latest entry.
     *
     * @param integer $adId Ad id.
     *
     * @return array
     */
    public function getLastAdPrintDetailByAdIdForAdList($adId, $totalEditions, $duration)
    {
        $qb = $this->createQueryBuilder(self::ALIAS)
        ->select('IDENTITY('.self::ALIAS.'.ad) as ad_id', 'IDENTITY('.self::ALIAS.'.print_edition) as print_edition_id', self::ALIAS.'.insert_date', self::ALIAS.'.duration', self::ALIAS.'.is_paid')
        ->innerJoin(self::ALIAS.'.ad', AdRepository::ALIAS)
        ->andWhere(self::ALIAS.'.ad = :adId')
        ->setParameter('adId', $adId)
        ->setMaxResults($totalEditions * $duration)
        ->orderBy(self::ALIAS.'.id', 'DESC');

        $adPrints   = $qb->getQuery()->getArrayResult();
        $adPrintArr = array();
        if (count($adPrints)) {
            foreach ($adPrints as $adPrint) {
                $adPrintArr[$adPrint['ad_id']][] = array(
                                                    'print_edition_id' => $adPrint['print_edition_id'],
                                                    'insert_date' => $adPrint['insert_date'],
                                                 );
            }
        }

        if (count($adPrintArr)) {
            usort($adPrintArr[$adId], array($this, "compareByInsertDate"));
        }

        return $adPrintArr;
    }

    /**
     * Compare by name.
     *
     * @param integer $a Array element.
     * @param integer $b Array element.
     *
     * @return number
     */
    private function compareByInsertDate($a, $b)
    {
        return $a["insert_date"] - $b["insert_date"];
    }

    /**
     * Check paid print entry for given ads.
     *
     * @param array $adId Ad id array.
     *
     * @return array
     */
    public function checkPaidPrintEntryForAd($adId = array())
    {
        $qb = $this->createQueryBuilder(self::ALIAS)
        ->select('IDENTITY('.self::ALIAS.'.ad) as ad_id', self::ALIAS.'.id')
        ->innerJoin(self::ALIAS.'.ad', AdRepository::ALIAS)
        ->andWhere(self::ALIAS.'.is_paid = 1')
        ->groupBy(AdRepository::ALIAS.'.id');

        if (!is_array($adId)) {
            $adId = array($adId);
        }

        if (count($adId)) {
            $qb->andWhere(self::ALIAS.'.ad IN (:adId)')
            ->setParameter('adId', $adId);
        }

        $adPrints   = $qb->getQuery()->getArrayResult();
        $adPrintArr = array();
        if (count($adPrints)) {
            foreach ($adPrints as $adPrint) {
                $adPrintArr[$adPrint['ad_id']] = true;
            }
        }

        return $adPrintArr;
    }

    /**
     * Get all paid print dates.
     *
     * @param array $adId Ad id array.
     *
     * @return array
     */
    public function getAllPaidPrintEntryForAd($adId = array())
    {
        $qb = $this->createQueryBuilder(self::ALIAS)
        ->select('IDENTITY('.self::ALIAS.'.ad) as ad_id', 'IDENTITY('.self::ALIAS.'.print_edition) as print_edition_id', self::ALIAS.'.insert_date', self::ALIAS.'.duration', self::ALIAS.'.is_paid')
        ->innerJoin(self::ALIAS.'.ad', AdRepository::ALIAS)
        ->andWhere(self::ALIAS.'.is_paid = 1')
        ->orderBy(self::ALIAS.'.insert_date');

        if (!is_array($adId)) {
            $adId = array($adId);
        }

        if (count($adId)) {
            $qb->andWhere(self::ALIAS.'.ad IN (:adId)')
            ->setParameter('adId', $adId);
        }

        $adPrints   = $qb->getQuery()->getArrayResult();
        $adPrintArr = array();
        if (count($adPrints)) {
            foreach ($adPrints as $adPrint) {
                $adPrintArr[$adPrint['ad_id']][] = array(
                                                    'print_edition_id' => $adPrint['print_edition_id'],
                                                    'insert_date' => $adPrint['insert_date'],
                                                 );
            }
        }

        return $adPrintArr;
    }

    /**
     * Get all paid print dates.
     *
     * @param integer $adId Ad id.
     *
     * @return mixed
     */
    public function getLastPaidPrintEntryForAd($adId)
    {
        $qb = $this->createQueryBuilder(self::ALIAS)
        ->innerJoin(self::ALIAS.'.ad', AdRepository::ALIAS)
        ->andWhere(self::ALIAS.'.is_paid = 1')
        ->andWhere(self::ALIAS.'.ad = :adId')
        ->setParameter('adId', $adId)
        ->orderBy(self::ALIAS.'.insert_date', 'DESC')
        ->setMaxResults(1);

        return $qb->getQuery()->getOneOrNullResult();
    }

    /**
     * Get print which inserts before 4 weeks and also will be publised in future.
     *
     * @param integer $time Insert time
     * @param array   $adId Ad ids array.
     *
     * @return mixed
     */
    public function getAllPrintByGivenTimeForAd($time, $adId = array())
    {
        $qb = $this->createQueryBuilder(self::ALIAS)
                   ->select('COUNT('.self::ALIAS.'.ad) as print_count', 'IDENTITY('.self::ALIAS.'.ad) as ad_id')
                   ->innerJoin(self::ALIAS.'.ad', AdRepository::ALIAS)
                   ->andWhere(self::ALIAS.'.insert_date > :time')
                   ->setParameter('time', $time)
                   ->groupBy(self::ALIAS.'.ad');

        if (count($adId)) {
            $qb->andWhere(self::ALIAS.'.ad IN (:adId)')->setParameter('adId', $adId);
        }

        $adPrints = $qb->getQuery()->getArrayResult();

        $printAdIds = array();
        foreach ($adPrints as $adprint) {
            $printAdIds[$adprint['ad_id']] = $adprint['print_count'];
        }

        return $printAdIds;
    }
}
