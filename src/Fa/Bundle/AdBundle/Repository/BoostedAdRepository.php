<?php
/**
 * This file is part of the fa bundle.
 *
 * @copyright Copyright (c) 2018, FMG
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Fa\Bundle\AdBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Fa\Bundle\AdBundle\Entity\BoostedAd;

/**
 * BoostedAdRepository.
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 *
 * @author Rohini <rohini.subburam@fridaymediagroup.com>
 * @copyright 2018 Friday Media Group Ltd
 * @version v1.0
 */
class BoostedAdRepository extends EntityRepository
{
    use \Fa\Bundle\CoreBundle\Search\Search;

    const ALIAS = 'bsad';

    /**
     * prepareQueryBuilder.
     *
     * @param array $data Array of data.
     *
     * @return Doctrine\ORM\QueryBuilder The query builder.
     */
    public function getBaseQueryBuilder()
    {
        return $this->createQueryBuilder(self::ALIAS);
    }

    /**
     * Find the dimension by ad id.
     *
     * @param integer $adId Ad id.
     *
     * @return array
     */
    public function findByAdId($adId)
    {
        $qb = $this->getBaseQueryBuilder();

        if (!is_array($adId)) {
            $adId = array($adId);
        }

        $qb->andWhere(self::ALIAS.'.ad IN (:adId)');
        $qb->setParameter('adId', $adId);

        return $qb->getQuery()->getArrayResult();
    }

    /**
     * Get my boosted ads count.
     *
     * @param integer $userId
     *
     */
    public function getMyBoostedAdsCount($userId)
    {
        $qb = $this->createQueryBuilder(self::ALIAS);
        $qb->select('COUNT('.self::ALIAS.'.id) as total_ads');
        $qb->where(self::ALIAS.'.user = '.$userId);
        return $qb->getQuery()->getSingleScalarResult();
    }

    /**
     * Un boost ad by user id.
     *
     * @param integer $userId
     */
    public function unboostAdByUserId($userId)
    {
        $updateQuery = $this->createQueryBuilder(self::ALIAS)
        ->update()
        ->set(self::ALIAS.'.status', 2)
        ->set(self::ALIAS.'.updated_at', time())
        ->where(self::ALIAS.'.user = '.$userId)
        ->andWhere(self::ALIAS.'.status = 1');
        return $updateQuery->getQuery()->execute();
    }
}