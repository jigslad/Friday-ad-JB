<?php

/**
 * This file is part of the fa bundle.
 *
 * @copyright Copyright (c) 2014, FMG
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Fa\Bundle\AdBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpFoundation\Cookie;
use Fa\Bundle\CoreBundle\Manager\CommonManager;
use Fa\Bundle\AdBundle\Solr\AdViewCounterSolrFieldMapping;
use Fa\Bundle\AdBundle\Entity\AdViewCounter;

/**
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 *
 * @author Samir Amrutya <samiram@aspl.in>
 * @copyright 2014 Friday Media Group Ltd
 * @version v1.0
 */
class AdViewCounterRepository extends EntityRepository
{
    const ALIAS = 'avc';

    /**
     * Get query builder.
     *
     * @return Doctrine\ORM\QueryBuilder The query builder.
     */
    public function getBaseQueryBuilder()
    {
        return $this->createQueryBuilder(self::ALIAS);
    }

    /**
     * Update ad view counter from redis.
     *
     * @param object  $container Container identifier.
     * @param integer $adId      Ad id.
     */
    public function updateAdViewCounter($container, $adId)
    {
        if (!CommonManager::isBot($container)) {
            $viewAdIdArray = array_filter(explode(',', $container->get('request_stack')->getCurrentRequest()->cookies->get('ad_view_ids')));

            if (!in_array($adId, $viewAdIdArray)) {
                try {
                    $viewAdIdArray[] = $adId;
                    $response = new Response();
                    $response->headers->setCookie(new Cookie('ad_view_ids', implode(',', $viewAdIdArray), CommonManager::getTimeStampFromEndDate(date('Y-m-d'))));
                    $response->sendHeaders();
                    //CommonManager::updateCacheCounterUsingZIncr($container, 'ad_view_counter_'.strtotime(date('Y-m-d H:0')), $adId);
                    $date = strtotime(date('Y-m-d', time()));
                    $adViewCounterObj = $this->_em->getRepository('FaAdBundle:AdViewCounter')->findOneBy(array('ad' => $adId, 'created_at' => $date));
                    if (!$adViewCounterObj) {
                        $adViewCounterObj = new AdViewCounter();
                        $adViewCounterObj->setAd($this->_em->getReference('FaAdBundle:Ad', $adId));
                    }
                    $oldHits = $adViewCounterObj->getHits();
                    $adViewCounterObj->setHits($oldHits + 1);
                    $adViewCounterObj->setCreatedAt($date);
                    $this->_em->persist($adViewCounterObj);
                    $this->_em->flush();
                } catch (\Exception $e) {
                }
            }
        }
    }

    /**
     * Get ad view counter for ad id.
     *
     * @param array $adId Ad id array.
     *
     * @return array
     */
    public function getAdViewCounterArrayByAdId($adId = array())
    {
        $qb = $this->createQueryBuilder(self::ALIAS)
            ->select('SUM('.self::ALIAS.'.hits) as ad_view_counter', 'IDENTITY('.self::ALIAS.'.ad) as ad_id');

        if (!is_array($adId)) {
            $adId = array($adId);
        }

        if (count($adId)) {
            $qb->andWhere(self::ALIAS.'.ad IN (:adId)');
            $qb->setParameter('adId', $adId);
            $qb->addGroupBy(self::ALIAS.'.ad');
        }

        $adViewCounters   = $qb->getQuery()->getArrayResult();
        $adViewCounterArr = array();
        if (count($adViewCounters)) {
            foreach ($adViewCounters as $adViewCounter) {
                $adViewCounterArr[$adViewCounter['ad_id']] = $adViewCounter['ad_view_counter'];
            }
        }

        return $adViewCounterArr;
    }

    /**
     * Remove ad view counter entries by ad id.
     *
     * @param integer $adId Ad id.
     */
    public function removeByAdId($adId)
    {
        $adViewCounters = $this->getBaseQueryBuilder()
                           ->andWhere(self::ALIAS.'.ad = :adId')
                           ->setParameter('adId', $adId)
                           ->getQuery()
                           ->getResult();

        if ($adViewCounters) {
            foreach ($adViewCounters as $adViewCounter) {
                $this->_em->remove($adViewCounter);
            }
            $this->_em->flush();
        }
    }

    /**
     * Get ad view counter by preceding days.
     *
     * @param array $adId Ad id array.
     *
     * @return array
     */
    public function getAdViewCounterByPrecedingDays($days, $adId = array())
    {
        if (!is_array($adId)) {
            $adId = array($adId);
        }

        $precedingTime = strtotime('-'.$days.' day');

        $qb = $this->getBaseQueryBuilder(self::ALIAS)
                   ->andWhere(self::ALIAS.'.ad IN (:adId)')
                   ->setParameter('adId', $adId)
                   ->andWhere(self::ALIAS.'.created_at >= :precedingTime')
                   ->setParameter('precedingTime', $precedingTime);

        $adViewCounters = $qb->getQuery()->getResult();

        $adViewCounterArr = array();
        if (count($adViewCounters)) {
            foreach ($adViewCounters as $adViewCounter) {
                if (isset($adViewCounterArr[$adViewCounter->getAd()->getId()])) {
                    $adViewCounterArr[$adViewCounter->getAd()->getId()] += $adViewCounter->getHits();
                } else {
                    $adViewCounterArr[$adViewCounter->getAd()->getId()] = $adViewCounter->getHits();
                }
            }
        }

        return $adViewCounterArr;
    }

    /**
     * Get ad view counter by preceding days.
     *
     * @param array $adId Ad id array.
     *
     * @return array
     */
    public function getTotalHitViewCountByAdAndTime($time, $ad_id)
    {
        $qb = $this->getBaseQueryBuilder(self::ALIAS)
        ->select('SUM('.self::ALIAS.'.hits) AS total_hits')
        ->groupBy(self::ALIAS.'.ad')
        ->andWhere(self::ALIAS.'.ad = :adId')
        ->setParameter('adId', $ad_id)
        ->andWhere(self::ALIAS.'.created_at >= :precedingTime')
        ->setParameter('precedingTime', $time);

        $adViewCounters = $qb->getQuery()->getArrayResult();

        if (isset($adViewCounters[0]['total_hits'])) {
            return $adViewCounters[0]['total_hits'];
        }

        return 0;
    }

    /**
     * Returns ad solr document object.
     *
     * @param object $ad        Ad object.
     * @param object $container Container identifier.
     *
     * @return Apache_Solr_Document
     */
    public function getSolrDocument($ad, $container = null)
    {
        $document = new \SolrInputDocument($ad);
        $document = $this->addField($document, AdViewCounterSolrFieldMapping::ID, $ad['ad_id']);

        if (isset($ad['total_hits']) && $ad['total_hits']) {
            $document = $this->addField($document, AdViewCounterSolrFieldMapping::TOTAL_HITS_LAST_7_DAYS, $ad['total_hits']);
        }

        if (isset($ad['category_id']) && $ad['category_id']) {
            $rootCategory = $this->_em->getRepository('FaEntityBundle:Category')->getRootCategoryId($ad['category_id'], $container);
            if ($rootCategory) {
                $document = $this->addField($document, AdViewCounterSolrFieldMapping::ROOT_CATEGORY_ID, $rootCategory);
            }
        }

        $locations = $this->_em->getRepository('FaAdBundle:AdLocation')->findBy(array('ad' => $ad['ad_id']));
        foreach ($locations as $location) {
            $document = $this->addField($document, AdViewCounterSolrFieldMapping::POSTCODE, $location->getPostcode());
            $document = $this->addField($document, AdViewCounterSolrFieldMapping::DOMICILE_ID, ($location->getLocationDomicile() ? $location->getLocationDomicile()->getId() : null));
            $document = $this->addField($document, AdViewCounterSolrFieldMapping::TOWN_ID, ($location->getLocationTown() ? $location->getLocationTown()->getId() : null));
            $document = $this->addField($document, AdViewCounterSolrFieldMapping::MAIN_TOWN_ID, ($location->getLocationTown() ? $location->getLocationTown()->getId() : null));
            $document = $this->addField($document, AdViewCounterSolrFieldMapping::LATITUDE, $location->getLatitude());
            $document = $this->addField($document, AdViewCounterSolrFieldMapping::LONGITUDE, $location->getLongitude());
            $document = $this->addField($document, AdViewCounterSolrFieldMapping::LOCALITY_ID, ($location->getLocality() ? $location->getLocality()->getId() : null));

            if ($location->getLatitude() && $location->getLongitude()) {
                $document = $this->addField($document, AdViewCounterSolrFieldMapping::STORE, $location->getLatitude().','.$location->getLongitude());
            }
        }

        return $document;
    }

    /**
     * Add field to solr document.
     *
     * @param object $document Solr document object.
     * @param string $field    Field to index or store.
     * @param string $value    Value of field.
     *
     * @return object
     */
    private function addField($document, $field, $value)
    {
        if ($value != null) {
            $document->addField($field, $value);
        }

        return $document;
    }

    /**
     * Get ad view counter for ad id.
     *
     * @param array $adId Ad id array.
     * @param array $dateTimeStamp datetime.
     *
     * @return array
     */
    public function getAdViewCounterArrayByDate($date, $offset, $limit)
    {
        list($startDate, $endDate) = $this->getDateInTimeStamp($date);

        $qb = $this->createQueryBuilder(self::ALIAS)
        ->select('SUM('.self::ALIAS.'.hits) as ad_view_counter', 'IDENTITY('.self::ALIAS.'.ad) as ad_id');

        if ($startDate && $endDate) {
            $qb->andWhere('('.AdViewCounterRepository::ALIAS.'.created_at BETWEEN '.$startDate.' AND  '.$endDate.')');
            $qb->addGroupBy(self::ALIAS.'.ad');
            $qb->setMaxResults($limit);
            $qb->setFirstResult($offset);
        }

        $adViewCounters   = $qb->getQuery()->getArrayResult();
        $adViewCounterArr = array();
        if (count($adViewCounters)) {
            foreach ($adViewCounters as $adViewCounter) {
                $adViewCounterArr[$adViewCounter['ad_id']] = $adViewCounter['ad_view_counter'];
            }
        }

        return $adViewCounterArr;
    }

    /**
     * Get date in time stamp
     *
     * @param string $date Date.
     *
     * @return array
     */
    private function getDateInTimeStamp($date)
    {
        if ($date) {
            $startDate = CommonManager::getTimeStampFromStartDate(date('Y-m-d', strtotime($date)));
            $endDate   = CommonManager::getTimeStampFromEndDate(date('Y-m-d', strtotime($date)));
        } else {
            $startDate = CommonManager::getTimeStampFromStartDate(date('Y-m-d', (strtotime(date('Y-m-d'))- 24*60*60)));
            $endDate   = CommonManager::getTimeStampFromEndDate(date('Y-m-d', (strtotime(date('Y-m-d'))- 24*60*60)));
        }

        return array($startDate, $endDate);
    }
}
