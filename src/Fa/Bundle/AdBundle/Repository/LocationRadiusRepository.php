<?php

/**
 * This file is part of the fa bundle.
 *
 * @copyright Copyright (c) 2018, FMG
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Fa\Bundle\AdBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Fa\Bundle\CoreBundle\Manager\CommonManager;
use Fa\Bundle\AdBundle\Solr\AdSolrFieldMapping;

/**
 * Location radius repository.
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 *
 * @author Rohini <rohini.subburam@fridaymediagroup.com>
 * @copyright 2018 Friday Media Group Ltd
 * @version 1.0
 */
class LocationRadiusRepository extends EntityRepository
{
    use \Fa\Bundle\CoreBundle\Search\Search;

    const ALIAS = 'lr';

    /**
     * Prepare query builder.
     *
     * @param array $data Array of data.
     *
     * @return Doctrine\ORM\QueryBuilder The query builder
     */
    public function getBaseQueryBuilder()
    {
        return $this->createQueryBuilder(self::ALIAS);
    }

    
    /**
     * Add status filter.
     *
     * @param integer Status entity type.
     */
    protected function addStatusFilter($status = null)
    {
        $this->queryBuilder->andWhere($this->getRepositoryAlias().'.status = '.$status);
    }

    /**
     * Get entity table name.
     */
    private function getEntityTableName()
    {
        return $this->_em->getClassMetadata('FaAdBundle:LocationRadius')->getTableName();
    }


    /**
     * Get location radius by category Id
     *
     * @return array
     */
    public function getLocationRadiusByCategoryId($categoryId)
    {
        $qb = $this->createQueryBuilder(self::ALIAS)
        ->andWhere(self::ALIAS.'.category IN (:categoryId)')
        ->setParameter('categoryId', $categoryId);

        return $qb->getQuery()->getResult();
    }

    /**
     * Get default radius
     *
     * @return array
     */
    public function getDefaultRadius()
    {
       return $defaultRadiusChoices = array(0=>'0 Mile',2=>'2 Miles',5=>'5 Miles',10=>'10 Miles',15=>'15 Miles',20=>'20 Miles',30=>'30 Miles',50=>'50 Miles',75=>'75 Miles',100=>'100 Miles',150=>'150 Miles',200=>'200 Miles');
    }


    /**
     * Get extended radius
     *
     * @return array
     */
    public function getExtendedRadius()
    {
       return $extendedRadiusChoices = array(0=>'No extended radius',2=>'2 Miles',5=>'5 Miles',10=>'10 Miles',15=>'15 Miles',20=>'20 Miles',30=>'30 Miles',50=>'50 Miles',75=>'75 Miles',100=>'100 Miles',150=>'150 Miles',200=>'200 Miles');
    }

    /**
     * Get single location radius by category
     *
     * @return array
     */
    public function getSingleLocationRadiusByCategory($categoryId)
    {
        $categoryPathArray = array();$resultArray = array();
        $categoryPathArray = $this->_em->getRepository('FaEntityBundle:Category')->getCategoryPathDetailArrayById($categoryId);
        if(!empty($categoryPathArray)) {
            $categoryPathIds = array_column($categoryPathArray,'id');

            $qb = $this->createQueryBuilder(self::ALIAS)
            ->andWhere(self::ALIAS.'.category IN (:categoryIds)')
            ->setParameter('categoryIds', $categoryPathIds)
            ->andWhere(self::ALIAS.'.status=1')
            ->orderBy(self::ALIAS.'.category', 'desc');

            $resultObj = $qb->getQuery()->getResult();
            if(!empty($resultObj)) {
                $resultArray['categoryId'] = $resultObj[0]->getCategory()->getId();
                $resultArray['defaultRadius'] = $resultObj[0]->getDefaultRadius();
                $resultArray['extendedRadius'] = $resultObj[0]->getExtendedRadius();
            }
        }
        return $resultArray;
    }

    /**
     * Get single location radius by category Ids
     *
     * @return array
     */
    public function getSingleLocationRadiusByCategoryIds($categoryIds)
    {

        $resultArray = array();
        
        $qb = $this->createQueryBuilder(self::ALIAS)
        ->andWhere(self::ALIAS.'.category IN (:categoryIds)')
        ->setParameter('categoryIds', $categoryIds)
        ->andWhere(self::ALIAS.'.status=1')
        ->orderBy(self::ALIAS.'.category', 'desc');

        $resultObj = $qb->getQuery()->getResult();
        if(!empty($resultObj)) {
            $resultArray['categoryId'] = $resultObj[0]->getCategory()->getId();
            $resultArray['defaultRadius'] = $resultObj[0]->getDefaultRadius();
            $resultArray['extendedRadius'] = $resultObj[0]->getExtendedRadius();
        } else {
            $qb1 = $this->createQueryBuilder(self::ALIAS)
                ->andWhere(self::ALIAS.'.category IS NULL')
                ->andWhere(self::ALIAS.'.status=1')
                ->setMaxResults(1)
                ->orderBy(self::ALIAS.'.category', 'desc');
            $resultObj1 = $qb1->getQuery()->getOneOrNullResult();
            if(!empty($resultObj1)) {
                $resultArray['defaultRadius'] = $resultObj1->getDefaultRadius();
                $resultArray['extendedRadius'] = $resultObj1->getExtendedRadius();
            }
        }
        return $resultArray;
    }

        

    
}
