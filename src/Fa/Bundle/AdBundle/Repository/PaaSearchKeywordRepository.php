<?php

/**
 * This file is part of the fa bundle.
 *
 * @copyright Copyright (c) 2014, FMG
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Fa\Bundle\AdBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Fa\Bundle\AdBundle\Entity\PaaSearchKeyword;
use Fa\Bundle\EntityBundle\Repository\CategoryRepository;
/**
 * Shortlist repository.
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 *
 * @author Jigar Lad <jigar.lad@fridaymediagroup.com>
 * @copyright 2014 Friday Media Group Ltd.
 * @version 1.0
 */
class PaaSearchKeywordRepository extends EntityRepository
{
    use \Fa\Bundle\CoreBundle\Search\Search;

    const ALIAS = 'psk';

    /**
     * PrepareQueryBuilder.
     *
     * @param array $data Array of data.
     *
     * @return Doctrine\ORM\QueryBuilder The query builder.
     */
    public function getBaseQueryBuilder()
    {
        return $this->createQueryBuilder(self::ALIAS);
    }
    
    /**
     * Add keyword filter.
     *
     * @param mixed $keyword Entity type
     */
    protected function addKeywordFilter($keyword = null)
    {
        $this->queryBuilder->andWhere(sprintf('%s.keyword LIKE \'%%%s%%\'', $this->getRepositoryAlias(), $keyword));
    }

    /**
     * Add keyword partial text filter to existing query object.
     *
     * @param string $keyword Keyword.
     */
    public function addPaaSearchKeyword($keyword){
        $paaSearchKeyword = $this->findOneBy(array('keyword' => $keyword));
        if($paaSearchKeyword){
            $paaSearchKeyword->setSearchCount($paaSearchKeyword->getSearchCount()+1);
            $paaSearchKeyword->setUpdatedAt(time());
            $paaSearchKeyword->setIsUpdated(1);
        } else {
            $paaSearchKeyword = new PaaSearchKeyword();
            $paaSearchKeyword->setSearchCount(1);
            $paaSearchKeyword->setKeyword($keyword);
            $paaSearchKeyword->setCreatedAt(time());
        }
        if ($paaSearchKeyword) {
            $this->_em->persist($paaSearchKeyword);
            $this->_em->flush($paaSearchKeyword);
        }
    }
    
    public function updatePaaSearchKeyword($keyword,$catId){
        $paaSearchKeyword = $this->findOneBy(array('keyword' => $keyword,'category' =>$catId));
        if($paaSearchKeyword){
            $paaSearchKeyword->setSearchCount($paaSearchKeyword->getSearchCount()+1);
            $paaSearchKeyword->setUpdatedAt(time());
            $paaSearchKeyword->setIsUpdated(1);
        } else {
            $paaSearchKeyword = new PaaSearchKeyword();
            $paaSearchKeyword->setSearchCount(1);
            $paaSearchKeyword->setKeyword($keyword);
            $paaSearchKeyword->setCategory($this->_em->getReference('FaEntityBundle:Category', $catId));
            $paaSearchKeyword->setCreatedAt(time());
        }
        if ($paaSearchKeyword) {
            $this->_em->persist($paaSearchKeyword);
            $this->_em->flush($paaSearchKeyword);
        }
    }
}
