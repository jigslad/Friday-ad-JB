<?php

/**
 * This file is part of the fa bundle.
 *
 * @copyright Copyright (c) 2014, FMG
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Fa\Bundle\AdBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Fa\Bundle\AdBundle\Solr\AdAdultSolrFieldMapping;
use Fa\Bundle\CoreBundle\Manager\CommonManager;
use Fa\Bundle\AdBundle\Entity\AdAdult;
use Fa\Bundle\AdBundle\Solr\AdSolrFieldMapping;
use Fa\Bundle\EntityBundle\Repository\CategoryRepository;
use Fa\Bundle\EntityBundle\Repository\EntityRepository as BaseEntityRepository;
use Fa\Bundle\EntityBundle\Repository\LocationRepository;

/**
 * AdAdultRepository.
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 *
 * @author Janak Jadeja <janak@aspl.in>
 * @copyright 2014 Friday Media Group Ltd
 * @version 1.0
 */
class AdAdultRepository extends EntityRepository
{
    use \Fa\Bundle\CoreBundle\Search\Search;

    const ALIAS = 'aad';

    /**
     * Prepare query builder.
     *
     * @param array $data Array of data.
     *
     * @return Doctrine\ORM\QueryBuilder The query builder.
     */
    public function getBaseQueryBuilder()
    {
        return $this->createQueryBuilder(self::ALIAS);
    }

    /**
     * Find the dimension by ad id.
     *
     * @param integer $adId Ad id.
     *
     * @return array
     */
    public function findByAdId($adId)
    {
        $qb = $this->getBaseQueryBuilder();

        if (!is_array($adId)) {
            $adId = array($adId);
        }

        $qb->andWhere(self::ALIAS.'.ad IN (:adId)');
        $qb->setParameter('adId', $adId);

        return $qb->getQuery()->getArrayResult();
    }

    /**
     * Returns ad solr document object.
     *
     * @param object $ad Ad object.
     *
     * @return Apache_Solr_Document
     */
    public function getSolrDocument($ad, $container)
    {
        $logoURL  = null;
        $document = new \SolrInputDocument($ad);

        $categoryId = ($ad->getCategory() ? $ad->getCategory()->getId() : null);

        $document = $this->_em->getRepository('FaAdBundle:Ad')->getSolrDocument($ad, $document, $container);

        if ($ad->getUser()) {
            $businessName = ($ad->getUser()->getBusinessName() ? $ad->getUser()->getBusinessName() : null);
            if ($businessName) {
                $document = $this->addField($document, AdAdultSolrFieldMapping::BUSINESS_NAME, $businessName);
            }
        }

        // get adult object
        $adAdult = $this->findOneBy(array('ad' => $ad->getId()));

        $metaData = ($adAdult && $adAdult->getMetaData() ? unserialize($adAdult->getMetaData()) : null);
        if ($metaData && count($metaData)) {
            $document = $this->addField($document, AdAdultSolrFieldMapping::META_DATA, $adAdult->getMetaData());
            
            /*  Adding new dimensions in Solr     */
            if (isset($metaData['my_service_id'])) {
                $myServicesIds = explode(',', $metaData['my_service_id']);
                $solrFieldForMap = ($ad->getCategory()->getId() != CategoryRepository::ADULT_CONTACTS_ID?AdAdultSolrFieldMapping::MY_SERVICE_IS_FOR_ID:AdAdultSolrFieldMapping::LOOKING_FOR_ID);
                if (count($myServicesIds)) {
                    foreach ($myServicesIds as $serviceId) {
                        $document = $this->addField($document, $solrFieldForMap, $serviceId);
                    }
                }
            }
            if (isset($metaData['job_type_id']) && $metaData['job_type_id'] != '') {
                $document = $this->addField($document, AdAdultSolrFieldMapping::JOB_TYPE_ID, $metaData['job_type_id']);
            }
            if (isset($metaData['experience_id']) && $metaData['experience_id'] != '') {
                $document = $this->addField($document, AdAdultSolrFieldMapping::EXPERIENCE_ID, $metaData['experience_id']);
            }
            if (isset($metaData['ethnicity_id']) && $metaData['ethnicity_id'] != '') {
                $document = $this->addField($document, AdAdultSolrFieldMapping::ETHNICITY_ID, $metaData['ethnicity_id']);
            }
            if (isset($metaData['position_preference_id']) && $metaData['position_preference_id'] != '') {
                $document = $this->addField($document, AdAdultSolrFieldMapping::POSITION_PREFERENCE_ID, $metaData['position_preference_id']);
            }
        }

        // add services.
        if ($adAdult) {
            $servicesIds = explode(',', $adAdult->getServicesId());
            if (count($servicesIds)) {
                foreach ($servicesIds as $servicesId) {
                    $document = $this->addField($document, AdAdultSolrFieldMapping::SERVICES_ID, $servicesId);
                }
            }

            $document = $this->addField($document, AdAdultSolrFieldMapping::TRAVEL_ARRANGEMENTS_ID, $adAdult->getTravelArrangementsId());

            $document = $this->addField($document, AdAdultSolrFieldMapping::INDEPENDENT_OR_AGENCY_ID, $adAdult->getIndependentOrAgencyId());
            
            $document = $this->addField($document, AdAdultSolrFieldMapping::GENDER_ID, $adAdult->getGenderId());
        }

        // update keyword search fields.
        $keywordSearch = $this->_em->getRepository('FaAdBundle:Ad')->getKeywordSearchArray($ad, $categoryId, $adAdult, $container);
        if (count($keywordSearch)) {
            $document = $this->addField($document, AdAdultSolrFieldMapping::KEYWORD_SEARCH, implode(',', $keywordSearch));
        }

        //for business advertiser only.
        if ($ad->getIsTradeAd() && $ad->getUser()) {
            $logoURL = CommonManager::getUserLogoByUserId($container, $ad->getUser()->getId(), false, true);
        }

        $document = $this->addField($document, AdAdultSolrFieldMapping::HAS_USER_LOGO, ($logoURL ? true : false));

        return $document;
    }

    /**
     * Add field to solr document.
     *
     * @param object $document Solr document object.
     * @param string $field    Field to index or store.
     * @param string $value    Value of field.
     *
     * @return object
     */
    private function addField($document, $field, $value)
    {
        if ($value != null) {
            $document->addField($field, $value);
        }

        return $document;
    }

    /**
     * Get ad vertical data array.
     *
     * @param object $adId Ad id.
     *
     * @return array
     */
    public function getAdVerticalDataArray($adId)
    {
        $adVerticalData = $this->findByAdId($adId);
        if (count($adVerticalData)) {
            return array_filter($adVerticalData[0], 'strlen');
        }

        return array();
    }

    /**
     * Remove ad from vertical by ad id.
     *
     * @param integer $adId Ad id.
     */
    public function removeByAdId($adId)
    {
        $adVertical = $this->createQueryBuilder(self::ALIAS)
        ->andWhere(self::ALIAS.'.ad = :adId')
        ->setParameter('adId', $adId)
        ->getQuery()
        ->getOneOrNullResult();

        if ($adVertical) {
            $this->_em->remove($adVertical);
            $this->_em->flush($adVertical);
        }
    }

    /**
     * Get ad listing fields.
     *
     * @return array
     */
    public function getAdListingFields()
    {
        $adListingFields['BUSINESS_NAME'] = 'BUSINESS_NAME';

        return $adListingFields;
    }

    /**
     * Get ad fields.
     *
     * @return array
     */
    public function getAllFields()
    {
        return array(
            'services_id',
            'travel_arrangements_id',
            'independent_or_agency_id',
            'gender_id',
            'ethnicity_id',
            'my_service_id',
            'experience_id',
            'rates_id',
            'job_type_id',
            'position_preference_id'
        );
    }

    /**
     * Get ad not-inexed fields.
     *
     * @return array
     */
    public function getNotIndexedFields()
    {
        return array(
                'ethnicity_id',
                'my_service_id',
                'experience_id',
                'rates_id',
                'job_type_id',
                'position_preference_id'
        );
    }

    /**
     * Get ad inexed fields.
     *
     * @return array
     */
    public function getIndexedFields()
    {
        return array(
            'services_id',
            'travel_arrangements_id',
            'independent_or_agency_id',
            'gender_id'
        );
    }

    /**
     * Update data from moderation.
     *
     * @param array $data Data from moderation.
     */
    public function updateDataFromModeration($data)
    {
        foreach ($data as $element) {
            $object = null;
            if (isset($element['id'])) {
                $object = $this->findOneBy(array('id' => $element['id']));
            } else {
                $object = $this->findOneBy(array('ad' => $element['ad_id']));
            }

            if (!$object && isset($element['ad_id'])) {
                $object = new AdAdult();
                $ad = $this->_em->getRepository('FaAdBundle:Ad')->findOneBy(array('id' => $element['ad_id']));
                if ($ad) {
                    $object->setAd($ad);
                }
            }

            foreach ($element as $field => $value) {
                $methodName = 'set'.str_replace(' ', '', ucwords(str_replace('_', ' ', $field)));
                if (method_exists($object, $methodName) === true) {
                    if ($value === '') {
                        $value = null;
                    }
                    $object->$methodName($value);
                }
            }
            if ($object) {
                $this->_em->persist($object);
                $this->_em->flush($object);
            }
        }
    }

    /**
     * Get other features.
     *
     * @param array $element Element from moderation.
     *
     * @return object
     */
    public function setObjectFromModerationData($element)
    {
        if (isset($element['id'])) {
            $object = $this->findOneBy(array('id' => $element['id']));
        } else {
            $object = $this->findOneBy(array('ad' => $element['ad_id']));
        }

        foreach ($element as $field => $value) {
            $methodName = 'set'.str_replace(' ', '', ucwords(str_replace('_', ' ', $field)));
            if (method_exists($object, $methodName) === true) {
                $object->$methodName($value);
            }
        }

        return $object;
    }

    /**
     * Get common sorting array.
     *
     * @param object $container Container identifier.
     *
     * @return array
     */
    public function getSortingArray($container)
    {
        $translator                        = CommonManager::getTranslator($container);
        $sortingArray['user__rating|desc'] = $translator->trans('User rating');

        return $sortingArray;
    }

    /**
     * Get featured adult business.
     *
     * @param object  $container     Container identifier.
     * @param array   $searchParams  Search parameters.
     *
     * @return array
     */
    public function getFeaturedAdultBusinesses($container, $searchParams)
    {
        $adultFeaturedBusinesses = $this->_em->getRepository('FaUserBundle:UserUpsell')->getUserArrayWithFeaturedAdultBusinessUpsell($container);
        $adultFeaturedBusinessIds = array();
        $adultBusinesses = array();
        if (count($adultFeaturedBusinesses)) {
            shuffle($adultFeaturedBusinesses);
            for ($i = 0; $i < 12; $i++) {
                if (isset($adultFeaturedBusinesses[$i])) {
                    $adultBusinesses[] = $adultFeaturedBusinesses[$i];
                    $adultFeaturedBusinessIds[] = $adultFeaturedBusinesses[$i]['id'];
                }
            }
        }

        $totalAdultBusinessCount = count($adultBusinesses);
        if (!$totalAdultBusinessCount) {
            $adultBusinessUsers = $this->getAdultBusiness($container, $searchParams, (count($adultFeaturedBusinessIds) ? ' AND -'.AdSolrFieldMapping::USER_ID.': ("'.implode('" "', $adultFeaturedBusinessIds).'")' : null), false, true);
            for ($i = 0; $i < (12 - $totalAdultBusinessCount); $i++) {
                if (isset($adultBusinessUsers[$i])) {
                    $adultBusinesses[$i+$totalAdultBusinessCount] = $adultBusinessUsers[$i];
                }
            }
        }

        return $adultBusinesses;
    }

    /**
     * Get featured adult business.
     *
     * @param object  $container     Container identifier.
     * @param array   $searchParams  Search parameters.
     * @param string  $staticFilters Static filters.
     * @param boolean $randomSort    Boolean true / false.
     * @param boolean $hasUserLogo   Boolean true / false.
     *
     * @return array
     */
    public function getAdultBusiness($container, $searchParams, $staticFilters = null, $randomSort = false, $hasUserLogo = false)
    {
        // If ad owner has logo
        if ($hasUserLogo) {
            $searchParams = $searchParams + array('ad_adult__has_user_logo' => 1);
        }

        $searchParams = $searchParams + array('ad__ad_user_business_category_id' => CategoryRepository::ADULT_ID);

        $data           = array();
        $data['search'] = $searchParams;
        $data['search']['item__status_id'] = BaseEntityRepository::AD_STATUS_LIVE_ID;

        $container->get('fa.searchfilters.manager')->init($this->_em->getRepository('FaAdBundle:Ad'), $this->_em->getClassMetadata('FaAdBundle:Ad'), 'search', $data);
        $data = $container->get('fa.searchfilters.manager')->getFiltersData();

        if (isset($data['search']['item__location']) && $data['search']['item__location'] != LocationRepository::COUNTY_ID) {
            $data['query_filters']['item']['location'] = $data['search']['item__location'].'|'.$data['search']['item__distance'];
        }

        $data['query_sorter'] = array();
        if ($randomSort) {
            $data['query_sorter']['item']['random'] = array('sort_ord' => 'desc', 'field_ord' => 1);
        } else {
            $data['query_sorter']['item']['weekly_refresh_published_at'] = array('sort_ord' => 'desc', 'field_ord' => 1);
        }

        // List no affliate
        $data['query_filters']['item']['is_affiliate_ad'] = 0;

        $data['select_fields']  = array('item' => array('user_id'));
        $data['group_fields'] = array(
            AdSolrFieldMapping::USER_ID => array('limit' => 1),
        );
        if ($staticFilters) {
            $data['static_filters'] = $staticFilters;
        }
        // initialize solr search manager service and fetch data based of above prepared search options
        $solrSearchManager = $container->get('fa.solrsearch.manager');
        $solrSearchManager->init('ad', null, $data, 1, 12, 0, true);
        $solrResponse = $solrSearchManager->getSolrResponse();
        $facetResult = $container->get('fa.solrsearch.manager')->getSolrResponseGroupFields($solrResponse);
        $userDetails = array();
        if (isset($facetResult[AdSolrFieldMapping::USER_ID]) && isset($facetResult[AdSolrFieldMapping::USER_ID]['groups']) && count($facetResult[AdSolrFieldMapping::USER_ID]['groups'])) {
            $adUsers = $facetResult[AdSolrFieldMapping::USER_ID]['groups'];
            foreach ($adUsers as $userCnt => $adUser) {
                $adUser = get_object_vars($adUser);
                if (isset($adUser['doclist']['docs']) && count($adUser['doclist']['docs'])) {
                    if (isset($adUser['doclist']['docs'][0][AdSolrFieldMapping::USER_ID]) && $adUser['doclist']['docs'][0][AdSolrFieldMapping::USER_ID]) {
                        $userDetails[] = array(
                            'id' => $adUser['doclist']['docs'][0][AdSolrFieldMapping::USER_ID],
                            'shop_name' => $this->_em->getRepository('FaUserBundle:User')->getUserProfileName($adUser['doclist']['docs'][0][AdSolrFieldMapping::USER_ID], $container),
                        );
                    }
                }
            }
        }

        return $userDetails;
    }
    
    /**
     * Amend Adult Service string
     * @param array $data    Array Data to amend the string
     *
     * @return string
     */
    public function getAdultAmendString($serviceData)
    {
        $str = '';
        $i = 1;
        
        if (is_array($serviceData)) {
            $serviceData= implode(',', array_values($serviceData));
        }
        
        if ($serviceData!= '') {
            $data = explode(',', $serviceData);
            $count = count($data);
            foreach ($data as $val) {
                $str .= $val;
                if (($count == '2' && $i < '2') || ($count == '3' and $i == '2')) {
                    $str .= ' and ';
                } elseif ($i == '1' && $count == '3') {
                    $str .= ',';
                }
                $i++;
            }
        }
        
        return $str;
    }
}
