<?php

/**
 * This file is part of the fa bundle.
 *
 * @copyright Copyright (c) 2014, FMG
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Fa\Bundle\AdBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Fa\Bundle\AdBundle\Entity\AdFavorite;
use Fa\Bundle\CoreBundle\Manager\CommonManager;
use Fa\Bundle\UserBundle\Repository\UserRepository;
use Fa\Bundle\EntityBundle\Repository\EntityRepository as BaseEntityRepository;

/**
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 *
 * @author Samir Amrutya <samiram@aspl.in>
 * @copyright 2014 Friday Media Group Ltd
 * @version v1.0
 */
class AdFavoriteRepository extends EntityRepository
{
    const ALIAS = 'af';

    /**
     * PrepareQueryBuilder.
     *
     * @param array $data Array of data.
     *
     * @return Doctrine\ORM\QueryBuilder The query builder.
     */
    public function getBaseQueryBuilder()
    {
        return $this->createQueryBuilder(self::ALIAS);
    }

    /**
     * Check given value is string or integer.
     *
     * @param string|integer $userId User id or session id.
     */
    public function checkIsLoggedInUserId($userId)
    {
        return preg_match('/^-?\d+$/', $userId);
    }

    /**
     * Get favorite user ads query.
     *
     * @param array $userId User id array.
     *
     * @return QueryBuilder
     */
    public function getFavoriteAdQueryByUserId($userId)
    {
        $query = $this->createQueryBuilder(self::ALIAS)
            ->leftJoin(self::ALIAS.'.ad', AdRepository::ALIAS)
            ->leftJoin(self::ALIAS.'.user', UserRepository::ALIAS);

        if ($this->checkIsLoggedInUserId($userId)) {
            $query->andWhere(self::ALIAS.'.user = :userId')
                ->setParameter('userId', $userId);
        } else {
            $query->andWhere(self::ALIAS.'.session_id = :session_id')
                ->setParameter('session_id', $userId);
        }

        return $query;
    }

    /**
     * Get table name.
     *
     * @return string
     */
    private function getAdFavoriteTableName()
    {
        return $this->_em->getClassMetadata('FaAdBundle:AdFavorite')->getTableName();
    }

    /**
     * Get favorite user ads.
     *
     * @param array  $userId    User id array.
     * @param object $container Container identifier.
     *
     * @return array
     */
    public function getFavoriteAdByUserId($userId, $container = null)
    {
        if ($container) {
            $culture     = CommonManager::getCurrentCulture($container);
            $tableName   = $this->getAdFavoriteTableName();
            $cacheKey    = $tableName.'|'.__FUNCTION__.'|'.$userId.'_'.$culture;
            $cachedValue = CommonManager::getCacheVersion($container, $cacheKey);

            if ($cachedValue !== false) {
                return $cachedValue;
            }
        }

        $adFavoriteArray = array();
        $query           = $this->getFavoriteAdQueryByUserId($userId);

        $adFavorites = $query->getQuery()->getResult();

        foreach ($adFavorites as $adFavorite) {
            $adFavoriteArray[] = $adFavorite->getAd()->getId();
        }

        if ($container) {
            if (!CommonManager::isBot($container)) {
                CommonManager::setCacheVersion($container, $cacheKey, $adFavoriteArray, 900);
            }
        }
        return $adFavoriteArray;
    }

    /**
     * Add ad to favorite.
     *
     * @param object         $ad     Ad object.
     * @param integer|string $userId User id or session id.
     *
     * @return number
     */
    public function addAdToFavorite($ad, $userId)
    {
        $adFavorite = new AdFavorite();
        $adFavorite->setAd($ad);
        if ($this->checkIsLoggedInUserId($userId)) {
            $adFavorite->setUser($this->_em->getReference('FaUserBundle:User', $userId));
        } else {
            $adFavorite->setSessionId($userId);
        }

        $this->_em->persist($adFavorite);
        $this->_em->flush($adFavorite);

        return $adFavorite->getId();
    }

    /**
     * Remove ad from favorite.
     *
     * @param object         $ad     Ad object.
     * @param integer|string $userId User id or session id
     *
     * @return mixed
     */
    public function removeFromFavorite($ad, $userId = null)
    {
        $query = $this->createQueryBuilder(self::ALIAS)
            ->andWhere(self::ALIAS.'.ad = :adId')
            ->setParameter('adId', $ad->getId());

        if ($userId) {
            if ($this->checkIsLoggedInUserId($userId)) {
                $query->andWhere(self::ALIAS.'.user = :userId')
                    ->setParameter('userId', $userId);
            } else {
                $query->andWhere(self::ALIAS.'.session_id = :session_id')
                    ->setParameter('session_id', $userId);
            }
        }

        $adFavorites = $query->getQuery()->getResult();

        //remove favorite ad from table.
        if ($adFavorites) {
            foreach ($adFavorites as $adFavorite) {
                $this->_em->remove($adFavorite);
            }
            $this->_em->flush();
            return true;
        } else {
            return false;
        }
    }

    /**
     * Move temporary favoriteAds.
     *
     * @param integer $sessionId
     * @param integer $userId
     */
    public function moveTemporaryFavoriteAds($sessionId, $userId)
    {
        $query          = $this->getFavoriteAdQueryByUserId($sessionId);
        $adTmpFavorites = $query->getQuery()->getResult();
        $adFavoriteIds  = $this->getFavoriteAdByUserId($userId);

        if ($adTmpFavorites) {
            foreach ($adTmpFavorites as $adTmpFavorite) {
                if ($adTmpFavorite->getAd()  && !in_array($adTmpFavorite->getAd()->getId(), $adFavoriteIds) && ($adTmpFavorite->getAd()->getUser() && $userId != $adTmpFavorite->getAd()->getUser()->getId() || !$adTmpFavorite->getAd()->getUser())) {
                    $adTmpFavorite->setSessionId(null);
                    $adTmpFavorite->setUser($this->_em->getReference('FaUserBundle:User', $userId));
                    $this->_em->persist($adTmpFavorite);
                } else {
                    $this->_em->remove($adTmpFavorite);
                }
            }

            $this->_em->flush();
        }
    }

    /**
     * Remove ad from favorite by ad id.
     *
     * @param integer $adId Ad id.
     */
    public function removeByAdId($adId)
    {
        $adFavorites = $this->getBaseQueryBuilder()
                            ->andWhere(self::ALIAS.'.ad = :adId')
                            ->setParameter('adId', $adId)
                            ->getQuery()
                            ->getResult();

        //remove favorite ad from table.
        if ($adFavorites) {
            foreach ($adFavorites as $adFavorite) {
                $this->_em->remove($adFavorite);
            }
            $this->_em->flush();
        }
    }
}
