<?php

namespace Fa\Bundle\AdBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Fa\Bundle\AdBundle\Entity\Campaigns;
use Fa\Bundle\AdBundle\Entity\PaaLiteFieldRule;

/**
 * CampaignsRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CampaignsRepository extends EntityRepository
{
    use \Fa\Bundle\CoreBundle\Search\Search;
    const ALIAS = 'cmp';
    /**
     * Prepare query builder.
     *
     * @param array $data
     *          Array of data.
     *
     * @return Doctrine\ORM\QueryBuilder The query builder.
     */
    public function getBaseQueryBuilder()
    {
        return $this->createQueryBuilder(self::ALIAS);
    }

    public function getClassName()
    {
        return parent::getClassName(); // TODO: Change the autogenerated stub
    }

    /*
     * todo NOT USED
     */
    public function getAllCampaignsWithCatTree()
    {
        $response = [
            'code' => 400,
            'data' => null,
            'msg' => 'No data.'
        ];

        $conn = $this->_em->getConnection();
        $query = "select c2.id as, c1.id as type_id, c2.parent_id from paa_forms as pfo join category as c2 on c2.id = pfo.category_id join category as c1 on (c1.lft < c2.lft and c1.rgt > c2.rgt and c1.lvl = 1)";
        $stmt = $conn->prepare($query);
        $stmt->execute();
        $objResources = $stmt->fetchAll();
        if ($objResources) {
            $response['data'] = $objResources;
            $response['code'] = 200;
            $response['msg'] = "All results matching the criteria.";
        }

        return $response;
    }

    /**
     * Add form page_title filter to existing query object
     *
     * @param string $page_title title
     *
     * @return void
     */
    protected function addPageTitleFilter($page_title = null)
    {
        $this->queryBuilder->andWhere(sprintf('%s.pageTitle LIKE \'%%%s%%\'', $this->getRepositoryAlias(), $page_title));
    }

    /**
     * Add form text filter to existing query object
     *
     * @param string $text
     *
     * @return void
     */
    protected function addCampaignNameFilter($text = null)
    {
        $this->queryBuilder->andWhere(sprintf('%s.campaignName LIKE \'%%%s%%\'', $this->getRepositoryAlias(), $text));
    }

    /**
     * Add form status filter to existing query object
     *
     * @param string $status
     *
     * @return void
     */
    protected function addCampaignStatusFilter($status = null)
    {
        $this->queryBuilder->andWhere(sprintf('%s.campaignStatus = %d', $this->getRepositoryAlias(), $status));
    }


    /**
    * Get total count of Campaigns
    */
    public function getCampaignCount()
    {
        $results = $this->createQueryBuilder(self::ALIAS)
        ->select('count('.self::ALIAS.')')
        ->getQuery()
        ->getSingleScalarResult();
        return $results;
    }

    /**
    * Get active Campaigns
    */
    public function getActiveCampaigns()
    {
        $results = $this->createQueryBuilder(self::ALIAS)
        ->where(self::ALIAS.'.campaignStatus=1')
        ->getQuery()
        ->getResult();
        return $results;
    }

    /**
    * Get Campaign Name By Id
    */
    public function getCampaignNameById($campaignId)
    {
        $results = $this->createQueryBuilder(self::ALIAS)
        ->where(self::ALIAS.'.id=', $campaignId)
        ->getQuery()
        ->getResult();
        return $results->getCampaignName();
    }

    /**
    * Get Campaign By Id
    */
    public function getCampaignById($campaignId)
    {
        $results = $this->createQueryBuilder(self::ALIAS)
        ->where(self::ALIAS.'.id=', $campaignId)
        ->getQuery()
        ->getResult();
        return $results->getCampaign();
    }

    /**
    * Get Campaign By Name
    */
    public function getCampaignByName($campaignName)
    {
        $results = $this->createQueryBuilder(self::ALIAS)
        ->where(self::ALIAS.".campaignName = :campaignName")
        ->setParameter('campaignName', $campaignName)
        ->andWhere(self::ALIAS.'.campaignStatus=1')
        ->getQuery()
        ->getResult();
        return $results;
    }

    /**
    * Get Campaign By Slug
    */
    public function getCampaignBySlug($campaignSlug)
    {
        $results = $this->createQueryBuilder(self::ALIAS)
        ->where(self::ALIAS.".slug = :campaignSlug")
        ->setParameter('campaignSlug', $campaignSlug)
        ->andWhere(self::ALIAS.'.campaignStatus=1')
        ->getQuery()
        ->getResult();
        return $results;
    }

    /**
    * Get Campaign By Category
    */
    public function getCampaignByCategory($categoryId)
    {
        $results = $this->createQueryBuilder(self::ALIAS)
        ->where(self::ALIAS.".category = :categoryId")
        ->setParameter('categoryId', $categoryId)
        ->getQuery()
        ->getResult();
        return $results;
    }

    /**
    * Get Campaign By imploded CategoryIds
    */
    public function getCampaignForParentCategory($implodedCategoryIds)
    {
        $results = $this->createQueryBuilder(self::ALIAS)
        ->where(self::ALIAS.".category IN (:categoryId)")
        ->setParameter('categoryId', $implodedCategoryIds)
        ->addOrderBy(self::ALIAS.'.category', 'DESC')
        ->setMaxResults(1);

        return $results->getQuery()->getOneOrNullResult();
    }

    /**
     * Save campaign.
     *
     * @param object  $copiedcampaign     Campaign object.
     */
    public function copyAndSave($copiedcampaign, $categoryId, $container=null)
    {
        $campaign = new Campaigns();
        //$campaign->setBackgroundFile($copiedcampaign->getBackgroundFile());
        //$campaign->setCampaignBackgroundFileName($copiedcampaign->getCampaignBackgroundFileName());
        
        $category = $this->_em->getRepository('FaEntityBundle:Category')->findOneBy(array('id' => $categoryId));
        $campaign->setCategory($category);
        
        /*$campaign->setCampaignName($copiedcampaign->getCampaignName());
        $campaign->setPageTitle($copiedcampaign->getPageTitle());
        $campaign->setPageTitleColor($copiedcampaign->getPageTitleColor());
        $campaign->setSeoPageDescription($copiedcampaign->getSeoPageDescription());
        $campaign->setSeoPageTitle($copiedcampaign->getSeoPageTitle());
        $campaign->setSeoPageKeywords($copiedcampaign->getSeoPageKeywords());
        $campaign->setFormFillTimes($copiedcampaign->getFormFillTimes());
        $campaign->setDiscountCode($copiedcampaign->getDiscountCode());
        $campaign->setIntroText($copiedcampaign->getIntroText());
        $campaign->setSlug($copiedcampaign->getSlug().'_subcategory');*/
        
        $campaign->setCampaignStatus($copiedcampaign->getCampaignStatus());
        $this->_em->persist($campaign);
        $this->_em->flush($campaign);
        $this->copyAndSavePaaLiteFieldRules($copiedcampaign->getId(), $category, $campaign);
        $container->get('session')->set('copyandsaved_data', 1);
        return $campaign->getId();
    }

    /**
     * Save paa field rule in create mode.
     *
     * @param object  $copyCampaignId
     * @param object  $category Select category instance.
     */
    private function copyAndSavePaaLiteFieldRules($copyCampaignId, $category, $campaign)
    {
        $paaLiteFields = $this->_em->getRepository('FaAdBundle:PaaField')->getAllPaaFields($category->getId());
        $paaLiteRuleIds = $this->_em->getRepository('FaAdBundle:PaaLiteFieldRule')->getPaaLiteFieldsByCampId($copyCampaignId);
        $ordSeq = 1;
        foreach ($paaLiteFields as $PaaLiteField) {
            $PaaLiteFieldRule = new PaaLiteFieldRule();
            $PaaLiteFieldRule->setCategory($category);
            $PaaLiteFieldRule->setCampaign($campaign);
 
            if (in_array($PaaLiteField->getId(), $paaLiteRuleIds)) {
                $existingPaaFieldRule = $this->_em->getRepository('FaAdBundle:PaaLiteFieldRule')->getDetailByCampaignIdPaaField($PaaLiteField, $copyCampaignId);
                $newPaaLiteField = $existingPaaFieldRule[0];
                $PaaLiteFieldRule->setIsAdded(1);
                $PaaLiteFieldRule->setPaaLiteField($newPaaLiteField->getPaaLiteField());
                $PaaLiteFieldRule->setOrd($ordSeq);
                $ordSeq++;
            } else {
                $newPaaLiteField = $this->_em->getRepository('FaAdBundle:PaaFieldRule')->findOneBy(array('paa_field' => $PaaLiteField->getId()));
                $PaaLiteFieldRule->setIsAdded(0);
                $PaaLiteFieldRule->setPaaLiteField($newPaaLiteField->getPaaField());
                $PaaLiteFieldRule->setOrd($newPaaLiteField->getOrd());
            }

            $PaaLiteFieldRule->setLabel($newPaaLiteField->getLabel());
            $PaaLiteFieldRule->setPlaceholderText($newPaaLiteField->getPlaceholderText());
            $PaaLiteFieldRule->setStatus($newPaaLiteField->getStatus());
            $PaaLiteFieldRule->setIsRequired($newPaaLiteField->getIsRequired());
            $PaaLiteFieldRule->setIsRecommended($newPaaLiteField->getIsRecommended());
            $PaaLiteFieldRule->setHelpText($newPaaLiteField->getHelpText());
            $PaaLiteFieldRule->setErrorText($newPaaLiteField->getErrorText());
            $PaaLiteFieldRule->setDefaultValue($newPaaLiteField->getDefaultValue());
            $PaaLiteFieldRule->setMinValue($newPaaLiteField->getMinValue());
            $PaaLiteFieldRule->setMaxValue($newPaaLiteField->getMaxValue());
            $PaaLiteFieldRule->setStep($newPaaLiteField->getStep());
            
            $PaaLiteFieldRule->setMinMaxType($newPaaLiteField->getMinMaxType());
            
            $this->_em->persist($PaaLiteFieldRule);
            $this->_em->flush();
        }
    }
}
