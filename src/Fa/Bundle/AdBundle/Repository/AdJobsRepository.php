<?php

/**
 * This file is part of the fa bundle.
 *
 * @copyright Copyright (c) 2014, FMG
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Fa\Bundle\AdBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Fa\Bundle\AdBundle\Solr\AdJobsSolrFieldMapping;
use Fa\Bundle\AdBundle\Entity\AdJobs;
use Fa\Bundle\CoreBundle\Manager\CommonManager;

/**
 * AdJobsRepository.
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 *
 * @author Janak Jadeja <janak@aspl.in>
 * @copyright 2014 Friday Media Group Ltd
 * @version v1.0
 */
class AdJobsRepository extends EntityRepository
{
    use \Fa\Bundle\CoreBundle\Search\Search;

    const ALIAS = 'afj';

    /**
     * prepareQueryBuilder.
     *
     * @param array $data Array of data.
     *
     * @return Doctrine\ORM\QueryBuilder The query builder
     */
    public function getBaseQueryBuilder()
    {
        return $this->createQueryBuilder(self::ALIAS);
    }

    /**
     * Find the dimension by ad id.
     *
     * @param integer $adId Ad id.
     *
     * @return array
     */
    public function findByAdId($adId)
    {
        $qb = $this->getBaseQueryBuilder();

        if (!is_array($adId)) {
            $adId = array($adId);
        }

        $qb->andWhere(self::ALIAS.'.ad IN (:adId)');
        $qb->setParameter('adId', $adId);

        return $qb->getQuery()->getArrayResult();
    }

    /**
     * Returns ad solr document object.
     *
     * @param object $ad        Ad object.
     * @param object $container Container object.
     *
     * @return Apache_Solr_Document
     */
    public function getSolrDocument($ad, $container)
    {
        $document = new \SolrInputDocument($ad);
        $logoURL  = null;

        $document = $this->_em->getRepository('FaAdBundle:Ad')->getSolrDocument($ad, $document, $container);

        $categoryId = ($ad->getCategory() ? $ad->getCategory()->getId() : null);
        // get for sale object
        $adJobs = $this->findOneBy(array('ad' => $ad->getId()));

        if ($adJobs) {
            $document = $this->addField($document, AdJobsSolrFieldMapping::META_DATA, $adJobs->getMetaData());

            // add contract types.
            $contractTypeIds = explode(',', $adJobs->getContractTypeId());
            if (count($contractTypeIds)) {
                foreach ($contractTypeIds as $contractTypeId) {
                    $document = $this->addField($document, AdJobsSolrFieldMapping::CONTRACT_TYPE_ID, $contractTypeId);
                }
            }

            // add salary band.
            $document = $this->addField($document, AdJobsSolrFieldMapping::SALARY_BAND_ID, $adJobs->getSalaryBandId());

            if ($adJobs->isJobOfWeekAd($container)) {
                $document = $this->addField($document, AdJobsSolrFieldMapping::IS_JOB_OF_WEEK, 1);
            }

            //for business advertiser only.
            if ($ad->getIsTradeAd() && $ad->getUser()) {
                $logoURL = CommonManager::getUserLogoByUserId($container, $ad->getUser()->getId(), false, true);
            }

            //feed ad salary
            $document = $this->addField($document, AdJobsSolrFieldMapping::FEED_AD_SALARY, $adJobs->getFeedAdSalary());

            $document = $this->addField($document, AdJobsSolrFieldMapping::HAS_USER_LOGO, ($logoURL ? true : false));
        }

        // update keyword search fields.
        $keywordSearch = $this->_em->getRepository('FaAdBundle:Ad')->getKeywordSearchArray($ad, $categoryId, $adJobs, $container);
        if (count($keywordSearch)) {
            $document = $this->addField($document, AdJobsSolrFieldMapping::KEYWORD_SEARCH, implode(',', $keywordSearch));
        }

        return $document;
    }

    /**
     * @param $ad
     * @param $container
     * @return object|\SolrInputDocument
     */
    public function getSolrDocumentNew($ad, $container)
    {
        $document = new \SolrInputDocument($ad);

        $document = $this->_em->getRepository('FaAdBundle:Ad')->getSolrDocumentNew($ad, $document, $container);

        $categoryId = ($ad->getCategory() ? $ad->getCategory()->getId() : null);
        // get for sale object
        $adJobs = $this->findOneBy(array('ad' => $ad->getId()));

        if ($adJobs) {
            $entityRepository = $this->_em->getRepository('FaEntityBundle:Entity');
            $listingDimensions = $this->getAdListingFields();
            $document = $this->addField($document, 'meta_values', $adJobs->getMetaData());
            $adRepository = $this->_em->getRepository('FaAdBundle:Ad');

            // add contract types.
            $contractTypeIds = explode(',', $adJobs->getContractTypeId());
            if (count($contractTypeIds)) {
                foreach ($contractTypeIds as $contractTypeId) {
                    $document = $this->addField($document, $adRepository->getSolrFieldName($listingDimensions, 'contract_type'), $entityRepository->getCachedEntityById($container, $contractTypeId));
                }
            }

            // add salary band.
            $document = $this->addField($document, $adRepository->getSolrFieldName($listingDimensions, 'salary_band'), $entityRepository->getCachedEntityById($container, $adJobs->getSalaryBandId()));

            if ($adJobs->isJobOfWeekAd($container)) {
                $document = $this->addField($document, $adRepository->getSolrFieldName($listingDimensions, 'is_job_of_the_week', false), 1);
            }

            //for business advertiser only.
            if ($ad->getIsTradeAd() && $ad->getUser()) {
                $logoURL = CommonManager::getUserLogoByUserId($container, $ad->getUser()->getId(), false, true);
            }

            //feed ad salary
            $document = $this->addField($document, $adRepository->getSolrFieldName($listingDimensions, 'feed_ad_salary', false), $adJobs->getFeedAdSalary());

            $document = $this->addField($document, 'has_user_logo', ($logoURL ? true : false));
        }

        // update keyword search fields.
        $keywordSearch = $this->_em->getRepository('FaAdBundle:Ad')->getKeywordSearchArray($ad, $categoryId, $adJobs, $container);
        if (count($keywordSearch)) {
            $document = $this->addField($document, 'keyword_search', implode(',', $keywordSearch));
        }

        return $document;
    }

    /**
     * Add field to solr document.
     *
     * @param object $document Solr document object.
     * @param string $field    Field to index or store.
     * @param string $value    Value of field.
     *
     * @return object
     */
    private function addField($document, $field, $value)
    {
        if ($value != null) {
            $document->addField($field, $value);
        }

        return $document;
    }

    /**
     * Get ad listing fields.
     *
     * @return array
     */
    public function getAdListingFields()
    {
        $adListingFields['CONTRACT_TYPE_ID|FaEntityBundle:Entity'] = 'CONTRACT_TYPE_ID';
        $adListingFields['SALARY']                                 = 'SALARY';
        $adListingFields['FEED_AD_SALARY']                         = 'FEED_AD_SALARY';

        return $adListingFields;
    }

    /**
     * Get ad forsale fields.
     *
     * @return array
     */
    public function getAllFields()
    {
        return array(
            'salary',
            'additional_job_requirements_id',
            'additional_benefits_id',
            'education_level_id',
            'years_experience_id',
            'salary_type_id',
            'salary_band_id',
            'contract_type_id'
        );
    }

    /**
     * Get ad not-inexed forsale fields.
     *
     * @return array
     */
    public function getNotIndexedFields()
    {
        return array(
            'salary',
            'additional_job_requirements_id',
            'additional_benefits_id',
            'education_level_id',
            'years_experience_id',
            'salary_type_id'
        );
    }

    /**
     * Get ad inexed forsale fields.
     *
     * @return array
     */
    public function getIndexedFields()
    {
        return array(
            'contract_type_id',
            'salary_band_id',
            'feed_ad_salary',
        );
    }

    /**
     * Get ad vertical data array.
     *
     * @param object $adId Ad id.
     *
     * @return array
     */
    public function getAdVerticalDataArray($adId)
    {
        $adVerticalData = $this->findByAdId($adId);
        if (count($adVerticalData)) {
            return array_filter($adVerticalData[0], 'strlen');
        }

        return array();
    }

    /**
     * Remove ad from vertical by ad id.
     *
     * @param integer $adId Ad id.
     */
    public function removeByAdId($adId)
    {
        $adVertical = $this->createQueryBuilder(self::ALIAS)
        ->andWhere(self::ALIAS.'.ad = :adId')
        ->setParameter('adId', $adId)
        ->getQuery()
        ->getOneOrNullResult();

        if ($adVertical) {
            $this->_em->remove($adVertical);
            $this->_em->flush($adVertical);
        }
    }

    /**
     * Set data on object from moderation.
     *
     * @param array $element Element from moderation.
     *
     * @return object
     */
    public function setObjectFromModerationData($element)
    {
        if (isset($element['id'])) {
            $object = $this->findOneBy(array('id' => $element['id']));
        } else {
            $object = $this->findOneBy(array('ad' => $element['ad_id']));
        }

        foreach ($element as $field => $value) {
            $methodName = 'set'.str_replace(' ', '', ucwords(str_replace('_', ' ', $field)));
            if (method_exists($object, $methodName) === true) {
                $object->$methodName($value);
            }
        }

        return $object;
    }

    /**
     * Update data from moderation.
     *
     * @param array $data Data from moderation.
     */
    public function updateDataFromModeration($data)
    {
        foreach ($data as $element) {
            $object = null;
            if (isset($element['id'])) {
                $object = $this->findOneBy(array('id' => $element['id']));
            } else {
                $object = $this->findOneBy(array('ad' => $element['ad_id']));
            }

            if (!$object && isset($element['ad_id'])) {
                $object = new AdJobs();
                $ad = $this->_em->getRepository('FaAdBundle:Ad')->findOneBy(array('id' => $element['ad_id']));
                if ($ad) {
                    $object->setAd($ad);
                }
            }

            foreach ($element as $field => $value) {
                $methodName = 'set'.str_replace(' ', '', ucwords(str_replace('_', ' ', $field)));
                if (method_exists($object, $methodName) === true) {
                    if ($value === '') {
                        $value = null;
                    }
                    $object->$methodName($value);
                }
            }
            if ($object) {
                $this->_em->persist($object);
                $this->_em->flush($object);
            }
        }
    }

    /**
     * Copy business logo image as a first image while uploading job image.
     *
     * @param object  $container
     * @param integer $adId
     * @param string  $sessionId
     * @param integer $userId
     *
     */
    public function copyBusinessLogo($container, $adId = null, $sessionId = null, $userId = null)
    {
        $maxOrder = 0;
        if ($adId) {
            $maxOrder = $this->_em->getRepository('FaAdBundle:AdImage')->getMaxOrder($adId, false);
        } elseif ($sessionId) {
            $maxOrder = $this->_em->getRepository('FaAdBundle:AdImage')->getMaxOrder($sessionId, true);
        }

        if ($maxOrder == 1) {
            if (!$userId && $adId) {
                $ad = $this->_em->getRepository('FaAdBundle:Ad')->findOneBy(array('id' => $adId));
                if ($ad && $ad->getUser()) {
                    $userId = $ad->getUser()->getId();
                }
            }
            if ($userId) {
                $userSite = $this->_em->getRepository('FaUserBundle:UserSite')->findOneBy(array('user' => $userId));
                if ($userSite && $userSite->getPath()) {
                    $sourcePath = $userSite->getPath();
                    $sourceName = $userSite->getUser()->getId().'_original.jpg';
                    $this->_em->getRepository('FaAdBundle:AdImage')->createImageFromSource($container, $sourcePath, $sourceName, $adId, $sessionId);
                }
            }
        }
    }
}
