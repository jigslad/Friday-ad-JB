<?php

/**
 * This file is part of the fa bundle.
 *
 * @copyright Copyright (c) 2014, FMG
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Fa\Bundle\AdBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Fa\Bundle\AdBundle\Solr\AdMotorsSolrFieldMapping;
use Fa\Bundle\CoreBundle\Manager\CommonManager;
use Fa\Bundle\EntityBundle\Repository\CategoryRepository;
use Fa\Bundle\EntityBundle\Repository\EntityRepository as BaseEntityRepository;
use Fa\Bundle\AdBundle\Entity\AdMotors;

/**
 * AdMotorsRepository.
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 *
 * @author Janak Jadeja <janak@aspl.in>
 * @copyright 2014 Friday Media Group Ltd
 * @version 1.0
 */
class AdMotorsRepository extends EntityRepository
{
    use \Fa\Bundle\CoreBundle\Search\Search;

    const ALIAS = 'afm';

    /**
     * Prepare query builder.
     *
     * @param array $data Array of data.
     *
     * @return Doctrine\ORM\QueryBuilder The query builder.
     */
    public function getBaseQueryBuilder()
    {
        return $this->createQueryBuilder(self::ALIAS);
    }

    /**
     * Find the dimension by ad id.
     *
     * @param integer $adId Ad id.
     *
     * @return array
     */
    public function findByAdId($adId)
    {
        $qb = $this->getBaseQueryBuilder();

        if (!is_array($adId)) {
            $adId = array($adId);
        }

        $qb->andWhere(self::ALIAS.'.ad IN (:adId)');
        $qb->setParameter('adId', $adId);

        return $qb->getQuery()->getArrayResult();
    }

    /**
     * Returns ad solr document object.
     *
     * @param object $ad        Ad object.
     * @param object $container Container object.
     *
     * @return Apache_Solr_Document
     */
    public function getSolrDocument($ad, $container)
    {
        $document = new \SolrInputDocument($ad);

        $document = $this->_em->getRepository('FaAdBundle:Ad')->getSolrDocument($ad, $document, $container);

        $categoryId = ($ad->getCategory() ? $ad->getCategory()->getId() : null);
        // get for sale object
        $adMotor = $this->findOneBy(array('ad' => $ad->getId()));

        if ($adMotor) {
            $document = $this->addField($document, AdMotorsSolrFieldMapping::MAKE_ID, $adMotor->getMakeId());
            $document = $this->addField($document, AdMotorsSolrFieldMapping::MODEL_ID, $adMotor->getModelId());
            $document = $this->addField($document, AdMotorsSolrFieldMapping::MANUFACTURER_ID, $adMotor->getManufacturerId());
            $document = $this->addField($document, AdMotorsSolrFieldMapping::PART_MANUFACTURER_ID, $adMotor->getPartManufacturerId());
            $document = $this->addField($document, AdMotorsSolrFieldMapping::FUEL_TYPE_ID, $adMotor->getFuelTypeId());
            $document = $this->addField($document, AdMotorsSolrFieldMapping::COLOUR_ID, $adMotor->getColourId());
            $document = $this->addField($document, AdMotorsSolrFieldMapping::BODY_TYPE_ID, $adMotor->getBodyTypeId());
            $document = $this->addField($document, AdMotorsSolrFieldMapping::TRANSMISSION_ID, $adMotor->getTransmissionId());
            $document = $this->addField($document, AdMotorsSolrFieldMapping::BERTH_ID, $adMotor->getBerthId());
            $document = $this->addField($document, AdMotorsSolrFieldMapping::PART_OF_VEHICLE_ID, $adMotor->getPartOfVehicleId());

            $metaData = ($adMotor->getMetaData() ? unserialize($adMotor->getMetaData()) : null);
            if ($metaData && count($metaData)) {
                $document = $this->addField($document, AdMotorsSolrFieldMapping::META_DATA, $adMotor->getMetaData());

                if (isset($metaData['condition_id'])) {
                    $document = $this->addField($document, AdMotorsSolrFieldMapping::CONDITION_ID, $metaData['condition_id']);
                }
                if (isset($metaData['number_of_stalls_id'])) {
                    $document = $this->addField($document, AdMotorsSolrFieldMapping::NUMBER_OF_STALLS_ID, $metaData['number_of_stalls_id']);
                }
                if (isset($metaData['living_accommodation_id'])) {
                    $document = $this->addField($document, AdMotorsSolrFieldMapping::LIVING_ACCOMMODATION_ID, $metaData['living_accommodation_id']);
                }
                if (isset($metaData['tonnage_id'])) {
                    $document = $this->addField($document, AdMotorsSolrFieldMapping::TONNAGE_ID, $metaData['tonnage_id']);
                }
                if (isset($metaData['mileage'])) {
                    $document = $this->addField($document, AdMotorsSolrFieldMapping::MILEAGE, $metaData['mileage']);
                    $document = $this->addField($document, AdMotorsSolrFieldMapping::MILEAGE_RANGE, CommonManager::getMileageRangeByValue($metaData['mileage']));
                }
                if (isset($metaData['reg_year'])) {
                    $document = $this->addField($document, AdMotorsSolrFieldMapping::REG_YEAR, $metaData['reg_year']);
                }
                if (isset($metaData['boat_length'])) {
                    $document = $this->addField($document, AdMotorsSolrFieldMapping::BOAT_LENGTH, $metaData['boat_length']);
                }
                if (isset($metaData['engine_size'])) {
                    $document = $this->addField($document, AdMotorsSolrFieldMapping::ENGINE_SIZE, floatval($metaData['engine_size']));
                    $document = $this->addField($document, AdMotorsSolrFieldMapping::ENGINE_SIZE_RANGE, CommonManager::getEngineSizeRangeByValue($metaData['engine_size']));
                }
            }
        }

        // update keyword search fields.
        $keywordSearch = $this->_em->getRepository('FaAdBundle:Ad')->getKeywordSearchArray($ad, $categoryId, $adMotor, $container);
        if (count($keywordSearch)) {
            $document = $this->addField($document, AdMotorsSolrFieldMapping::KEYWORD_SEARCH, implode(',', $keywordSearch));
        }

        return $document;
    }

    /**
     * @param $ad
     * @param $container
     * @return object|\SolrInputDocument
     */
    public function getSolrDocumentNew($ad, $container)
    {
        $document = new \SolrInputDocument($ad);

        $document = $this->_em->getRepository('FaAdBundle:Ad')->getSolrDocumentNew($ad, $document, $container);

        $categoryId = ($ad->getCategory() ? $ad->getCategory()->getId() : null);
        // get for sale object
        $adMotor = $this->findOneBy(array('ad' => $ad->getId()));

        if ($adMotor) {
            $listingDimensions = $this->getAdListingFields();
            $entityRepository = $this->_em->getRepository('FaEntityBundle:Entity');
            $adRepository = $this->_em->getRepository('FaAdBundle:Ad');

            $document = $this->addField($document, $adRepository->getSolrFieldName($listingDimensions, 'make'), $entityRepository->getCachedEntityById($container, $adMotor->getMakeId()));
            $document = $this->addField($document, $adRepository->getSolrFieldName($listingDimensions, 'model'), $entityRepository->getCachedEntityById($container, $adMotor->getModelId()));
            $document = $this->addField($document, $adRepository->getSolrFieldName($listingDimensions, 'manufacturer'), $entityRepository->getCachedEntityById($container, $adMotor->getManufacturerId()));
            $document = $this->addField($document, $adRepository->getSolrFieldName($listingDimensions, 'part_manufacturer'), $entityRepository->getCachedEntityById($container, $adMotor->getPartManufacturerId()));
            $document = $this->addField($document, $adRepository->getSolrFieldName($listingDimensions, 'fuel_type'), $entityRepository->getCachedEntityById($container, $adMotor->getFuelTypeId()));
            $document = $this->addField($document, $adRepository->getSolrFieldName($listingDimensions, 'colour'), $entityRepository->getCachedEntityById($container, $adMotor->getColourId()));
            $document = $this->addField($document, $adRepository->getSolrFieldName($listingDimensions, 'body_type'), $entityRepository->getCachedEntityById($container, $adMotor->getBodyTypeId()));
            $document = $this->addField($document, $adRepository->getSolrFieldName($listingDimensions, 'transmission'), $entityRepository->getCachedEntityById($container, $adMotor->getTransmissionId()));
            $document = $this->addField($document, $adRepository->getSolrFieldName($listingDimensions, 'berth'), $entityRepository->getCachedEntityById($container, $adMotor->getBerthId()));
            $document = $this->addField($document, $adRepository->getSolrFieldName($listingDimensions, 'part_of_vehicle'), $entityRepository->getCachedEntityById($container, $adMotor->getPartOfVehicleId()));

            $metaData = ($adMotor->getMetaData() ? unserialize($adMotor->getMetaData()) : null);
            if ($metaData && count($metaData)) {
                $document = $this->addField($document, 'meta_values', $adMotor->getMetaData());

                if (isset($metaData['condition_id'])) {
                    $document = $this->addField($document, $adRepository->getSolrFieldName($listingDimensions, 'condition'), $entityRepository->getCachedEntityById($container, $metaData['condition_id'], $adRepository));
                }
                if (isset($metaData['number_of_stalls_id'])) {
                    $document = $this->addField($document, $adRepository->getSolrFieldName($listingDimensions, 'no_of_stalls'), $entityRepository->getCachedEntityById($container, $metaData['number_of_stalls_id'], $adRepository));
                }
                if (isset($metaData['living_accommodation_id'])) {
                    $document = $this->addField($document, $adRepository->getSolrFieldName($listingDimensions, 'living_accommodation'), $entityRepository->getCachedEntityById($container, $metaData['living_accommodation_id'], $adRepository));
                }
                if (isset($metaData['tonnage_id'])) {
                    $document = $this->addField($document, $adRepository->getSolrFieldName($listingDimensions, 'tonnage'), $entityRepository->getCachedEntityById($container, $metaData['tonnage_id'], $adRepository));
                }
                if (isset($metaData['mileage'])) {
                    $document = $this->addField($document, $adRepository->getSolrFieldName($listingDimensions, 'mileage', false), ['name' => $metaData['mileage'], 'listing_class' => $adRepository->getListingClass('mileage')]);
                    $document = $this->addField($document, $adRepository->getSolrFieldName($listingDimensions, 'mileage_range', false), ['name' => CommonManager::getMileageRangeByValue($metaData['mileage']), 'listing_class' => $adRepository->getListingClass('mileage_range')]);
                }
                if (isset($metaData['reg_year'])) {
                    $document = $this->addField($document, $adRepository->getSolrFieldName($listingDimensions, 'reg_year', false), ['name' => $metaData['reg_year'], 'listing_class' => $adRepository->getListingClass('reg_year')]);
                }
                if (isset($metaData['boat_length'])) {
                    $document = $this->addField($document, $adRepository->getSolrFieldName($listingDimensions, 'boat_length', false), ['name' => $metaData['boat_length'], 'listing_class' => $adRepository->getListingClass('base_length')]);
                }
                if (isset($metaData['engine_size'])) {
                    $document = $this->addField($document, $adRepository->getSolrFieldName($listingDimensions, 'engine_size', false), ['name' => floatval($metaData['engine_size']), 'listing_class' => $adRepository->getListingClass('engine_size')]);
                    $document = $this->addField($document, $adRepository->getSolrFieldName($listingDimensions, 'engine_size_range', false), ['name' => CommonManager::getEngineSizeRangeByValue($metaData['engine_size']), 'listing_class' => $adRepository->getListingClass('engine_size_range')]);
                }
            }
        }

        // update keyword search fields.
        $keywordSearch = $this->_em->getRepository('FaAdBundle:Ad')->getKeywordSearchArray($ad, $categoryId, $adMotor, $container);
        if (count($keywordSearch)) {
            $document = $this->addField($document, 'keyword_search', implode(',', $keywordSearch));
        }

        return $document;
    }

    /**
     * Get ad vertical data array.
     *
     * @param object $adId Ad id.
     *
     * @return array
     */
    public function getAdVerticalDataArray($adId)
    {
        $adVerticalData = $this->findByAdId($adId);
        if (count($adVerticalData)) {
            return array_filter($adVerticalData[0], 'strlen');
        }

        return array();
    }

    /**
     * Remove ad from vertical by ad id.
     *
     * @param integer $adId Ad id.
     */
    public function removeByAdId($adId)
    {
        $adVertical = $this->createQueryBuilder(self::ALIAS)
        ->andWhere(self::ALIAS.'.ad = :adId')
        ->setParameter('adId', $adId)
        ->getQuery()
        ->getOneOrNullResult();

        if ($adVertical) {
            $this->_em->remove($adVertical);
            $this->_em->flush($adVertical);
        }
    }

    /**
     * Add field to solr document.
     *
     * @param object $document Solr document object.
     * @param string $field    Field to index or store.
     * @param string $value    Value of field.
     *
     * @return object
     */
    private function addField($document, $field, $value)
    {
        if ($value != null) {
            $document->addField($field, $value);
        }

        return $document;
    }

    /**
     * Get ad forsale fields.
     *
     * @return array
     */
    public function getAllFields()
    {
        return array(
            'boat_length',
            'condition_id',
            'mileage',
            'reg_year',
            'number_of_stalls_id',
            'living_accommodation_id',
            'tonnage_id',
            'make',
            'manufacturer',
            'part_of_vehicle',
            'model',
            'year_built',
            'engine_size',
            'no_of_doors',
            'no_of_seats',
            'no_of_owners',
            'fuel_economy',
            '062mph',
            'top_speed',
            'ncap_rating',
            'features_id',
            'service_history_id',
            'mot_expiry_month',
            'mot_expiry_year',
            'road_tax_expiry_month',
            'road_tax_expiry_year',
            'co2_emissions',
            'fuel_economy',
            'manufacturer_id',
            'fuel_type_id',
            'colour_id',
            'body_type_id',
            'transmission_id',
            'make_id',
            'model_id',
            'berth_id',
            'part_of_vehicle_id',
            'part_manufacturer_id',
            'part_manufacturer',
            'has_reg_no',
            'reg_no',
        );
    }

    /**
     * Get ad not-inexed forsale fields.
     *
     * @return array
     */
    public function getNotIndexedFields()
    {
        return array(
            'boat_length',
            'condition_id',
            'mileage',
            'reg_year',
            'number_of_stalls_id',
            'living_accommodation_id',
            'tonnage_id',
            'make',
            'manufacturer',
            'model',
            'year_built',
            'engine_size',
            'no_of_doors',
            'no_of_seats',
            'no_of_owners',
            'fuel_economy',
            '062mph',
            'top_speed',
            'ncap_rating',
            'features_id',
            'service_history_id',
            'mot_expiry_month',
            'mot_expiry_year',
            'road_tax_expiry_month',
            'road_tax_expiry_year',
            'co2_emissions',
            'fuel_economy',
            'has_reg_no',
            'reg_no',
            'part_of_vehicle',
            'part_manufacturer'
        );
    }

    /**
     * Get ad inexed forsale fields.
     *
     * @return array
     */
    public function getIndexedFields()
    {
        return array(
            'manufacturer_id',
            'fuel_type_id',
            'colour_id',
            'body_type_id',
            'transmission_id',
            'make_id',
            'model_id',
            'berth_id',
            'part_of_vehicle_id',
            'part_manufacturer_id'
        );
    }

    /**
     * Get unit by field.
     *
     * @param string  $field        Field.
     * @param boolean $withBrackets Unit with brackets or not.
     *
     * @return string
     */
    public function getUnitByField($field, $withBrackets = false)
    {
        $units = $this->getUnitFieldArray();

        if (isset($units[$field])) {
            if ($withBrackets) {
                return ' ('.$units[$field].')';
            } else {
                return $units[$field];
            }
        }

        return null;
    }

    /**
     * Get unit for fields array.
     *
     * @return array
     */
    public function getUnitFieldArray()
    {
        return array(
            'boat_length'   => 'feet',
            'engine_size'   => 'cc',
            'fuel_economy'  => 'mpg',
            '062mph'       => 'seconds',
            'top_speed'     => 'mph',
            'co2_emissions' => 'g/km',
        );
    }

    /**
     * Get ad listing fields.
     *
     * @return array
     */
    public function getAdListingFields()
    {
        $adListingFields['REG_YEAR']                           = 'REG_YEAR';
        $adListingFields['MILEAGE']                            = 'MILEAGE';
        $adListingFields['ENGINE_SIZE']                        = 'ENGINE_SIZE';
        $adListingFields['FUEL_TYPE_ID|FaEntityBundle:Entity'] = 'FUEL_TYPE_ID';

        return $adListingFields;
    }

    /**
     * Get category information from carweb data of passed reg no.
     *
     * @param array   $carWebFieldData Car web data.
     * @param integer $categoryId      Category id.
     * @param object  $container       Container object.
     *
     * @return array
     */
    public function getCategoryInfoFromCawWebData($carWebFieldData, $categoryId, $container = null)
    {
        $fieldsData              = array();
        $carWebVehicleCategoryId = null;
        $carWebMakeId            = null;
        $carWebModelId           = null;
        $carWebMakeName          = null;
        $carWebModelName         = null;
        $carWebMotorbikeId       = null;
        $makeId                  = null;
        $modelId                 = null;
        $make                    = null;
        $model                   = null;
        $vehicleCategoryId       = null;
        $motorbikeId             = null;

        if (isset($carWebFieldData['VehicleCategoryDescription']) && $carWebFieldData['VehicleCategoryDescription']) {
            if (preg_match('/CARS/', $carWebFieldData['VehicleCategoryDescription'])) {
                $carWebVehicleCategoryId = CategoryRepository::CARS_ID;
            } elseif (preg_match('/2\/3 Wheelers/', $carWebFieldData['VehicleCategoryDescription'])) {
                $carWebVehicleCategoryId = CategoryRepository::MOTORBIKES_ID;
                $carWebMotorbikeId       = CategoryRepository::MOTORBIKES_MOTORBIKES_ID;
            } elseif (preg_match('/SPVs \(Quad Bikes\)/', $carWebFieldData['VehicleCategoryDescription'])) {
                $carWebVehicleCategoryId = CategoryRepository::MOTORBIKES_ID;
                $carWebMotorbikeId       = CategoryRepository::MOTORBIKES_QUAD_BIKES_ID;
            } elseif (preg_match('/LCVs|HCVs|PSVs|SPVs/', $carWebFieldData['VehicleCategoryDescription'])) {
                $carWebVehicleCategoryId = CategoryRepository::COMMERCIALVEHICLES_ID;
            }
        }

        if ($carWebVehicleCategoryId && ($carWebVehicleCategoryId == CategoryRepository::CARS_ID || $carWebVehicleCategoryId == CategoryRepository::COMMERCIALVEHICLES_ID)) {
            if (isset($carWebFieldData['MarqueDescription']) && $carWebFieldData['MarqueDescription']) {
                $make       = strtolower($carWebFieldData['MarqueDescription']);
                $carWebMake = $this->getEntityManager()->getRepository('FaEntityBundle:Category')->getCategoryByNameAndParentId($make, $carWebVehicleCategoryId, $container);
                if (count($carWebMake)) {
                    $carWebMakeId   = (isset($carWebMake['id']) ? $carWebMake['id'] : null);
                    $carWebMakeName = (isset($carWebMake['name']) ? $carWebMake['name'] : null);
                }
            }

            if ($carWebMakeId && isset($carWebFieldData['ModelRangeDescription']) && $carWebFieldData['ModelRangeDescription']) {
                $carWebModelMapping = $this->getCarWebModelMapping();
                if (isset($carWebModelMapping[$carWebFieldData['ModelRangeDescription']])) {
                    $model = strtolower($carWebModelMapping[$carWebFieldData['ModelRangeDescription']]);
                } else {
                    $model = strtolower($carWebFieldData['ModelRangeDescription']);
                }

                $carWebModel = $this->getEntityManager()->getRepository('FaEntityBundle:Category')->getCategoryByNameAndParentId($model, $carWebMakeId, $container);
                if (count($carWebModel)) {
                    $carWebModelId   = (isset($carWebModel['id']) ? $carWebModel['id'] : null);
                    $carWebModelName = (isset($carWebModel['name']) ? $carWebModel['name'] : null);
                }
            }
        }

        $fieldsData['cw_make_id']        = $carWebMakeId;
        $fieldsData['cw_make']           = $carWebMakeName;
        $fieldsData['cw_model_id']       = $carWebModelId;
        $fieldsData['cw_model']          = $carWebModelName;
        $fieldsData['cw_vehicle_cat_id'] = $carWebVehicleCategoryId;
        $fieldsData['cw_vehicle_cat']    = $container->get('fa.entity.cache.manager')->getEntityNameById('FaEntityBundle:Category', $carWebVehicleCategoryId);
        $fieldsData['cw_motorbike_id']   = $carWebMotorbikeId;

        if ($carWebMotorbikeId) {
            $fieldsData['cw_motorbike'] = $container->get('fa.entity.cache.manager')->getEntityNameById('FaEntityBundle:Category', $carWebMotorbikeId);
        } else {
            $fieldsData['cw_motorbike'] = null;
        }

        // Selected category (make/model)
        $categoryPath = $this->getEntityManager()->getRepository('FaEntityBundle:Category')->getCategoryPathArrayById($categoryId, false, $container);
        $categoryIds  = array_keys($categoryPath);
        if (isset($categoryIds[1]) && $categoryIds[1]) {
            if ($categoryIds[1] == CategoryRepository::CARS_ID || $categoryIds[1] == CategoryRepository::COMMERCIALVEHICLES_ID) {
                $vehicleCategoryId = $categoryIds[1];
                $caIds             = array_slice(array_keys($categoryPath), -2, 2);
                $makeId            = $caIds[0];
                $make              = $categoryPath[$caIds[0]];
                $modelId           = $caIds[1];
                $model             = $categoryPath[$caIds[1]];
            } elseif ($categoryIds[1] == CategoryRepository::MOTORBIKES_ID) {
                $vehicleCategoryId = $categoryIds[1];
                $caIds             = array_slice(array_keys($categoryPath), -1, 1);
                $motorbikeId       = $caIds[0];
            }
        }

        $fieldsData['make_id']        = $makeId;
        $fieldsData['make']           = $make;
        $fieldsData['model_id']       = $modelId;
        $fieldsData['model']          = $model;
        $fieldsData['vehicle_cat_id'] = $vehicleCategoryId;
        $fieldsData['vehicle_cat']    = $container->get('fa.entity.cache.manager')->getEntityNameById('FaEntityBundle:Category', $vehicleCategoryId);
        $fieldsData['motorbike_id']   = $motorbikeId;

        if ($motorbikeId) {
            $fieldsData['motorbike'] = $container->get('fa.entity.cache.manager')->getEntityNameById('FaEntityBundle:Category', $motorbikeId);
        } else {
            $fieldsData['motorbike'] = null;
        }

        return $fieldsData;
    }

    /**
     * Get data from carweb by reg no.
     *
     * @param array   $data       Car web data.
     * @param integer $categoryId Category id.
     * @param object  $container  Container object.
     *
     * @return array
     */
    public function getFieldDataByCarWebDataArray($data, $categoryId, $container = null)
    {
        $fieldsData        = array();
        $carWebFieldData   = array();
        $categoryFieldData = array();

        if (isset($data['GetVehicles']['DataArea']['Vehicles']['Vehicle'])) {
            $carWebFieldData = $data['GetVehicles']['DataArea']['Vehicles']['Vehicle'];
        }

        if (count($carWebFieldData)) {
            $colorMapping = $this->carWebColourMapping();
            $dimensions   = $this->getEntityManager()->getRepository('FaEntityBundle:CategoryDimension')->getDimesionsByCategoryId($categoryId, $container);
            $dimensionFields = array();
            foreach ($dimensions as $dimensionId => $dimensionName) {
                $dimensionField = str_replace(array('(', ')', ',', '?', '|', '.', '/', '\\', '*', '+', '-', '"', "'"), '', $dimensionName);
                $dimensionField = str_replace(' ', '_', strtolower($dimensionField));
                $dimensionFields[$dimensionField] = $dimensionId;
            }

            foreach ($this->carWebFieldMappingWithDBFields() as $carWebField => $field) {
                if (isset($carWebFieldData[$carWebField]) && $carWebFieldData[$carWebField]) {
                    $value = trim($carWebFieldData[$carWebField]);
                    if (strrpos($field, "_id") !== false) {
                        if (isset($colorMapping[$value])) {
                            $value = $colorMapping[$value];
                        }
                        $name           = strtolower($value);
                        $dimensionField = strstr($field, '_id', true);

                        if (isset($dimensionFields[$dimensionField])) {
                            $dimensionId    = $dimensionFields[$dimensionField];
                            $value          = $this->getEntityManager()->getRepository('FaEntityBundle:Entity')->getEntityIdByCategoryDimensionAndName($dimensionId, $name, $container);

                            if ($field == 'colour_id') {
                                $colorText = $container->get('fa.entity.cache.manager')->getEntityNameById('FaEntityBundle:Entity', $value);
                                $fieldsData['colour_id_autocomplete'] = $colorText ? $colorText : '';
                            }
                        }
                    } elseif ($field == 'reg_year') {
                        $value = strstr($value, '-', true);
                    }

                    $fieldsData[$field] = $value;
                }
            }

            // If fuel type not found then add default "Others" for cars and commerial vehicles.
            if (!isset($fieldsData['fuel_type_id']) || !$fieldsData['fuel_type_id']) {
                if (isset($carWebFieldData['VehicleCategoryDescription']) && $carWebFieldData['VehicleCategoryDescription']) {
                    if (preg_match('/CARS/', $carWebFieldData['VehicleCategoryDescription'])) {
                        $fieldsData['fuel_type_id'] = BaseEntityRepository::CAR_FUEL_TYPE_OTHERS_ID;
                    } elseif (preg_match('/LCVs|HCVs|PSVs|SPVs/', $carWebFieldData['VehicleCategoryDescription'])) {
                        $fieldsData['fuel_type_id'] = BaseEntityRepository::COMMERCIAL_VEHICLE_FUEL_TYPE_OTHERS_ID;
                    }
                }
            }

            //Get category information from carweb data of passed reg no.
            $categoryFieldData = $this->getCategoryInfoFromCawWebData($carWebFieldData, $categoryId, $container);
            $fieldsData        = $fieldsData + $categoryFieldData;
        }

        return $fieldsData;
    }

    /**
     * Get data from carweb by reg no.
     *
     * @return array
     */
    public function carWebFieldMappingWithDBFields()
    {
        return array(
                   'ColourCurrent'              => 'colour_id',
                   'BodyStyle'                  => 'body_type_id',
                   'DateOfManufacture'          => 'reg_year',
                   'FuelType'                   => 'fuel_type_id',
                   'Transmission'               => 'transmission_id',
                   'EngineCapacity'             => 'engine_size',
                   'NumberOfDoors'              => 'no_of_doors',
                   'Seats'                      => 'no_of_seats',
                   'NumberOfPreviousKeepers'    => 'no_of_owners',
                   'FuelConsumptionCombinedMPG' => 'fuel_economy',
                   'AccelerationTo100KPHSecs'   => '062mph',
                   'MaximumSpeedMPH'            => 'top_speed',
                   'NCAP_Adult'                 => 'ncap_rating',
                   'CO2'                        => 'co2_emission',
        );
    }

    public function carWebColourMapping()
    {
        return array(
                    'ALUMINIUM/SILVER' => 'SILVER',
                    'ALUMINIUM/SILVER/ALUMINIUM/SILVER' => 'SILVER',
                    'ALUMINIUM/SILVER/GREY' => 'SILVER',
                    'ALUMINIUM/SILVER/MULTI-COLOURED (3+)' => 'SILVER',
                    'BEIGE/BUFF' => 'CREAM',
                    'BEIGE/BUFF/BEIGE/BUFF' => 'CREAM',
                    'BEIGE/BUFF/MULTI-COLOURED (3+)' => 'CREAM',
                    'BLACK' => 'BLACK',
                    'BLACK/BLACK' =>  'BLACK',
                    'BLACK/MULTI-COLOURED (3+)' => 'BLACK',
                    'BLUE' => 'BLUE',
                    'BLUE/BLUE' => 'BLUE',
                    'BLUE/MULTI-COLOURED (3+)' => 'BLUE',
                    'BRONZE' => 'BRONZE',
                    'BRONZE/BRONZE' => 'BRONZE',
                    'BRONZE/BROWN' => 'BROWN',
                    'BRONZE/MULTI-COLOURED (3+)' => 'BRONZE',
                    'BROWN' => 'BROWN',
                    'BROWN/BRONZE' => 'BROWN',
                    'BROWN/BROWN'  => 'BROWN',
                    'BROWN/MULTI-COLOURED (3+)' => 'BROWN',
                    'CREAM/IVORY' => 'CREAM',
                    'CREAM/IVORY/CREAM/IVORY' => 'CREAM',
                    'CREAM/IVORY/MULTI-COLOURED (3+)' => 'CREAM',
                    'GOLD' => 'GOLD',
                    'GOLD/GOLD' => 'GOLD',
                    'GOLD/MULTI-COLOURED (3+)' => 'GOLD',
                    'GREEN' => 'GREEN',
                    'GREEN/GREEN' => 'GREEN',
                    'GREEN/MULTI-COLOURED (3+)' => 'GREEN',
                    'GREY' => 'GREY',
                    'GREY/GREY' => 'GREY',
                    'GREY/MULTI-COLOURED (3+)' => 'GREY',
                    'MAROON' => 'MAROON',
                    'MAROON/MAROON' => 'MAROON',
                    'MAROON/MULTI-COLOURED (3+)' => 'MAROON',
                    'MAUVE/PURPLE/VIOLET' => 'PURPLE',
                    'MULTI-COLOURED (3+)/ALUMINIUM/SILVER' => 'SILVER',
                    'MULTI-COLOURED (3+)/BEIGE/BUFF' => 'CREAM',
                    'MULTI-COLOURED (3+)/BLACK' => 'BLACK',
                    'MULTI-COLOURED (3+)/BLUE' => 'BLUE',
                    'MULTI-COLOURED (3+)/BRONZE' => 'BRONZE',
                    'MULTI-COLOURED (3+)/BROWN' => 'BROWN',
                    'MULTI-COLOURED (3+)/CREAM/IVORY' => 'CREAM',
                    'MULTI-COLOURED (3+)/GOLD' => 'GOLD',
                    'MULTI-COLOURED (3+)/GREEN' => 'GREEN',
                    'MULTI-COLOURED (3+)/GREY' => 'GREY',
                    'MULTI-COLOURED (3+)/MAROON' => 'MAROON',
                    'MULTI-COLOURED (3+)/MAUVE/PURPLE/VIOLET' => 'PURPLE',
                    'MULTI-COLOURED (3+)/ORANGE' => 'ORANGE',
                    'MULTI-COLOURED (3+)/PINK' => 'PINK',
                    'MULTI-COLOURED (3+)/RED'  => 'RED',
                    'MULTI-COLOURED (3+)/TURQUOISE' => 'TURQUOISE',
                    'MULTI-COLOURED (3+)/WHITE' => 'WHITE',
                    'MULTI-COLOURED (3+)/YELLOW' => 'YELLOW',
                    'ORANGE' => 'ORANGE',
                    'ORANGE/MULTI-COLOURED (3+)' => 'ORANGE',
                    'ORANGE/ORANGE' => 'ORANGE',
                    'PINK' => 'PINK',
                    'PINK/MULTI-COLOURED (3+)' => 'PINK',
                    'PINK/PINK' => 'PINK',
                    'RED' => 'RED',
                    'RED/MULTI-COLOURED (3+)' => 'RED',
                    'RED/RED' => 'RED',
                    'TURQUOISE' => 'TURQUOISE',
                    'TURQUOISE/MULTI-COLOURED (3+)' => 'TURQUOISE',
                    'TURQUOISE/TURQUOISE' => 'TURQUOISE',
                    'WHITE' => 'WHITE',
                    'WHITE/MULTI-COLOURED (3+)' => 'WHITE',
                    'WHITE/WHITE'  => 'WHITE',
                    'YELLOW' => 'YELLOW',
                    'YELLOW/MULTI-COLOURED (3+)' => 'YELLOW',
                    'YELLOW/YELLOW' => 'YELLOW'
               );
    }

    /**
     * Mapping for model.
     *
     * @return array
     */
    public function getCarWebModelMapping()
    {
        return array(
            'B Series' => 'B-series',
        );
    }

    /**
     * Get ad detail fields.
     *
     * @return array
     */
    public function getAdDetailTabFields()
    {
        $adDetailFields['performance_economy'][] = '062MPH';
        $adDetailFields['performance_economy'][] = 'FUEL_ECONOMY';
        $adDetailFields['performance_economy'][] = 'TOP_SPEED';
        $adDetailFields['performance_economy'][] = 'CO2_EMISSIONS';

        $adDetailFields['safety_features'][] = 'FEATURES_ID';
        $adDetailFields['safety_features'][] = 'NCAP_RATING';

        return $adDetailFields;
    }

    /**
     * Get ISO Fix id array.
     *
     * @return array
     */
    public function getISOFixIds()
    {
        return array(1660, 1720);
    }

    /**
     * Check ad has iso fix feature or not.
     *
     * @param array $featureIds Features id array.
     *
     * @return boolean
     */
    public function hasISOFixFeature($featureIds)
    {
        foreach ($featureIds as $featureId) {
            if (in_array($featureId, $this->getISOFixIds())) {
                return true;
            }
        }

        return false;
    }


    /**
     * Get safety feature id array.
     *
     * @return array
     */
    public function getSafetyFeatureIds()
    {
        return array(1655, 1715, 1656, 1716, 1657, 1717, 1659, 1719, 2175);
    }

    /**
     * Get safety features.
     *
     * @param array $featureIds Features id array.
     *
     * @return array
     */
    public function getSafetyFeature($featureIds)
    {
        $safetyFeatureIds = array();

        foreach ($featureIds as $featureId) {
            if (in_array($featureId, $this->getSafetyFeatureIds())) {
                $safetyFeatureIds[] = $featureId;
            }
        }

        return $safetyFeatureIds;
    }

    /**
     * Get other features.
     *
     * @param array $featureIds Features id array.
     *
     * @return array
     */
    public function getOtherFeature($featureIds)
    {
        $otherFeatureIds = array();
        foreach ($featureIds as $featureId) {
            if (!in_array($featureId, array_merge($this->getSafetyFeatureIds(), $this->getISOFixIds()))) {
                $otherFeatureIds[] = $featureId;
            }
        }

        return $otherFeatureIds;
    }

    /**
     * Get other features.
     *
     * @param array $element Element from moderation.
     *
     * @return object
     */
    public function setObjectFromModerationData($element)
    {
        if (isset($element['id'])) {
            $object = $this->findOneBy(array('id' => $element['id']));
        } else {
            $object = $this->findOneBy(array('ad' => $element['ad_id']));
        }

        foreach ($element as $field => $value) {
            $methodName = 'set'.str_replace(' ', '', ucwords(str_replace('_', ' ', $field)));
            if (method_exists($object, $methodName) === true) {
                $object->$methodName($value);
            }
        }

        return $object;
    }

    /**
     * Update data from moderation.
     *
     * @param array $data Data from moderation.
     */
    public function updateDataFromModeration($data)
    {
        foreach ($data as $element) {
            $object = null;
            if (isset($element['id'])) {
                $object = $this->findOneBy(array('id' => $element['id']));
            } else {
                $object = $this->findOneBy(array('ad' => $element['ad_id']));
            }

            if (!$object && isset($element['ad_id'])) {
                $object = new AdMotors();
                $ad = $this->_em->getRepository('FaAdBundle:Ad')->findOneBy(array('id' => $element['ad_id']));
                if ($ad) {
                    $object->setAd($ad);
                }
            }

            foreach ($element as $field => $value) {
                $methodName = 'set'.str_replace(' ', '', ucwords(str_replace('_', ' ', $field)));
                if (method_exists($object, $methodName) === true) {
                    if ($value === '') {
                        $value = null;
                    }
                    $object->$methodName($value);
                }
            }
            if ($object) {
                $this->_em->persist($object);
                $this->_em->flush($object);
            }
        }
    }
}
