<?php

/**
 * This file is part of the fa bundle.
 *
 * @copyright Copyright (c) 2014, FMG
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Fa\Bundle\AdBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Fa\Bundle\CoreBundle\Manager\CommonManager;

/**
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 *
 * @author Samir Amrutya <samiram@aspl.in>
 * @copyright 2014 Friday Media Group Ltd.
 * @version 1.0
 */
class PaaFieldRepository extends EntityRepository
{
    use \Fa\Bundle\CoreBundle\Search\Search;

    const ALIAS = 'pf';

    /**
     * PrepareQueryBuilder.
     *
     * @param array $data Array of data.
     *
     * @return Doctrine\ORM\QueryBuilder The query builder.
     */
    public function getBaseQueryBuilder()
    {
        return $this->createQueryBuilder(self::ALIAS);
    }

    /**
     * Get paa field key value array.
     *
     * @return array
     */
    public function getPaaFieldKeyValueArray()
    {
        $fieldArray = array();
        $fields     = $this->getBaseQueryBuilder()->getQuery()->getArrayResult();

        foreach ($fields as $field) {
            $fieldArray[$field['id']] = $field['label'];
        }

        return $fieldArray;
    }

    /**
     * Get category wise PAA fields.
     *
     * @param integer $categoryId Category id.
     *
     * @return object
     */
    public function getPaaFieldsByCategoryId($categoryId = null, $isIndex = false)
    {
        if (!is_array($categoryId)) {
            $categoryId = array($categoryId);
        }

        $categoryId = array_filter($categoryId);

        $queryBuilder = $this->getBaseQueryBuilder();
        if (count($categoryId)) {
            $queryBuilder->andWhere(self::ALIAS.'.category IN (:category_id)')->setParameter('category_id', $categoryId);
        }

        if ($isIndex) {
            $queryBuilder->andWhere(self::ALIAS.'.is_index=1');
        }

        return $queryBuilder
                        ->orderBy(self::ALIAS.'.created_at', 'asc')
                        ->getQuery()
                        ->getResult();
    }

    /**
     * Get common PAA fields.
     *
     * @return object
     */
    public function getCommonPaaFields()
    {
        return $this->getBaseQueryBuilder()
                    ->where(self::ALIAS.'.category IS NULL')
                    ->orderBy(self::ALIAS.'.created_at', 'asc')
                    ->getQuery()
                    ->getResult();
    }

    /**
     * Get all paa fields for selected category.
     *
     * @param integer $categoryId Selected category id.
     *
     * @return array
     */
    public function getAllPaaFields($categoryId)
    {
        $paaFields       = array();
        $commonPaaFields = $this->getCommonPaaFields();
        foreach ($commonPaaFields as $paaField) {
            $paaFields[$paaField->getField()] = $paaField;
        }

        $dimensionCategoryPath = $this->getEntityManager()->getRepository('FaEntityBundle:Category')->getCategoryPathArrayById($categoryId);
        $dimensionCategories   = array_keys($dimensionCategoryPath);
        $dimensionPaaFields    = $this->getPaaFieldsByCategoryId($dimensionCategories);

        foreach ($dimensionPaaFields as $paaField) {
            $paaFields[$paaField->getField()] = $paaField;
        }

        return $paaFields;
    }

    /**
     * Get all paa fields for selected category.
     *
     * @param integer $categoryId Selected category id.
     * @param boolean $isForm     Flag for is from from or fixture.
     *
     * @return array
     */
    public function getPaaFieldsByCategoryAncestor($categoryId, $isForm = false, $ordBy = 'ord')
    {
        $allPaaFields = array();
        $ruleFields   = array();
        $fieldRules   = $this->getEntityManager()->getRepository('FaAdBundle:PaaFieldRule')->getPaaFieldRulesByCategoryAncestor($categoryId, $ordBy);
        foreach ($fieldRules as $fieldRule) {
            $fieldId                        = $fieldRule->getPaaField()->getId();
            $allPaaFields[$fieldId]['is_rule'] = true;
            $allPaaFields[$fieldId]['data']    = $fieldRule;
            $ruleFields[$fieldRule->getPaaField()->getField()] = $fieldId;
        }

        $paaFields = $this->getAllPaaFields($categoryId);
        foreach ($paaFields as $field => $paaField) {
            if (!isset($allPaaFields[$paaField->getId()])) {
                // Check if same field name exist in parent and also child then no need to add for child while create on form.
                // for fixture replace paa field rule with child paa field
                if (isset($ruleFields[$field])) {
                    if (!$isForm) {
                        $allPaaFields[$ruleFields[$field]]['is_rule'] = false;
                        $allPaaFields[$ruleFields[$field]]['data']    = $paaField;
                    }
                } else {
                    $allPaaFields[$paaField->getId()]['is_rule'] = false;
                    $allPaaFields[$paaField->getId()]['data']    = $paaField;
                }
            }
        }

        return $allPaaFields;
    }

    /**
     * Add field filter to existing query object.
     *
     * @param string $field Field.
     */
    protected function addFieldFilter($field = null)
    {
        $this->queryBuilder->andWhere(sprintf('%s.field LIKE \'%%%s%%\'', $this->getRepositoryAlias(), $field));
    }

    /**
     * Get paa field table name.
     *
     * @return Ambigous <string, multitype:>
     */
    private function getPaaFieldName()
    {
        return $this->_em->getClassMetadata('FaAdBundle:PaaField')->getTableName();
    }

    /**
     * Get all paa fields for dimesion only for selected category.
     *
     * @param integer $categoryId Selected category id.
     *
     * @return array
     */
    public function getDimensionPaaFieldsWithLabel($categoryId, $container = null)
    {
        if ($container) {
            $culture     = CommonManager::getCurrentCulture($container);
            $tableName   = $this->getPaaFieldName();
            $cacheKey    = $tableName.'|'.__FUNCTION__.'|'.$categoryId.'_'.$culture;
            $cachedValue = CommonManager::getCacheVersion($container, $cacheKey);

            if ($cachedValue !== false) {
                return $cachedValue;
            }
        }
        $paaFields = array();

        $dimensionCategoryPath = $this->getEntityManager()->getRepository('FaEntityBundle:Category')->getCategoryPathArrayById($categoryId, false, $container);
        $dimensionCategories   = array_keys($dimensionCategoryPath);
        $dimensionPaaFields    = $this->getPaaFieldsByCategoryId($dimensionCategories);

        foreach ($dimensionPaaFields as $paaField) {
            $paaFields[$paaField->getField()] = $paaField->getLabel();
        }

        if ($container) {
            CommonManager::setCacheVersion($container, $cacheKey, $paaFields);
        }

        return $paaFields;
    }

    /**
     *  Set field data.
     *
     * @param string  $field               Field name.
     * @param object  $object              Instance.
     * @param array   $metaData            Data array.
     * @param object  $container           Container object.
     * @param string  $repositoryClassName Repository class name.
     * @param boolean $withUnit Repository With unit value.
     *
     * @return string
     */
    public function getPaaFieldValue($field, $object, $metaData, $container, $repositoryClassName, $withUnit = true, $isValue = true)
    {
        $entityCacheManager = $container->get('fa.entity.cache.manager');
        $fieldVal           = null;
        $methodName         = 'get'.str_replace(' ', '', ucwords(str_replace('_', ' ', $field)));
        $repository         = $this->_em->getRepository('FaAdBundle:Ad'.$repositoryClassName);
        if ($object && in_array($field, $repository->getIndexedFields())) {
            $fieldVal = call_user_func(array($object, $methodName));
            if (strrpos($field, "_id") !== false && $fieldVal) {
                $values   = explode(',', $fieldVal);
                $fieldVal = '';
                foreach ($values as $value) {
                    if ($isValue) {
                        $fieldVal .= $entityCacheManager->getEntityNameById('FaEntityBundle:Entity', $value).', ';
                    } else {
                        $fieldVal .= $value.',';
                    }
                }
                $fieldVal = rtrim(trim($fieldVal), ',');
                if (!$isValue) {
                    return explode(',', $fieldVal);
                }
            }
        } elseif ($metaData != null && isset($metaData[$field])) {
            //check for unit.
            $unit = null;
            if ($withUnit && strstr($field, 'dimensions')) {
                $unit = ' '.$metaData['dimensions_unit'];
            }
            if (strrpos($field, "_id") !== false) {
                $values   = explode(',', $metaData[$field]);
                $fieldVal = '';
                foreach ($values as $value) {
                    if ($isValue) {
                       $fieldVal .= $entityCacheManager->getEntityNameById('FaEntityBundle:Entity', $value).', ';
                    } else {
                       $fieldVal .= $value.',';
                    }
                }
                $fieldVal = rtrim(trim($fieldVal), ',');
                if (!$isValue) {
                    return explode(',', $fieldVal);
                }
            } else {
                $fieldVal = $metaData[$field].$unit;
            }
        }

        return $fieldVal;
    }

    /**
     *  Get field value for log.
     *
     * @param string  $field               Field name.
     * @param object  $object              Instance.
     * @param array   $metaData            Data array.
     * @param object  $container           Container object.
     * @param string  $repositoryClassName Repository class name.
     * @param boolean $withUnit Repository With unit value.
     *
     * @return string
     */
    public function getPaaFieldValueForLog($field, $fieldVal, $object, $metaData, $container, $repositoryClassName, $withUnit = true)
    {
        $entityCacheManager = $container->get('fa.entity.cache.manager');
        $methodName         = 'get'.str_replace(' ', '', ucwords(str_replace('_', ' ', $field)));
        $repository         = $this->_em->getRepository('FaAdBundle:Ad'.$repositoryClassName);
        if ($object && in_array($field, $repository->getIndexedFields())) {
            if (strrpos($field, "_id") !== false && $fieldVal) {
                $values   = explode(',', $fieldVal);
                $fieldVal = '';
                foreach ($values as $value) {
                    $fieldVal .= $entityCacheManager->getEntityNameById('FaEntityBundle:Entity', $value).', ';
                }
                $fieldVal = rtrim(trim($fieldVal), ',');
            }
        } elseif ($metaData != null && isset($metaData[$field])) {
            //check for unit.
            $unit = null;
            if ($withUnit && strstr($field, 'dimensions')) {
                $unit = ' '.$metaData['dimensions_unit'];
            }
            if (strrpos($field, "_id") !== false) {
                $values   = explode(',', $metaData[$field]);
                $fieldVal = '';
                foreach ($values as $value) {
                    $fieldVal .= $entityCacheManager->getEntityNameById('FaEntityBundle:Entity', $value).', ';
                }
                $fieldVal = rtrim(trim($fieldVal), ',');
            } else {
                $fieldVal = $metaData[$field].$unit;
            }
        }

        return $fieldVal;
    }

    /**
     * Get all paa fields for dimesion only for selected category.
     *
     * @param integer $categoryId Selected category id.
     *
     * @return array
     */
    public function getIndexableDimensionPaaFieldsWithLabel($categoryId, $container = null)
    {
        if ($container) {
            $culture     = CommonManager::getCurrentCulture($container);
            $tableName   = $this->getPaaFieldName();
            $cacheKey    = $tableName.'|'.__FUNCTION__.'|'.$categoryId.'_'.$culture;
            $cachedValue = CommonManager::getCacheVersion($container, $cacheKey);

            if ($cachedValue !== false) {
                return $cachedValue;
            }
        }
        $paaFields = array();

        $dimensionCategoryPath = $this->getEntityManager()->getRepository('FaEntityBundle:Category')->getCategoryPathArrayById($categoryId, false, $container);
        $dimensionCategories   = array_keys($dimensionCategoryPath);
        $dimensionPaaFields    = $this->getPaaFieldsByCategoryId($dimensionCategories, true);

        foreach ($dimensionPaaFields as $paaField) {
            $paaFields[$paaField->getField()] = $paaField->getLabel();
        }

        if ($container) {
            CommonManager::setCacheVersion($container, $cacheKey, $paaFields);
        }

        return $paaFields;
    }
}
