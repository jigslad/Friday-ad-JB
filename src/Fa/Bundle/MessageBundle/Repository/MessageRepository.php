<?php

/**
 * This file is part of the fa bundle.
 *
 * @copyright Copyright (c) 2014, FMG
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Fa\Bundle\MessageBundle\Repository;

//use Gedmo\Tree\Entity\Repository\NestedTreeRepository;
use Doctrine\ORM\EntityRepository;
use Fa\Bundle\AdBundle\Repository\AdRepository;
use Fa\Bundle\UserBundle\Repository\UserRepository;
use Fa\Bundle\CoreBundle\Manager\CommonManager;
use Fa\Bundle\MessageBundle\Entity\Message;
use Fa\Bundle\DotMailerBundle\Repository\DotmailerRepository;
use Fa\Bundle\EntityBundle\Repository\EntityRepository as BaseEntityRepository;
use Symfony\Component\DependencyInjection\Alias;
use Fa\Bundle\MessageBundle\Entity\MessageAttachments;
use Fa\Bundle\EntityBundle\Repository\CategoryRepository;

/**
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 *
 * @author Samir Amrutya <samiram@aspl.in>
 * @copyright 2014 Friday Media Group Ltd
 * @version v1.0
 */
class MessageRepository extends EntityRepository
{
    use \Fa\Bundle\CoreBundle\Search\Search;

    const ALIAS = 'm';

    const MODERATION_RESULT_OKEY = 'ModeratedOkay';

    const MODERATION_RESULT_REJECTED = 'SilentlyReject';

    const MODERATION_QUEUE_STATUS_SEND = 0;

    const MODERATION_QUEUE_STATUS_SENT = 2;

    const MODERATION_QUEUE_STATUS_OKAY = 1;

    const MODERATION_QUEUE_STATUS_REJECTED = 3;

    const CACHE_TTL = 21600;

    const REPORT_USER_REASON_OTHER = 4;

    //const ONE_CLIK_NO_REPLY_MESSAGE_FOR_BUYER = "Sorry, this item has been sold. We may still have what you're looking for though! Take a look at these %similar_ads%.";
    const ONE_CLIK_NO_REPLY_MESSAGE_FOR_BUYER = "Sorry, this item has been sold. You may still be able to find what you're looking for on %site_name%! Take a look at these %similar_ads%.";

    /**
     * PrepareQueryBuilder.
     *
     * @return Doctrine\ORM\QueryBuilder The query builder.
     */
    public function getBaseQueryBuilder()
    {
        return $this->createQueryBuilder(self::ALIAS);
    }

    /**
     * Add message status filter to existing query object.
     *
     * @param mixed $status Moderation status.
     */
    protected function addStatusFilter($status = null)
    {
        if ($status !== null) {
            if (!is_array($status)) {
                $status = array($status);
            }

            if (count($status)) {
                $this->queryBuilder->andWhere($this->getRepositoryAlias().'.status IN (:status)');
                $this->queryBuilder->setParameter('status', $status);
            }
        }
    }

    /**
     * Get message table name.
     *
     * @return string
     *
     */
    private function getMessageTableName()
    {
        return $this->_em->getClassMetadata('FaMessageBundle:Message')->getTableName();
    }

    /**
     * Get ad user messages query.
     *
     * @param integer $userId       User id.
     * @param string  $type         Type either receiver or sender.
     * @param array   $searchParams Search parameters.
     *
     * @return QueryBuilder
     */
    public function getUserAdMessageQuery($userId, $type = "receiver", $searchParams = array())
    {
        $query = $this->createQueryBuilder(self::ALIAS)
            ->select(self::ALIAS.'.id', AdRepository::ALIAS.'.id as ad_id')
            ->andWhere(self::ALIAS.'.status = '.self::MODERATION_QUEUE_STATUS_OKAY);

        if ($type == 'receiver') {
            $query->andWhere(self::ALIAS.'.receiver = '.$userId)
                ->leftJoin(self::ALIAS.'.ad', AdRepository::ALIAS, 'WITH', self::ALIAS.'.ad = '.AdRepository::ALIAS.'.id AND '.AdRepository::ALIAS.'.user = '.$userId);
        } elseif ($type == 'sender') {
            $query->andWhere(self::ALIAS.'.receiver = '.$userId)
                ->leftJoin(self::ALIAS.'.ad', AdRepository::ALIAS, 'WITH', self::ALIAS.'.ad = '.AdRepository::ALIAS.'.id AND '.AdRepository::ALIAS.'.user <> '.$userId);
        }

        if (isset($searchParams['adId']) && $searchParams['adId']) {
            $query->andWhere(self::ALIAS.'.ad = '.$searchParams['adId']);
        }

        $query->addGroupBy(self::ALIAS.'.message_ad_id')
            ->addOrderBy(self::ALIAS.'.created_at', 'DESC');

        return $query;
    }

    /**
     * Get ad user messages query,
     *
     * @param integer $userId Sender user id.
     * @param string  $adIds  Ad id array.
     *
     * @return QueryBuilder
     */
    public function getUserAdSortQuery($userId, $adIds)
    {
        $query = $this->createQueryBuilder(self::ALIAS)
            ->select(AdRepository::ALIAS.'.id as ad_id', 'MAX('.self::ALIAS.'.created_at) as latest_created_at')
            ->leftJoin(self::ALIAS.'.ad', AdRepository::ALIAS, 'WITH', self::ALIAS.'.ad = '.AdRepository::ALIAS.'.id AND '.AdRepository::ALIAS.'.id IN (:adIds)')
            ->setParameter('adIds', $adIds)
            ->andWhere(self::ALIAS.'.status = '.self::MODERATION_QUEUE_STATUS_OKAY);

        $query->addGroupBy(self::ALIAS.'.message_ad_id')
        ->addOrderBy('latest_created_at', 'DESC');

        return $query;
    }

    /**
     * Date compare.
     *
     * @param integer $a Array element.
     * @param integer $b Array element.
     *
     * @return number
     */
    public function dateCompare($a, $b)
    {
        $t1 = $a['created_at'];
        $t2 = $b['created_at'];

        return $t2 - $t1;
    }

    /**
     * Get full conversation.
     *
     * @param integer $id Message id
     * @param integer $messageReaderId Message reader id
     *
     * @return array
     */
    public function getFullconversation($id, $messageReaderId = null)
    {
        /*
        $childNode = null;
        $childrens = $this->getChildren($this->find($id), false, null, 'ASC', true);

        foreach ($childrens as $children) {
            $childNode = $children;
        }


        $fullconversationRes = $this->getPathQueryBuilder($childNode)
            ->select(AdRepository::ALIAS.'.id as ad_id', BaseEntityRepository::ALIAS.'.id as ad_status_id', AdRepository::ALIAS.'.title as ad_title, '.UserRepository::ALIAS.'.id as sender_user_id, node.id, node.text_message, node.created_at, node.sender_first_name, node.sender_last_name, node.attachment_path, node.attachment_file_name, node.attachment_org_file_name', UserRepository::ALIAS.'.image as sender_image, entity_user_status.id as user_status_id', UserRepository::ALIAS_R.'.id as receiver_user_id', 'node.receiver_first_name', 'node.receiver_last_name')
            ->innerJoin('node.sender', UserRepository::ALIAS)
            ->innerJoin('node.receiver', UserRepository::ALIAS_R)
            ->innerJoin('node.ad', AdRepository::ALIAS)
            ->innerJoin(AdRepository::ALIAS.'.status', BaseEntityRepository::ALIAS)
            ->innerJoin(UserRepository::ALIAS.'.status', 'entity_user_status')
            ->andWhere('node.lvl >= 0')
            ->andWhere('node.status = '.self::MODERATION_QUEUE_STATUS_OKAY)
            ->getQuery()
            ->getArrayResult();*/

        //var_dump($fullconversationRes);
        //echo "<br>===============================";

        /*
        $query = $this->createQueryBuilder('node')
            ->select(AdRepository::ALIAS.'.id as ad_id', BaseEntityRepository::ALIAS.'.id as ad_status_id', AdRepository::ALIAS.'.title as ad_title, '.UserRepository::ALIAS.'.id as sender_user_id, node.id, node.text_message, node.created_at, node.sender_first_name, node.sender_last_name, node.attachment_path, node.attachment_file_name, node.attachment_org_file_name', UserRepository::ALIAS.'.image as sender_image, entity_user_status.id as user_status_id', UserRepository::ALIAS_R.'.id as receiver_user_id', 'node.receiver_first_name', 'node.receiver_last_name')
            ->innerJoin('node.sender', UserRepository::ALIAS)
            ->innerJoin('node.receiver', UserRepository::ALIAS_R)
            ->innerJoin('node.ad', AdRepository::ALIAS)
            ->innerJoin(AdRepository::ALIAS.'.status', BaseEntityRepository::ALIAS)
            ->innerJoin(UserRepository::ALIAS.'.status', 'entity_user_status')
            ->andWhere('node.status = '.self::MODERATION_QUEUE_STATUS_OKAY)
            ->andWhere('(node.sender = -3464045 AND node.receiver = 507816) OR (node.sender = 507816 AND node.receiver = -3464045)')
            ->andWhere('node.ad = 13423939')
            ->orderBy('node.id', 'ASC')
            ->getQuery();

        $fullconversationRes = $query->getArrayResult();


        //var_dump($fullconversationRes); exit;
        return $fullconversationRes;
        */

        // By samir
        $message = $this->findOneBy(array('id' => $id));

        if ($message && $message->getSender() && $message->getReceiver() && $message->getMessageAdId()) {
            $qb = $this->createQueryBuilder(self::ALIAS)
            ->select(AdRepository::ALIAS.'.id as ad_id', BaseEntityRepository::ALIAS.'.id as ad_status_id', AdRepository::ALIAS.'.title as ad_title, '.UserRepository::ALIAS.'.id as sender_user_id, '.self::ALIAS.'.id, '.self::ALIAS.'.text_message', self::ALIAS.'.html_message, '.self::ALIAS.'.created_at, '.self::ALIAS.'.sender_first_name, '.self::ALIAS.'.sender_last_name, '.self::ALIAS.'.attachment_path, '.self::ALIAS.'.attachment_file_name, '.self::ALIAS.'.attachment_org_file_name', UserRepository::ALIAS.'.image as sender_image, entity_user_status.id as user_status_id', UserRepository::ALIAS_R.'.id as receiver_user_id', self::ALIAS.'.receiver_first_name', self::ALIAS.'.receiver_last_name', self::ALIAS.'.status as message_status', self::ALIAS.'.subject', self::ALIAS.'.originator_id', self::ALIAS.'.message_ad_id', self::ALIAS.'.is_oneclickenq_message', self::ALIAS.'.oneclickenq_reply', self::ALIAS.'.has_attachments', self::ALIAS.'.show_attachments_remove_message', self::ALIAS.'.show_attachments_removed_message', self::ALIAS.'.show_attachments_ignored_message')
            ->innerJoin(self::ALIAS.'.sender', UserRepository::ALIAS)
            ->innerJoin(self::ALIAS.'.receiver', UserRepository::ALIAS_R)
            ->leftJoin(self::ALIAS.'.ad', AdRepository::ALIAS)
            ->leftJoin(AdRepository::ALIAS.'.status', BaseEntityRepository::ALIAS)
            ->innerJoin(UserRepository::ALIAS.'.status', 'entity_user_status')
            //->andWhere(self::ALIAS.'.status = '.self::MODERATION_QUEUE_STATUS_OKAY)
            ->andWhere('('.self::ALIAS.'.sender = :sender_id AND '.self::ALIAS.'.receiver = :receiver_id) OR ('.self::ALIAS.'.sender = :receiver_id AND '.self::ALIAS.'.receiver = :sender_id)')
            ->andWhere(self::ALIAS.'.message_ad_id = :message_ad_id')
            ->setParameter('sender_id', $message->getSender()->getId())
            ->setParameter('receiver_id', $message->getReceiver()->getId())
            ->setParameter('message_ad_id', $message->getMessageAdId())
            ->orderBy(self::ALIAS.'.created_at', 'ASC');

            if ($messageReaderId != null) {
                $qb->andWhere(self::ALIAS.'.deleted_by_user1 <> :messageReaderId AND '.self::ALIAS.'.deleted_by_user2 <> :messageReaderId');
                $qb->setParameter('messageReaderId', $messageReaderId);
            }

            $query               = $qb->getQuery();
            $fullconversationRes = $query->getArrayResult();

            return $fullconversationRes;
        }

        return null;
    }

    /**
     * Get last conversation id.
     *
     * @param integer $id Message id
     *
     * @return array
     */
    public function getLastConversationId($id)
    {
        /*$childNode = null;
        $childrens = $this->getChildren($this->find($id), false, null, 'ASC', true);

        foreach ($childrens as $children) {
            $childNode = $children;
        }

        $fullconversationRes = $this->getPathQueryBuilder($childNode)
        ->select('node.id')
        ->andWhere('node.lvl >= 0')
        ->getQuery()
        ->getArrayResult();

        $lastConversationId = end($fullconversationRes);

        return $lastConversationId['id'];*/

        // By samir
        $message = $this->findOneBy(array('id' => $id));
        if ($message && $message->getSender() && $message->getReceiver() && $message->getMessageAdId()) {
            $lastConversation = $this->createQueryBuilder(self::ALIAS)
            ->andWhere('('.self::ALIAS.'.sender = :sender_id AND '.self::ALIAS.'.receiver = :receiver_id) OR ('.self::ALIAS.'.sender = :receiver_id AND '.self::ALIAS.'.receiver = :sender_id)')
            ->andWhere(self::ALIAS.'.message_ad_id = :message_ad_id')
            ->setParameter('sender_id', $message->getSender()->getId())
            ->setParameter('receiver_id', $message->getReceiver()->getId())
            ->setParameter('message_ad_id', $message->getMessageAdId())
            ->orderBy(self::ALIAS.'.created_at', 'desc')
            ->setMaxResults(1)
            ->getQuery()->getOneOrNullResult();

            if ($lastConversation) {
                return $lastConversation->getId();
            }

            return null;
        }
    }

    /**
     * Update is read by id.
     *
     * @param integer $id         Id of message.
     * @param integer $receiverId Receiver user id.
     * @param object  $container
     *
     * @return boolean
     */
    public function updateIsRead($id, $receiverId, $container = null)
    {
        $message = $this->findOneBy(array('id' => $id));
        if ($message) {
            $this->createQueryBuilder(self::ALIAS)
                 ->update()
                 ->set(self::ALIAS.'.is_read', 1)
                 ->andWhere('('.self::ALIAS.'.sender = :sender_id AND '.self::ALIAS.'.receiver = :receiver_id)')
                 ->andWhere(self::ALIAS.'.message_ad_id = :message_ad_id')
                 ->andWhere(self::ALIAS.'.is_read = 0')
                 ->setParameter('sender_id', $message->getSender()->getId())
                 ->setParameter('receiver_id', $receiverId)
                 ->setParameter('message_ad_id', $message->getMessageAdId())
                 ->getQuery()->execute();

            if ($container) {
                $this->removeMessageCache($message, $container);
            }
        }

        return true;
    }

    /**
     * Update is read by id.
     *
     * @param integer $id Id of message.
     *
     * @return boolean
     */
    public function getMainMessage($id)
    {
        $message = $this->findOneBy(array('id' => $id));
        if ($message && $message->getSender() && $message->getReceiver()) {
            return $this->createQueryBuilder(self::ALIAS)
            ->andWhere('('.self::ALIAS.'.sender = :sender_id AND '.self::ALIAS.'.receiver = :receiver_id) OR ('.self::ALIAS.'.sender = :receiver_id AND '.self::ALIAS.'.receiver = :sender_id)')
            ->andWhere(self::ALIAS.'.message_ad_id = :message_ad_id')
            ->setParameter('sender_id', $message->getSender()->getId())
            ->setParameter('receiver_id', $message->getReceiver()->getId())
            ->setParameter('message_ad_id', $message->getMessageAdId())
            ->orderBy(self::ALIAS.'.created_at', 'asc')
            ->setMaxResults(1)
            ->getQuery()->getOneOrNullResult();
        }

        return null;
    }

    /**
     * Get message path.
     *
     * @param object  $message    Message object.
     * @param integer $receiverId Receiver user id.
     *
     * @return boolean
     */
    public function getAllUnreadMessages($message, $receiverId)
    {
        return $this->createQueryBuilder(self::ALIAS)
        ->update()
        ->set(self::ALIAS.'.is_read', 1)
        ->andWhere('('.self::ALIAS.'.sender = :sender_id AND '.self::ALIAS.'.receiver = :receiver_id)')
        ->andWhere(self::ALIAS.'.ad = :ad_id')
        ->andWhere(self::ALIAS.'.is_read = 0')
        ->setParameter('sender_id', $message->getSender()->getId())
        ->setParameter('receiver_id', $receiverId)
        ->setParameter('ad_id', $message->getAd()->getId())
        ->getQuery()->execute();
    }

    /**
     * Get last message.
     *
     * @param integer $adId           Ad id.
     * @param integer $loggedinUserId Sender user id.
     *
     * @return mixed
     */
    public function getLastMessage($adId, $loggedinUserId)
    {
        /*$lastMessageObj = null;
        $query = $this->createQueryBuilder(self::ALIAS)
            ->andWhere(self::ALIAS.'.ad = '.$adId)
            ->andWhere(self::ALIAS.'.parent = 1')
            ->andWhere(self::ALIAS.'.sender = '.$loggedinUserId)
            ->setMaxResults(1);
        $firstMessageObj = $query->getQuery()->getOneOrNullResult();

        if ($firstMessageObj) {
            $childrens = $this->children($firstMessageObj, false, null, 'ASC', true);
            foreach ($childrens as $children) {
                $lastMessageObj = $children;
            }
        }

        if ($lastMessageObj) {
            return $lastMessageObj;
        }
        return $this->find(1);*/

        // By samir
        $firstMessageObj = $this->createQueryBuilder(self::ALIAS)
        ->andWhere(self::ALIAS.'.ad = :ad_id')
        ->andWhere(self::ALIAS.'.parent = 1 or '.self::ALIAS.'.parent IS NULL')
        ->andWhere(self::ALIAS.'.sender = :sender_id')
        ->setParameter('ad_id', $adId)
        ->setParameter('sender_id', $loggedinUserId)
        ->setMaxResults(1)
        ->orderBy(self::ALIAS.'.created_at', 'asc')
        ->getQuery()->getOneOrNullResult();

        if ($firstMessageObj) {
            $lastConversation = $this->createQueryBuilder(self::ALIAS)
            ->andWhere('('.self::ALIAS.'.sender = :sender_id AND '.self::ALIAS.'.receiver = :receiver_id) OR ('.self::ALIAS.'.sender = :receiver_id AND '.self::ALIAS.'.receiver = :sender_id)')
            ->andWhere(self::ALIAS.'.ad = :ad_id')
            ->setParameter('sender_id', $firstMessageObj->getSender()->getId())
            ->setParameter('receiver_id', $firstMessageObj->getReceiver()->getId())
            ->setParameter('ad_id', $firstMessageObj->getAd()->getId())
            ->orderBy(self::ALIAS.'.created_at', 'desc')
            ->setMaxResults(1)
            ->getQuery()->getOneOrNullResult();

            if ($lastConversation) {
                return $lastConversation;
            }

            return null;
        }
    }

    /**
     * Get last new message.
     *
     * @param integer $subject        Subject.
     * @param integer $loggedinUserId Sender user id.
     *
     * @return mixed
     */
    public function getLastNewMessage($subject, $loggedinUserId, $contactUser)
    {
        $subject = trim($subject);
        $firstMessageObj = $this->createQueryBuilder(self::ALIAS)
        ->andWhere(self::ALIAS.'.subject = :subject')
        ->andWhere(self::ALIAS.'.parent = 1 or '.self::ALIAS.'.parent IS NULL')
        ->andWhere(self::ALIAS.'.sender = :sender_id')
        ->andWhere(self::ALIAS.'.receiver = :receiver_id')
        ->setParameter('subject', $subject)
        ->setParameter('sender_id', $loggedinUserId)
        ->setParameter('receiver_id', $contactUser->getId())
        ->setMaxResults(1)
        ->orderBy(self::ALIAS.'.created_at', 'asc')
        ->getQuery()->getOneOrNullResult();

        if ($firstMessageObj) {
            $lastConversation = $this->createQueryBuilder(self::ALIAS)
            ->andWhere('('.self::ALIAS.'.sender = :sender_id AND '.self::ALIAS.'.receiver = :receiver_id) OR ('.self::ALIAS.'.sender = :receiver_id AND '.self::ALIAS.'.receiver = :sender_id)')
            ->andWhere(self::ALIAS.'.subject = :subject')
            ->setParameter('sender_id', $firstMessageObj->getSender()->getId())
            ->setParameter('receiver_id', $firstMessageObj->getReceiver()->getId())
            ->setParameter('subject', $firstMessageObj->getSubject())
            ->orderBy(self::ALIAS.'.created_at', 'desc')
            ->setMaxResults(1)
            ->getQuery()->getOneOrNullResult();

            if ($lastConversation) {
                return $lastConversation;
            }

            return null;
        }
    }

    /**
     * Handle moderation result.
     *
     * @param array  $moderationResult Moderation resutl array.
     * @param object $container        Container object.
     */
    public function handleModerationResult($moderationResult, $container)
    {
        if (count($moderationResult) > 0) {
            $moderationResult = array_change_key_case($moderationResult, CASE_LOWER);

            //var_dump($moderationResult);
            //exit;

            $message        = null;
            $fromMailClient = false;
            $isNewMessage   = false;

            if (isset($moderationResult['threadid'])) {
                $messageObj = $this->findOneBy(array('id' => $moderationResult['threadid']));

                if (isset($moderationResult['supplementaryinformation']) && $moderationResult['supplementaryinformation']) {
                    $message = $this->findOneBy(array('id' => $moderationResult['supplementaryinformation']));

                    if ($message) {
                        $message->setValue(serialize($moderationResult));

                        if (isset($moderationResult['moderationdecision']) && $moderationResult['moderationdecision'] == self::MODERATION_RESULT_OKEY) {
                            $message->setStatus(self::MODERATION_QUEUE_STATUS_OKAY);
                        } elseif (isset($moderationResult['moderationdecision']) && $moderationResult['moderationdecision'] == self::MODERATION_RESULT_REJECTED) {
                            $message->setStatus(self::MODERATION_QUEUE_STATUS_REJECTED);
                        }
                    }
                } else {
                    $id      = $this->getLastConversationId($moderationResult['threadid']);
                    $message = $this->findOneBy(array('id' => $id));

                    if ($message) {
                        // insert message
                        $isNewMessage = true;
                        $newMessage   = new Message();
                        $newMessage->setParent($message);

                        $value = null;
                        if ($message->getValue()) {
                            $value = unserialize($message->getValue());
                        }

                        // If same sender replies from mail client more than once in a row then keep sender and receiver emails same as last conversaion.
                        if ($value && isset($value['anonymisedsender']) && $value['anonymisedsender'] == $moderationResult['anonymisedsender']) {
                            $newMessage->setSender($message->getSender());
                            $newMessage->setReceiver($message->getReceiver());
                            $newMessage->setSenderEmail($message->getSenderEmail());
                            $newMessage->setReceiverEmail($message->getReceiverEmail());
                            $newMessage->setSenderFirstName($message->getSenderFirstName());
                            $newMessage->setReceiverFirstName($message->getReceiverFirstName());
                            $newMessage->setSenderLastName($message->getSenderLastName());
                            $newMessage->setReceiverLastName($message->getReceiverLastName());
                        } else {
                            // If recipient is same as receiver keep sender and receiver same as last one
                            if (strtolower($message->getReceiverEmail()) == strtolower($moderationResult['recipient'])) {
                                $newMessage->setSender($message->getSender());
                                $newMessage->setReceiver($message->getReceiver());
                                $newMessage->setSenderEmail($message->getSenderEmail());
                                $newMessage->setReceiverEmail($message->getReceiverEmail());
                                $newMessage->setSenderFirstName($message->getSenderFirstName());
                                $newMessage->setReceiverFirstName($message->getReceiverFirstName());
                                $newMessage->setSenderLastName($message->getSenderLastName());
                                $newMessage->setReceiverLastName($message->getReceiverLastName());
                            } else {
                                $newMessage->setSender($message->getReceiver());
                                $newMessage->setReceiver($message->getSender());
                                $newMessage->setSenderEmail($message->getReceiverEmail());
                                $newMessage->setReceiverEmail($message->getSenderEmail());
                                $newMessage->setSenderFirstName($message->getReceiverFirstName());
                                $newMessage->setReceiverFirstName($message->getSenderFirstName());
                                $newMessage->setSenderLastName($message->getReceiverLastName());
                                $newMessage->setReceiverLastName($message->getSenderLastName());
                            }
                        }

                        $newMessage->setTextMessage($moderationResult['mostrecentmessage']);
                        if (isset($moderationResult['moderationdecision']) && $moderationResult['moderationdecision'] == self::MODERATION_RESULT_OKEY) {
                            $newMessage->setStatus(self::MODERATION_QUEUE_STATUS_OKAY);
                        } elseif (isset($moderationResult['moderationdecision']) && $moderationResult['moderationdecision'] == self::MODERATION_RESULT_REJECTED) {
                            $newMessage->setStatus(self::MODERATION_QUEUE_STATUS_REJECTED);
                        } else {
                            $newMessage->setStatus(self::MODERATION_QUEUE_STATUS_SENT);
                        }
                        $newMessage->setAd($message->getAd());
                        $newMessage->setValue(serialize($moderationResult));
                        $newMessage->setOriginatorId($messageObj->getSender()->getId());
                        $newMessage->setMessageAdId($message->getMessageAdId());
                        $newMessage->setSubject($message->getSubject());

                        if (isset($moderationResult['attachments']) && is_array($moderationResult['attachments']) && count($moderationResult['attachments']) > 0) {
                            $newMessage->setHasAttachments(1);
                        }

                        unset($message);
                        $message = $newMessage;
                    }
                }
            }

            if ($message) {
                $this->_em->persist($message);
                $this->_em->flush($message);

                if ($isNewMessage && isset($moderationResult['moderationdecision'])) {
                    if (isset($moderationResult['attachments']) && is_array($moderationResult['attachments']) && count($moderationResult['attachments']) > 0) {
                        $webPath = $container->get('kernel')->getRootDir().'/../web';
                        CommonManager::createGroupDirectory($webPath.'/'.$container->getParameter('fa.message.attachment.dir'), $message->getId());
                        $attachmentPath   = $container->getParameter('fa.message.attachment.dir').'/'.CommonManager::getGroupDirNameById($message->getId());
                        $sessionId        = CommonManager::generateHash();
                        $totalAttachments = 0;
                        foreach ($moderationResult['attachments'] as $key => $attachmentArray) {
                            $hash             = CommonManager::generateHash();
                            $sessionId        = CommonManager::generateHash();
                            $fileOriginalName = $attachmentArray['Name'];
                            $fileMimeType     = $attachmentArray['ContentType'];
                            $allowedMimeTypes = MessageAttachmentsRepository::getAllowedMimeTypes();

                            //Ignore if disallowed files are attached (e.g. exe, bat, sys etc.)
                            if (in_array($fileMimeType, $allowedMimeTypes)) {
                                $fileExtension   = substr(strrchr($fileOriginalName, '.'), 1);
                                $fileName        = $sessionId.'_'.$hash.'.'.$fileExtension;
                                $destinationPath = $webPath.'/'.$attachmentPath.'/'.$fileName;
                                CommonManager::downloadFileByUrl($attachmentArray['FileLocation'], $destinationPath);
                                $fileSize = filesize($destinationPath);

                                $objMA = new MessageAttachments();
                                $objMA->setMessage($message);
                                $objMA->setSessionId($sessionId);
                                $objMA->setHash($hash);
                                $objMA->setPath($attachmentPath);
                                $objMA->setOriginalFileName($fileOriginalName);
                                $objMA->setMimeType($fileMimeType);
                                $objMA->setSize($fileSize);
                                $objMA->setIsImage(0);
                                if (substr($fileMimeType, 0, 5) == 'image') {
                                    $objMA->setIsImage(1);
                                }

                                $this->_em->persist($objMA);
                                $totalAttachments++;
                            }
                        }

                        $messageObjectChnaged = false;
                        //If any disallowed mime types attachments ignored.
                        if ($totalAttachments < count($moderationResult['attachments'])) {
                            $message->setShowAttachmentsIgnoredMessage(1);
                            $messageObjectChnaged = true;
                        }

                        //If all attachments are ignored due to disallowed mime types.
                        if ($totalAttachments == 0) {
                            $message->setHasAttachments(0);
                            $messageObjectChnaged = true;
                        }

                        if ($messageObjectChnaged) {
                            $this->_em->persist($message);
                        }

                        $this->_em->flush();
                        $this->_em->clear();
                    }
                }

                if (isset($moderationResult['moderationdecision']) && $moderationResult['moderationdecision'] == self::MODERATION_RESULT_OKEY) {
                    try {
                        // send contact request email
                        if ($message->getMessageAdId() > 0) {
                            $this->sendContactRequestEmail($message, $moderationResult, $container);
                        } else {
                            $this->sendContactUserRequestEmail($message, $moderationResult, $container);
                        }
                    } catch (\Exception $e) {
                        if ($container) {
                            CommonManager::sendErrorMail($container, 'Error: Problem in sending email: '.$message->getAd()->getId(), $e->getMessage(), $e->getTraceAsString());
                        }
                    }

                    // touchpoint entry for newsletter & dotmailer
                    try {
                        if ($message->getId() == $moderationResult['threadid']) {
                            if ($message->getMessageAdId() > 0) {
                                $this->_em->getRepository('FaDotMailerBundle:Dotmailer')->doTouchPointEntry($message->getSender()->getId(), $message->getAd()->getId(), DotmailerRepository::TOUCH_POINT_ENQUIRY, $container);
                            } else {
                                $this->_em->getRepository('FaDotMailerBundle:Dotmailer')->doTouchPointEntryByUser($message->getSender()->getId(), DotmailerRepository::TOUCH_POINT_ENQUIRY, $container);
                            }
                        } elseif ($message->getSender()->getId() == $messageObj->getSender()->getId()) {
                            $dotmailer = $this->_em->getRepository('FaDotMailerBundle:Dotmailer')->findOneBy(array('email' => $message->getSenderEmail()));
                            if (!$dotmailer) {
                                if ($message->getMessageAdId() > 0) {
                                    $this->_em->getRepository('FaDotMailerBundle:Dotmailer')->doTouchPointEntry($message->getSender()->getId(), $message->getAd()->getId(), DotmailerRepository::TOUCH_POINT_ENQUIRY, $container);
                                } else {
                                    $this->_em->getRepository('FaDotMailerBundle:Dotmailer')->doTouchPointEntryByUser($message->getSender()->getId(), DotmailerRepository::TOUCH_POINT_ENQUIRY, $container);
                                }
                            }
                        }
                    } catch (\Exception $e) {
                        if ($container) {
                            CommonManager::sendErrorMail($container, 'Error: Problem in touch point Enquiry: '.$message->getAd()->getId(), $e->getMessage(), $e->getTraceAsString());
                        }
                    }
                } elseif (isset($moderationResult['moderationdecision']) && $moderationResult['moderationdecision'] == self::MODERATION_RESULT_REJECTED) {
                    try {
                        // send contact request rejected email - As par @Marta no need to send email for now
                        //$this->sendContactRequestRejectedEmail($message, $moderationResult, $container);
                    } catch (\Exception $e) {
                    }
                }
            }// message check if completes
        }// main if completed
    }

    /**
     * Send contact user request email.
     *
     * @param object $message
     * @param array  $moderationResult Moderation resutl array.
     * @param object $container        Container object.
     */
    public function sendContactUserRequestEmail($message, $moderationResult, $container)
    {
        $parameters = $this->generateContactUserEmailParameters($message, $moderationResult, $container);
        $template = 'you_have_a_message_general';

        $replayTo = $moderationResult['anonymisedsender'];

        // receiver email
        $receiverEmail = $message->getReceiver()->getEmail();

        $attachment = array();
        if ($message->getHasAttachments() > 0) {
            $objMessageAttachments = $this->_em->getRepository('FaMessageBundle:MessageAttachments')->getMessageAttachments($message->getId());
            if ($objMessageAttachments) {
                foreach ($objMessageAttachments as $objMessageAttachment) {
                    $fileExtension                                            = substr(strrchr($objMessageAttachment->getOriginalFileName(), '.'), 1);
                    $fileName                                                 = $objMessageAttachment->getSessionId().'_'.$objMessageAttachment->getHash().'.'.$fileExtension;
                    $attachment[$objMessageAttachment->getOriginalFileName()] = $container->get('kernel')->getRootDir().'/../web/'.$objMessageAttachment->getPath().'/'.$fileName;
                }
            }
        }
        
        $adultEmailer = '';
        
        $categoryId = $message->getReceiver()->getBusinessCategoryId();
        if($categoryId!='') {
            $rootCategoryId = $this->_em->getRepository('FaEntityBundle:Category')->getRootCategoryId($categoryId, $container);
            if($rootCategoryId == CategoryRepository::ADULT_ID) { $adultEmailer = 'yes'; }
        }
        
        $emailIdentifier = $template;
        if($adultEmailer=='yes') { $emailIdentifier = $template.'_adult'; }
        
        $container->get('fa.mail.manager')->send($receiverEmail, $emailIdentifier, $parameters, CommonManager::getCurrentCulture($container), $attachment, array(), array(), array(), null, $replayTo);
    }

    /**
     * Send contact request email.
     *
     * @param object $message
     * @param array  $moderationResult Moderation resutl array.
     * @param object $container        Container object.
     */
    public function sendContactRequestEmail($message, $moderationResult, $container)
    {
        $parameters = $this->generateEmailParameters($message, $moderationResult, $container);

        $ad      = $message->getAd();
        $ad_user = $message->getAd()->getUser();
        $receiver = $message->getReceiver();

        // TODO: Replace from with anonymized email address.
        //$from = 'test@contactmoderator.test.friday-ad.co.uk';
        //$from = $container->getParameter('fa.contact.moderation.api.test.name').'@'.$container->getParameter('fa.contact.moderation.api.domain');

        if ($ad_user->getId() == $receiver->getId()) {
            // I am seller
            $template = 'you_have_an_enquiry_reply_seller';
        } else {
            // I am buyer
            $template = 'you_have_a_reply_buyer';
            $isBuyerReviewd  =  $this->_em->getRepository('FaUserBundle:UserReview')->isAdReviewable($ad->getId(), $ad_user->getId(), $receiver->getId(), $receiver->getStatus()->getId(), true);
            $isSellerReviewd =  $this->_em->getRepository('FaUserBundle:UserReview')->isAdReviewable($ad->getId(), $receiver->getId(), $ad_user->getId(), $ad_user->getStatus()->getId(), true);

            if ($isBuyerReviewd) {
                $this->_em->getRepository('FaMessageBundle:NotificationMessageEvent')->setNotificationEvents('leave_review_for_buyer_after_contact', $ad->getId(), $ad_user->getId());
            }

            if ($isSellerReviewd) {
                $this->_em->getRepository('FaMessageBundle:NotificationMessageEvent')->setNotificationEvents('leave_review_for_seller_after_contact', $ad->getId(), $receiver->getId());
            }
        }

        $replayTo = $moderationResult['anonymisedsender'];

        $attachment = array();
        if ($message->getAttachmentPath() && $message->getAttachmentFileName() && $message->getAttachmentOrgFileName()) {
            $attachment[$message->getAttachmentOrgFileName()] = $container->get('kernel')->getRootDir().'/../web/'.$message->getAttachmentPath().'/'.$message->getAttachmentFileName();
        }

        if ($message->getHasAttachments() > 0) {
            $objMessageAttachments = $this->_em->getRepository('FaMessageBundle:MessageAttachments')->getMessageAttachments($message->getId());
            if ($objMessageAttachments) {
                foreach ($objMessageAttachments as $objMessageAttachment) {
                    $fileExtension                                            = substr(strrchr($objMessageAttachment->getOriginalFileName(), '.'), 1);
                    $fileName                                                 = $objMessageAttachment->getSessionId().'_'.$objMessageAttachment->getHash().'.'.$fileExtension;
                    $attachment[$objMessageAttachment->getOriginalFileName()] = $container->get('kernel')->getRootDir().'/../web/'.$objMessageAttachment->getPath().'/'.$fileName;
                }
            }
        }

        //send push notifications
        CommonManager::sendPushNotificationMessage('You have a new message!', 'New-message', $parameters['url_reply_seller'], $message->getReceiver(), $container);

        // receiver email
        $receiverEmail = $message->getReceiver()->getEmail();
        
        $adultEmailer = '';
        
        $categoryId = $message->getReceiver()->getBusinessCategoryId();
        if($categoryId!='') {
            $rootCategoryId = $this->_em->getRepository('FaEntityBundle:Category')->getRootCategoryId($categoryId, $container);
            if($rootCategoryId == CategoryRepository::ADULT_ID) { $adultEmailer = 'yes'; }
        }
        
        $emailIdentifier = $template;
        if($adultEmailer=='yes') { $emailIdentifier = $template.'_adult'; }

        $container->get('fa.mail.manager')->send($receiverEmail, $emailIdentifier, $parameters, CommonManager::getCurrentCulture($container), $attachment, array(), array(), array(), null, $replayTo);
    }

    /**
     * get sender message count
     *
     * @param integer $sender_id
     * @param integer $reciever_id
     * @param integer $ad_id
     *
     * @return integer
     */
    public function getSenderMessageCounts($sender_id, $reciever_id, $ad_id)
    {
        $qb = $this->createQueryBuilder(self::ALIAS);
        $qb->select('COUNT('.self::ALIAS.')');
        $qb->andWhere(self::ALIAS.'.sender = :sender');
        $qb->andWhere(self::ALIAS.'.receiver = :receiver');
        $qb->andWhere(self::ALIAS.'.message_ad_id = :message_ad_id');
        $qb->andWhere(self::ALIAS.'.status = :status');
        $qb->setParameter('sender', $sender_id);
        $qb->setParameter('receiver', $reciever_id);
        $qb->setParameter('message_ad_id', $ad_id);
        $qb->setParameter('status', self::MODERATION_QUEUE_STATUS_OKAY);

        return $qb->getQuery()->getSingleScalarResult();
    }

    /**
     * Generate email parameters.
     *
     * @param Message $message
     * @param array   $moderationResult Moderation resutl array.
     * @param object  $container        Container object.
     *
     * @return array
     */
    public function generateEmailParameters(Message $message, $moderationResult, $container)
    {
        // sender information
        $sender = $message->getSender();
        $parameters['user_first_name']      = $message->getReceiverFirstName();
        $parameters['user_last_name']       = $message->getReceiverLastName();
        $parameters['sender_profile_name']  = $sender->getProfileName();

        // ad information
        $ad = $message->getAd();
        if ($ad) {
            $parameters['text_ad_title']       = $ad->getTitle();
            $parameters['text_ad_category']    = ($ad->getCategory())?$ad->getCategory()->getName():'';
            $parameters['text_ad_description'] = $ad->getDescription();
        } else {
            $parameters['text_ad_title']       = '';
            $parameters['text_ad_category']    = '';
            $parameters['text_ad_description'] = '';
        }
        

        $parameters['url_ad_edit']         = $container->get('router')->generate('ad_edit', array('id' => $ad->getId()), true);
        if ($url = $container->get('router')->generate('ad_detail_page_by_id', array('id' => $ad->getId()), true)) {
            $parameters['url_ad_view'] = $url;
        }
        // TODO: {url_review_buyer}
        $parameters['url_account_dashboard'] = '';
        //image url
        if ($url = $this->_em->getRepository('FaAdBundle:AdImage')->getImageUrl($ad, '300X225', 1, $container)) {
            $parameters['url_ad_main_photo'] = $url;
        }

        // message information
        if ($message->getOneclickenqReply() == 'No') {
            $adUrl = $container->get('fa_ad.manager.ad_routing')->getDetailUrl($ad);
            $adLink      = '<a href="'.$adUrl.'" target="_blank" class="green-link" style="text-decoration:none; font-family:Arial, Helvetica, sans-serif; font-size:12px; color:#00000e;">similar ads</a>';
            $translator  = CommonManager::getTranslator($container);
            $itemSoldMsg = $translator->trans(self::ONE_CLIK_NO_REPLY_MESSAGE_FOR_BUYER, array('%site_name%' => $container->getParameter('service_name'), '%similar_ads%' => $adLink), 'frontend-message-detail');
            $parameters['text_enquiry_text'] = $itemSoldMsg;
        } else {
            $parameters['text_enquiry_text'] = $message->getTextMessage();
        }
        $parameters['email_reply_address'] = $moderationResult['anonymisedsender'];

        // user_ad_message_reply
        $parameters['url_reply_seller'] = $container->get('router')->generate('user_ad_message_reply_email', array('replyId' => $message->getId()), true);

        return $parameters;
    }

    /**
     * Generate email parameters.
     *
     * @param Message $message
     * @param array   $moderationResult Moderation resutl array.
     * @param object  $container        Container object.
     *
     * @return array
     */
    public function generateContactUserEmailParameters(Message $message, $moderationResult, $container)
    {
        //send push notifications
        CommonManager::sendPushNotificationMessage('You have a new message!', 'New-message', $container->get('router')->generate('user_ad_message_reply_email', array('replyId' => $message->getId()), true), $message->getReceiver(), $container);

        // sender information
        $sender = $message->getSender();
        $parameters['user_first_name']      = $message->getReceiverFirstName();
        $parameters['user_last_name']       = $message->getReceiverLastName();
        $parameters['sender_profile_name']  = $sender->getProfileName();

        $parameters['url_account_dashboard'] = $container->get('router')->generate('dashboard_home', array(), true);

        // message information
        $parameters['text_enquiry_text']   = $message->getTextMessage();
        $parameters['email_reply_address'] = $moderationResult['anonymisedsender'];
        $parameters['text_subject'] = $message->getSubject();

        // user_ad_message_reply
        $parameters['url_reply_seller'] = $container->get('router')->generate('user_ad_message_reply_email', array('replyId' => $message->getId()), true);

        return $parameters;
    }

    /**
     * Get total ad messages for ad id.
     *
     * @param string  $receiverId
     * @param array   $adId Ad id array.
     * @param integer $time integer
     *
     * @return array
     */
    public function getAdTotalMessageArrayByAdId($receiverId, $adId = array(), $time = false)
    {
        $qb = $this->createQueryBuilder(self::ALIAS)
        ->select('COUNT(DISTINCT '.self::ALIAS.'.sender) as total_ad_message', AdRepository::ALIAS.'.id as ad_id')
        ->leftJoin(self::ALIAS.'.ad', AdRepository::ALIAS)
        ->andWhere(self::ALIAS.'.status = '.self::MODERATION_QUEUE_STATUS_OKAY)
        ->andWhere(self::ALIAS.'.receiver = '.$receiverId)
        ->groupBy(self::ALIAS.'.message_ad_id');

        if (!is_array($adId)) {
            $adId = array($adId);
        }

        if ($time) {
            $qb->andWhere(self::ALIAS.'.created_at >= :created_at');
            $qb->setParameter('created_at', $time);
        }

        if (count($adId)) {
            $qb->andWhere(self::ALIAS.'.ad IN (:adId)');
            $qb->setParameter('adId', $adId);
        }

        $adMessages        = $qb->getQuery()->getArrayResult();
        $adMessageCountArr = array();
        if (count($adMessages)) {
            foreach ($adMessages as $adMessage) {
                $adMessageCountArr[$adMessage['ad_id']] = $adMessage['total_ad_message'];
            }
        }

        return $adMessageCountArr;
    }



    /**
     * Get total ad new messages for ad id.
     *
     * @param string $receiverId
     * @param array  $adId Ad id array.
     *
     * @return array
     */
    public function getAdTotalNewMessageArrayByAdId($receiverId, $adId = array())
    {
        $qb = $this->createQueryBuilder(self::ALIAS)
        ->select('COUNT('.self::ALIAS.'.id) as total_new_ad_message', AdRepository::ALIAS.'.id as ad_id')
        ->leftJoin(self::ALIAS.'.ad', AdRepository::ALIAS)
        ->andWhere(self::ALIAS.'.status = '.self::MODERATION_QUEUE_STATUS_OKAY)
        ->andWhere(self::ALIAS.'.is_read = 0')
        ->andWhere(self::ALIAS.'.receiver = '.$receiverId)
        ->groupBy(self::ALIAS.'.message_ad_id');

        if (!is_array($adId)) {
            $adId = array($adId);
        }

        if (count($adId)) {
            $qb->andWhere(self::ALIAS.'.ad IN (:adId)');
            $qb->setParameter('adId', $adId);
        }

        $adMessages        = $qb->getQuery()->getArrayResult();
        $adMessageCountArr = array();
        if (count($adMessages)) {
            foreach ($adMessages as $adMessage) {
                $adMessageCountArr[$adMessage['ad_id']] = $adMessage['total_new_ad_message'];
            }
        }

        return $adMessageCountArr;
    }

    /**
     * This function is used to send the contact into moderation.
     *
     * @param object $message   Message object.
     * @param object $container Container object.
     *
     * @return boolean.
     */
    public function sendContactIntoModeration($message, $container)
    {
        $buildRequest      = $container->get('fa_message.contact_moderation.request_build');
        $moderationRequest = $buildRequest->init($message);
        $moderationRequest = json_encode($moderationRequest);
        if ($buildRequest->sendRequest($moderationRequest)) {
            $message->setStatus(MessageRepository::MODERATION_QUEUE_STATUS_SENT);
            $this->_em->persist($message);
            $this->_em->flush($message);
            return true;
        }

        return false;
    }

    /**
     * Update contact seller.
     *
     * @param object $message      Message.
     * @param object $parent       Parent message.
     * @param object $loggedinUser Loggedin user.
     * @param object $ad           Ad.
     * @param string $ip           User's ip.
     *
     * @return object
     */
    public function updateContactSellerMessage($message, $parent, $loggedinUser, $ad, $ip)
    {
        if ($parent && $parent->getId() != '1') {
            $originatorID = $parent->getOriginatorId();
        } else {
            $originatorID = $loggedinUser->getId();
        }

        $adUser = $ad->getUser();
        $message->setParent($parent);
        $message->setSender($loggedinUser);
        $message->setReceiver($adUser);
        $message->setReceiverFirstName($adUser->getProfileName());
        $message->setReceiverLastName(null);
        $message->setReceiverEmail($adUser->getEmail());
        $message->setStatus(0);
        $message->setAd($ad);
        $message->setMessageAdId($ad->getId());
        $message->setIsRead(0);
        $message->setIpAddress($ip);
        $message->setOriginatorId($originatorID);

        if ($loggedinUser->getIsHalfAccount() == 0) {
            $message->setSenderEmail($loggedinUser->getEmail());
        }
        return $message;
    }

    /**
     * Update contact user.
     *
     * @param object $message      Message.
     * @param object $parent       Parent message.
     * @param object $loggedinUser Loggedin user.
     * @param object $ad           Ad.
     * @param string $ip           User's ip.
     *
     * @return object
     */
    public function updateContactUserMessage($message, $parent, $loggedinUser, $contactUser, $ip)
    {
        if ($parent && $parent->getId() != '1') {
            $originatorID = $parent->getOriginatorId();
        } else {
            $originatorID = $loggedinUser->getId();
        }

        $message->setParent($parent);
        $message->setSender($loggedinUser);
        $message->setSenderEmail($loggedinUser->getEmail());
        $message->setReceiver($contactUser);
        $message->setReceiverFirstName(($contactUser->getProfileUsername() ? $contactUser->getProfileUsername() : $contactUser->getProfileName()));
        $message->setSenderFirstName(($loggedinUser->getProfileUsername() ? $loggedinUser->getProfileUsername() : $loggedinUser->getProfileName()));
        $message->setReceiverLastName(null);
        $message->setReceiverEmail($contactUser->getEmail());
        $message->setStatus(0);
        $message->setIsRead(0);
        $message->setIpAddress($ip);
        if (!$parent) {
            $message->setMessageAdId($this->getMaxMessageAdId());
        } else {
            $message->setMessageAdId($parent->getMessageAdId());
        }
        $message->setOriginatorId($originatorID);

        return $message;
    }

    /**
     * Get max message ad id.
     *
     * @param string  $adId  Ad id.
     * @param boolean $isNew Flag for new.
     *
     * @return integer
     */
    public function getMaxMessageAdId()
    {
        $query = $this->createQueryBuilder(self::ALIAS);

        $query->addOrderBy(self::ALIAS.'.message_ad_id', 'ASC')
        ->andWhere(self::ALIAS.'.ad IS NULL')
        ->setMaxResults(1);
        $maxOrderObj = $query->getQuery()->getOneOrNullResult();

        $maxOrder = -1;
        if ($maxOrderObj) {
            $maxOrder = $maxOrderObj->getMessageAdId() - 1;
        }

        return $maxOrder;
    }

    /**
     * Get ad user messages query.
     *
     * @param integer $userId       User id.
     * @param string  $type         Type either receiver or sender.
     * @param array   $searchParams Search parameters.
     *
     * @return QueryBuilder
     */
    public function getMessageIdsQueryBuilder($userId, $type = "receiver")
    {
        if ($type == 'receiver') {
            $adAlias = AdRepository::ALIAS_R;
        } elseif ('sender') {
            $adAlias = AdRepository::ALIAS_S;
        }

        $qb = $this->createQueryBuilder($type)
        ->select('MAX('.$type.'.id)')
        ->innerJoin($type.'.ad', $adAlias);

        if ($type == 'receiver') {
            $qb->andWhere($adAlias.'.user ='.$userId);
            $qb->groupBy($type.'.message_ad_id', $type.'.sender')
            ->andWhere($type.'.receiver = '.$userId);
        } elseif ($type == 'sender') {
            $qb->andWhere($type.'.orginator_id ='.$userId);
            $qb->groupBy($type.'.message_ad_id');
        } elseif ($type == 'sender_all') {
            $qb->andWhere($adAlias.'.user <>'.$userId);
            $qb->groupBy($type.'.message_ad_id', $type.'.receiver');
        }

        $qb->andWhere($type.'.status = '.self::MODERATION_QUEUE_STATUS_OKAY);

        return $qb;
    }

    /**
     * Get user messages
     *
     * @param integer $userId       User id.
     * @param string  $type         Type either receiver or sender.
     * @param array   $searchParams Search parameters.
     *
     * @return QueryBuilder
     */
    public function getUserMessagesQuery($userId, $type = "all")
    {
        if ($type == 'all') {
            $subSenderQB   = $this->getMessageIdsQueryBuilder($userId, 'sender_all');
            $subReceiverQB = $this->getMessageIdsQueryBuilder($userId, 'receiver');
        } else {
            $subQB = $this->getMessageIdsQueryBuilder($userId, $type);
        }
        $mainQB = $this->createQueryBuilder(self::ALIAS);

        $query = $mainQB->select(self::ALIAS.'.id', UserRepository::ALIAS_S.'.id as sender_id', UserRepository::ALIAS_R.'.id as receiver_id', UserRepository::ALIAS_S.'.image as sender_image', AdRepository::ALIAS.'.id as ad_id', AdRepository::ALIAS.'.title as ad_title', self::ALIAS.'.text_message', self::ALIAS.'.html_message', self::ALIAS.'.sender_first_name', self::ALIAS.'.sender_last_name', self::ALIAS.'.receiver_first_name', self::ALIAS.'.receiver_last_name', self::ALIAS.'.is_read', self::ALIAS.'.created_at', self::ALIAS.'.attachment_org_file_name', self::ALIAS.'.is_oneclickenq_message', self::ALIAS.'.oneclickenq_reply', self::ALIAS.'.has_attachments', self::ALIAS.'.show_attachments_remove_message', self::ALIAS.'.show_attachments_removed_message', self::ALIAS.'.show_attachments_ignored_message')
                ->leftJoin(self::ALIAS.'.ad', AdRepository::ALIAS)
                ->innerJoin(self::ALIAS.'.sender', UserRepository::ALIAS_S)
                ->innerJoin(self::ALIAS.'.receiver', UserRepository::ALIAS_R);

        if ($type == 'all') {
            $query->where($mainQB->expr()->in(self::ALIAS.'.id', $subReceiverQB->getDQL()));
            $query->orWhere($mainQB->expr()->in(self::ALIAS.'.id', $subSenderQB->getDQL()));
        } else {
            $query->where($mainQB->expr()->in(self::ALIAS.'.id', $subQB->getDQL()));
        }
        $query->orderBy(self::ALIAS.'.created_at', 'DESC');
        $finalQuery = $query->getQuery();

        //echo $finalQuery->getSQL(); exit;

        return $finalQuery;
    }

    /**
     * Get last conversion of sender receiver for a particular ad.
     *
     * @param integer $adId       Ad id.
     * @param integer $senderId   Sender user id.
     * @param integer $receiverId Receiver user id.
     *
     * @return mixed
     */
    public function getLastConversionOfTwoUsersForAd($adId, $userId1, $userId2)
    {
        $query = $this->createQueryBuilder(self::ALIAS)
        ->andWhere(self::ALIAS.'.message_ad_id = '.$adId)
        ->andWhere(self::ALIAS.'.sender = '.$userId1)
        ->andWhere(self::ALIAS.'.receiver = '.$userId2)
        ->andWhere(self::ALIAS.'.status = 1')
        ->orderBy(self::ALIAS.'.created_at', 'DESC')
        ->setMaxResults(1);

        $objMessage1 = $query->getQuery()->getOneOrNullResult();

        $query = $this->createQueryBuilder(self::ALIAS)
        ->andWhere(self::ALIAS.'.message_ad_id = '.$adId)
        ->andWhere(self::ALIAS.'.sender = '.$userId2)
        ->andWhere(self::ALIAS.'.receiver = '.$userId1)
        ->andWhere(self::ALIAS.'.status = 1')
        ->orderBy(self::ALIAS.'.created_at', 'DESC')
        ->setMaxResults(1);

        $objMessage2 = $query->getQuery()->getOneOrNullResult();

        if ($objMessage1 && $objMessage2) {
            if ($objMessage1->getId() > $objMessage2->getId()) {
                return $objMessage1;
            } else {
                return $objMessage2;
            }
        } elseif ($objMessage1) {
            return $objMessage1;
        } elseif ($objMessage2) {
            return $objMessage2;
        } else {
            return null;
        }
    }

    /**
     * Update contact seller.
     *
     * @param object $message      Message.
     * @param object $parent       Parent message.
     * @param object $loggedinUser Loggedin user.
     * @param object $ad           Ad.
     * @param string $ip           User's ip.
     *
     * @return object
     */
    public function setMessageDetail($objMessage, $objParentMessage, $objAd, $objSender, $objReceiver, $ipAddress)
    {
        if ($objParentMessage) {
            $originatorID = $objParentMessage->getOriginatorId();
        } else {
            $originatorID = $objSender->getId();
        }

        $objMessage->setParent($objParentMessage);
        $objMessage->setSender($objSender);
        $objMessage->setSenderFirstName($objSender->getProfileName());
        $objMessage->setSenderLastName(null);
        $objMessage->setSenderEmail($objSender->getEmail());
        $objMessage->setReceiver($objReceiver);
        $objMessage->setReceiverFirstName($objReceiver->getProfileName());
        $objMessage->setReceiverLastName(null);
        $objMessage->setReceiverEmail($objReceiver->getEmail());
        $objMessage->setStatus(0);
        $objMessage->setAd($objAd);
        $objMessage->setIsRead(0);
        $objMessage->setIpAddress($ipAddress);
        $objMessage->setOriginatorId($originatorID);
        $objMessage->setMessageAdId($objAd->getId());

        return $objMessage;
    }

    /**
     * Get user messages
     *
     * @param integer $userId       User id.
     * @param string  $type         Type either receiver or sender.
     * @param array   $searchParams Search parameters.
     *
     * @return QueryBuilder
     */
    /**
         * Get user messages
         *
         * @param integer $userId       User id.
         * @param string  $type         Type either receiver or sender.
         * @param array   $searchParams Search parameters.
         *
         * @return QueryBuilder
         */
    public function getUserMessageIdsQuery($userId, $type = "all")
    {
        $query = $this->createQueryBuilder(self::ALIAS)
        ->select('MAX('.self::ALIAS.'.id) as msg_id', AdRepository::ALIAS.'.id as ad_id', AdRepository::ALIAS.'.title as ad_title', self::ALIAS.'.subject', self::ALIAS.'.message_ad_id')
        ->leftJoin(self::ALIAS.'.ad', AdRepository::ALIAS)
        ->where(
            '('.
                '('.self::ALIAS.'.sender = :senderId) OR '.
                '('.self::ALIAS.'.receiver = :receiverId AND '.self::ALIAS.'.status = :msgStatus)'.
            ') AND'.
            '('.
                '('.self::ALIAS.'.deleted_by_user1 <> :loggedInUserId) AND '.
                '('.self::ALIAS.'.deleted_by_user2 <> :loggedInUserId)'.
            ')'
        )
        ->setParameter('senderId', $userId)
        ->setParameter('receiverId', $userId)
        ->setParameter('msgStatus', '1')
        ->setParameter('loggedInUserId', $userId)
        ->groupBy(self::ALIAS.'.message_ad_id', self::ALIAS.'.originator_id')
        ->addOrderBy(self::ALIAS.'.created_at', 'DESC')
        ->addOrderBy('msg_id', 'DESC');

        if ($type == 'receiver') {
            $query = $query->andWhere(AdRepository::ALIAS.'.user = (:userId)')
            ->setParameter('userId', $userId);
        } elseif ($type == 'sender') {
            $query = $query->andWhere(AdRepository::ALIAS.'.user <> (:userId)')
            ->setParameter('userId', $userId);
        }

        return $query->getQuery();
    }

    /**
     * Get user messages
     *
     * @param integer $userId       User id.
     * @param string  $type         Type either receiver or sender.
     * @param array   $searchParams Search parameters.
     *
     * @return QueryBuilder
     */
    public function getUserMessageDetailsByIds($messageIds)
    {
        $query = $this->createQueryBuilder(self::ALIAS)
        ->select(self::ALIAS.'.id', 'IDENTITY('.self::ALIAS.'.sender) as sender_id', 'IDENTITY('.self::ALIAS.'.receiver) as receiver_id', self::ALIAS.'.text_message', self::ALIAS.'.html_message', self::ALIAS.'.sender_first_name', self::ALIAS.'.sender_last_name', self::ALIAS.'.receiver_first_name', self::ALIAS.'.receiver_last_name', self::ALIAS.'.is_read', self::ALIAS.'.created_at', self::ALIAS.'.attachment_org_file_name', self::ALIAS.'.is_oneclickenq_message', self::ALIAS.'.oneclickenq_reply', self::ALIAS.'.has_attachments', self::ALIAS.'.show_attachments_remove_message', self::ALIAS.'.show_attachments_removed_message', self::ALIAS.'.show_attachments_ignored_message')
        ->where(self::ALIAS.'.id IN (:messageIds)')
        ->setParameter('messageIds', $messageIds)
        ->orderBy(self::ALIAS.'.created_at', 'DESC');

        return $query->getQuery()->getArrayResult();
    }

    /**
     * Get message count.
     *
     * @param integer $userId User id.
     * @param string  $type Type either receiver or sender.
     *
     * @return integer message count
     */
    public function getMessageCount($userId, $type = "receiver", $container = null)
    {
        if ($container) {
            $culture     = CommonManager::getCurrentCulture($container);
            $tableName   = $this->getMessageTableName();
            $cacheKey    = $tableName.'|'.__FUNCTION__.'|'.$userId.'_'.$type.'_'.$culture;
            $cachedValue = CommonManager::getCacheVersion($container, $cacheKey);

            if ($cachedValue !== false) {
                return $cachedValue;
            }
        }

        $messageIds = $this->getUserMessageIdsQuery($userId, $type)->getArrayResult();
        $countQuery = $this->createQueryBuilder(self::ALIAS)
        ->select('COUNT('.self::ALIAS.'.id) as totalMessages')
        ->where(self::ALIAS.'.id IN(:messageIds)')
        ->setParameter('messageIds', $messageIds)
        ->andWhere(self::ALIAS.'.is_read = 0')
        ->andWhere(self::ALIAS.'.sender <> (:userId)')
        ->setParameter('userId', $userId)
        ->getQuery();

        $result = $countQuery->getResult();

        if ($container) {
            CommonManager::setCacheVersion($container, $cacheKey, $result[0]['totalMessages'], self::CACHE_TTL);
        }

        return $result[0]['totalMessages'];
    }

    /**
     * If sender and receiver have sent atleast one message from both side then show review link to message.
     *
     * @param integer $sender_id
     * @param integer $reciever_id
     * @param integer $ad_id
     *
     * @return boolean
     */
    public function isMessageReviewable($sender_id, $reciever_id, $ad_id)
    {
        if ($this->getSenderMessageCounts($sender_id, $reciever_id, $ad_id) && $this->getSenderMessageCounts($reciever_id, $sender_id, $ad_id)) {
            return true;
        }

        return false;
    }

    /**
     * Send contact request rejected email.
     *
     * @param object $message
     * @param array  $moderationResult Moderation resutl array.
     * @param object $container        Container object.
     */
    public function sendContactRequestRejectedEmail($message, $moderationResult, $container)
    {
        $parameters = $this->generateRejectedMessageEmailParameters($message, $moderationResult, $container);
        $receiver   = $message->getReceiver();
        $template   = 'your_message_is_rejected';

        $replayTo = $moderationResult['anonymisedsender'];

        $attachment = array();
        if ($message->getAttachmentPath() && $message->getAttachmentFileName() && $message->getAttachmentOrgFileName()) {
            $attachment[$message->getAttachmentOrgFileName()] = $container->get('kernel')->getRootDir().'/../web/'.$message->getAttachmentPath().'/'.$message->getAttachmentFileName();
        }

        // receiver email
        $receiverEmail = $message->getReceiver()->getEmail();

        $container->get('fa.mail.manager')->send($receiverEmail, $template, $parameters, CommonManager::getCurrentCulture($container), $attachment, array(), array(), array(), null, $replayTo);
    }

    /**
     * Generate email parameters.
     *
     * @param Message $message
     * @param array   $moderationResult Moderation resutl array.
     * @param object  $container        Container object.
     *
     * @return array
     */
    public function generateRejectedMessageEmailParameters(Message $message, $moderationResult, $container)
    {
        // sender information
        $sender = $message->getSender();
        $parameters['user_first_name']          = $message->getSenderFirstName();
        $parameters['user_last_name']           = $message->getSenderLastName();
        $parameters['business_name']            = $sender->getFullName();
        $parameters['rejected_message']         = $message->getTextMessage();
        $parameters['message_rejection_reason'] = '';

        if (array_key_exists('manualrejectionreason', $moderationResult)) {
            $parameters['message_rejection_reason'] = $moderationResult['manualrejectionreason'];
        }

        return $parameters;
    }

    /**
     * Remove record by user id.
     *
     * @param integer $userId User id.
     */
    public function removeMessageByUserId($userId, $entityManager)
    {
        $sql = 'DELETE FROM message WHERE sender_id = "'.$userId.'" OR receiver_id = "'.$userId.'" ORDER BY parent_id DESC';
        $stmt = $entityManager->getConnection()->prepare($sql);
        $stmt->execute();
    }

    /**
     * Remove cache.
     *
     * @param $entity
     * @param $container
     *
     * @return string
     */
    public function removeMessageCache($entity, $container)
    {
        $culture = CommonManager::getCurrentCulture($container);
        if ($entity->getReceiver()) {
            CommonManager::removeCache($container, $this->getMessageTableName().'|getMessageCount|'.$entity->getReceiver()->getId().'_all_'.$culture);
            CommonManager::removeCache($container, $this->getMessageTableName().'|getMessageCount|'.$entity->getReceiver()->getId().'_receiver_'.$culture);
            CommonManager::removeCache($container, $this->getMessageTableName().'|getMessageCount|'.$entity->getReceiver()->getId().'_sender_'.$culture);
        }
        if ($entity->getSender()) {
            CommonManager::removeCache($container, $this->getMessageTableName().'|getMessageCount|'.$entity->getSender()->getId().'_all_'.$culture);
            CommonManager::removeCache($container, $this->getMessageTableName().'|getMessageCount|'.$entity->getSender()->getId().'_receiver_'.$culture);
            CommonManager::removeCache($container, $this->getMessageTableName().'|getMessageCount|'.$entity->getSender()->getId().'_sender_'.$culture);
        }
    }

    /**
     * Remove ad from contact by ad id.
     *
     * @param integer $adId Ad id.
     */
    public function removeByAdId($adId)
    {
        $messages = $this->getBaseQueryBuilder()
        ->andWhere(self::ALIAS.'.ad = :adId')
        ->setParameter('adId', $adId)
        ->orderBy(self::ALIAS.'.created_at', 'DESC')
        ->getQuery()
        ->getResult();

        if ($messages) {
            foreach ($messages as $message) {
                $this->_em->remove($message);
            }
            $this->_em->flush();
        }
    }

    /**
     * Get user report reasons.
     *
     * @return array
     */
    public function getUserReportReasons()
    {
        return array(
                '1' => 'Suspicious user / scam',
                '2' => 'Time waster',
                '3' => 'Inappropriate language',
                '4' => 'Other',
            );
    }

    /**
     * mark message as removed by messageid and userid
     *
     * @param integer $messageId Message id.
     * @param integer $userId    User id.
     */
    public function getMessageConversationByMessage($objMessage)
    {
        if ($objMessage) {
            $userId1 = $objMessage->getSender()->getId();
            $userId2 = $objMessage->getReceiver()->getId();

            $query = $this->createQueryBuilder(self::ALIAS)
            ->select(self::ALIAS.'.id As id', self::ALIAS.'.deleted_by_user1', self::ALIAS.'.deleted_by_user2')
            ->where(
                '('.self::ALIAS.'.id = :messageId)'.
                'OR'.
                '('.
                    '('.self::ALIAS.'.sender = :userId1 AND ' .self::ALIAS.'.receiver = :userId2) OR '.
                    '('.self::ALIAS.'.receiver = :userId1 AND '.self::ALIAS.'.sender = :userId2)'.
                ')'.
                'AND '.
                    self::ALIAS.'.message_ad_id = :adId AND '.self::ALIAS.'.id <= :messageId AND '.self::ALIAS.'.status = 1'
            )
            ->setParameter('userId1', $userId1)
            ->setParameter('userId2', $userId2)
            ->setParameter('adId', $objMessage->getMessageAdId())
            ->setParameter('messageId', $objMessage->getId())
            ->orderBy(self::ALIAS.'.created_at', 'DESC');

            return $query->getQuery()->execute();
        }

        return array();
    }

    /**
     * Mark messages as delete
     *
     * @param array $messageIds messag ids array.
     * @param string $fieldName field name to update.
     */
    public function deleteMessages($messageIds, $userId, $fieldName)
    {
        $messageIdsStr = implode(',', $messageIds);
        $sql = 'UPDATE message SET '.$fieldName.' = '.$userId.' WHERE id IN ('.$messageIdsStr.')';
        $stmt = $this->_em->getConnection()->prepare($sql);
        return $stmt->execute();
    }

    /**
     *
     * Get custom format for time.
     *
     * @param integer $time
     *
     * @return string
     */
    public function getCustomMessageTime($time, $container)
    {
        $diffInSeconds = (time() - $time);
        $translator = CommonManager::getTranslator($container);
        $seconds = $diffInSeconds;
        $minutes = (int) ($diffInSeconds / 60);
        $hours = (int) ($diffInSeconds / (60 * 60));

        if ($seconds <= 59) {
            if ($seconds <= 1) {
                return $translator->trans('%seconds_ago% second ago', array('%seconds_ago%' => $seconds), 'frontend-message-detail');
            } else {
                return $translator->trans('%seconds_ago% seconds ago', array('%seconds_ago%' => $seconds), 'frontend-message-detail');
            }
        } elseif ($minutes <= 59) {
            if ($minutes <= 1) {
                return $translator->trans('%minutes_ago% minute ago', array('%minutes_ago%' => $minutes), 'frontend-message-detail');
            } else {
                return $translator->trans('%minutes_ago% minutes ago', array('%minutes_ago%' => $minutes), 'frontend-message-detail');
            }
        } elseif ($hours <= 23) {
            if ($hours <= 1) {
                return $translator->trans('%hours_ago% hour ago', array('%hours_ago%' => $hours), 'frontend-message-detail');
            } else {
                return $translator->trans('%hours_ago% hours ago', array('%hours_ago%' => $hours), 'frontend-message-detail');
            }
        } else {
            return date('H.i, d M Y', $time);
        }
    }

    /**
     * Is user have already enquied for the ad.
     *
     * @param integer $userId       User id.
     * @param integer $adId         Ad id.
     *
     * @return Boolean
     */
    public function isAlreadyEnquired($userId, $adId)
    {
        if ($userId && $adId) {
            $query = $this->createQueryBuilder(self::ALIAS)
               ->where(self::ALIAS.'.is_oneclickenq_message = 1')
               ->andWhere(self::ALIAS.'.message_ad_id = :adId')
               ->setParameter('adId', $adId)
               ->andWhere(self::ALIAS.'.sender = :senderId OR '.self::ALIAS.'.receiver = :receiverId')
               ->setParameter('senderId', $userId)
               ->setParameter('receiverId', $userId)
               ->orderBy(self::ALIAS.'.created_at', 'DESC')
               ->setMaxResults(1);

            $objMessage = $query->getQuery()->getOneOrNullResult();

            if (!empty($objMessage)) {
                if ($objMessage->getOneclickenqReply() == 'No' || $objMessage->getOneclickenqReply() == null) {
                    return true;
                } else {
                    return false;
                }
            }
        }

        return false;
    }

    /**
     * Update message field.
     *
     * @param integer $messageId  Message id.
     * @param string  $fieldName  Field name
     * @param string  $fieldValue Field value
     *
     * @return boolean
     */
    public function updateMessageField($messageId, $fieldName, $fieldValue)
    {
        $updateFlag = false;
        if ($messageId) {
            $updateQuery = $this->createQueryBuilder(self::ALIAS)
            ->update()
            ->set(self::ALIAS.'.'.$fieldName, ':fieldValue')
            ->where(self::ALIAS.'.id = :messageID')
            ->setParameter('fieldValue', $fieldValue)
            ->setParameter('messageID', $messageId);

            $updateFlag = $updateQuery->getQuery()->execute();
            $this->_em->clear();
        }

        return $updateFlag;
    }

    /**
     * Get messages for police report.
     *
     * @param integer $id       ad or user id
     * @param string  $searchBy Search by user or ad.
     *
     * @return boolean
     */
    public function getMessagesForPoliceReport($id, $searchBy = 'user')
    {
        $query = $this->createQueryBuilder(self::ALIAS)
        ->select(self::ALIAS.'.id', 'IDENTITY('.self::ALIAS.'.ad) as ad_id', self::ALIAS.'.sender_email', self::ALIAS.'.receiver_email', self::ALIAS.'.subject', self::ALIAS.'.text_message', self::ALIAS.'.created_at', self::ALIAS.'.ip_address');

        if ($searchBy == 'user') {
            $query->where(self::ALIAS.'.sender = :senderId OR '.self::ALIAS.'.receiver = :receiverId')
                  ->setParameter('senderId', $id)
                  ->setParameter('receiverId', $id);
        } elseif ($searchBy == 'ad') {
            $query->where(self::ALIAS.'.ad = :adId')
                  ->setParameter('adId', $id);
        }

        $query->andWhere(self::ALIAS.'.status = :messageStatus')
              ->andWhere(self::ALIAS.'.ad IS NOT NULL')
              ->setParameter('messageStatus', MessageRepository::MODERATION_QUEUE_STATUS_OKAY)
              ->orderBy(self::ALIAS.'.ad', 'ASC');

        return $query->getQuery()->getArrayResult();
    }
}
