<?php

/**
 * This file is part of the fa bundle.
 *
 * @copyright Copyright (c) 2014, FMG
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Fa\Bundle\MessageBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Fa\Bundle\CoreBundle\Manager\CommonManager;
use Fa\Bundle\MessageBundle\Entity\NotificationMessage;
use Fa\Bundle\MessageBundle\Entity\NotificationMessageEvent;
use Doctrine;
use Doctrine\ORM\Query;

/**
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 *
 * @author Samir Amrutya <samiram@aspl.in>
 * @copyright 2014 Friday Media Group Ltd
 * @version v1.0
 */
class NotificationMessageEventRepository extends EntityRepository
{
    use \Fa\Bundle\CoreBundle\Search\Search;

    const ALIAS = 'nme';

    /**
     * Prepare query builder.
     *
     * @param array $data Array of data.
     *
     * @return Doctrine\ORM\QueryBuilder The query builder
     */
    public function getBaseQueryBuilder()
    {
        return $this->createQueryBuilder(self::ALIAS);
    }

    /**
     * set notification events
     *
     * @param NotificationMessage $notification
     * @param integer $ad_id
     * @param integer $user_id
     *
     * @return void
     */
    public function setNotificationEvents($indentifier, $ad_id = null, $user_id = null, $display_after_day = '0d', $use_display_from = false, $user_name = null, $value = array())
    {
        $notification = $this->_em->getRepository('FaMessageBundle:NotificationMessage')->findOneBy(array('indentifier' => $indentifier));
        if ($notification && $notification->getStatus() == 1) {
            if (!$this->checkNotificationAlreadyExists($indentifier, $ad_id, $user_id)) {
                $notifcationEvent = new NotificationMessageEvent();
                $notifcationEvent->setIndentifier($notification->getIndentifier());

                if ($use_display_from == false) {
                    $dtime = CommonManager::getTimeFromDuration($display_after_day);
                    $notifcationEvent->setDisplayFrom($dtime);
                } else {
                    $notifcationEvent->setDisplayFrom($display_after_day);
                    $dtime = $display_after_day;
                }

                $time = CommonManager::getTimeFromDuration($notification->getDuration(), $dtime);
                $notifcationEvent->setExpiresAt($time);

                $notifcationEvent->setIsFlash($notification->getIsFlash());
                $notifcationEvent->setIsDismissable($notification->getIsDismissable());

                if ($ad_id != '') {
                    $notifcationEvent->setAdId($ad_id);
                }

                if ($user_id != '') {
                    $notifcationEvent->setUserId($user_id);
                }

                if ($user_name != '') {
                    $notifcationEvent->setUserName($user_name);
                }

                if (count($value)) {
                    $notifcationEvent->setValue(serialize($value));
                }

                $notifcationEvent->setStatus(1);

                $this->_em->persist($notifcationEvent);
                $this->_em->flush();
            }
        }
    }

    /**
     * check notification already exits
     *
     * @param string $indentifier
     * @param string $ad_id
     * @param string $user_id
     *
     * @return array
     */
    public function checkNotificationAlreadyExists($indentifier, $ad_id = null, $user_id = null)
    {
        if ($ad_id) {
            $qb = $this->createQueryBuilder(self::ALIAS);
            $qb->select('COUNT('.self::ALIAS.')');
            $qb->andWhere(self::ALIAS.'.ad_id = :ad_id');
            $qb->setParameter('ad_id', $ad_id);
            $qb->andWhere(self::ALIAS.'.user_id = :user_id');
            $qb->setParameter('user_id', $user_id);
            $qb->andWhere(self::ALIAS.'.indentifier = :indentifier');
            $qb->andWhere(self::ALIAS.'.status = :status');
            $qb->setParameter('indentifier', $indentifier);
            $qb->setParameter('status', 1);
            return $qb->getQuery()->getSingleScalarResult();
        }
    }

    /**
     *
     * @return multitype:
     */
    public function getAdvertsForRefreshQuery()
    {
        $duration_from = CommonManager::getTimeStampFromStartDate(date('Y-m-d'));
        $duration_end  = CommonManager::getTimeStampFromEndDate(date('Y-m-d'));

        $notifications = $this->createQueryBuilder(self::ALIAS)
            ->andWhere(self::ALIAS.'.status = :status')
            ->andWhere(self::ALIAS.'.display_from < :display_to')
            ->andWhere(self::ALIAS.'.display_from > :display_from')
            ->andWhere(self::ALIAS.'.expires_at > :expires_at')
            ->andWhere(self::ALIAS.'.indentifier IN (:indentifier)')
            ->setParameter('display_to', $duration_end)
            ->setParameter('display_from', $duration_from)
            ->setParameter('expires_at', time())
            ->setParameter('status', 1)
            ->setParameter('indentifier', array('advert_live_for_7_days', 'advert_live_for_14_days', 'advert_live_for_21_days'));
        return $notifications;
    }

    /**
     * get active notifications
     *
     * @param integer $user_id
     * @return array
     */
    public function getActiveNotification($user_id)
    {
        $notifications = $this->createQueryBuilder(self::ALIAS)
            ->select(
                self::ALIAS.'.id',
                self::ALIAS.'.indentifier',
                self::ALIAS.'.ad_id',
                self::ALIAS.'.user_id',
                self::ALIAS.'.is_dismissable',
                self::ALIAS.'.display_from',
                self::ALIAS.'.user_name',
                self::ALIAS.'.value',
                NotificationMessageRepository::ALIAS.'.message',
                NotificationMessageRepository::ALIAS.'.notification_type'
            )
            ->leftJoin('FaMessageBundle:NotificationMessage', NotificationMessageRepository::ALIAS, 'WITH', NotificationMessageRepository::ALIAS.'.indentifier = '.self::ALIAS.'.indentifier')
            ->andWhere(self::ALIAS.'.user_id = :user_id')
            ->andWhere(self::ALIAS.'.status = :status')
            ->andWhere(self::ALIAS.'.display_from < :display_from')
            ->andWhere(self::ALIAS.'.expires_at > :expires_at')
            ->setParameter('user_id', $user_id)
            ->setParameter('display_from', time())
            ->setParameter('expires_at', time())
            ->setParameter('status', 1)
            ->addOrderBy(self::ALIAS.'.id', 'desc')
            ->getQuery()->getArrayResult();

        return $notifications;
    }

    /**
     * close Notification by user id
     *
     * @param string $identifier
     * @param integer $user_id
     *
     * @return void
     */
    public function closeNotificationByIdAndUserId($id, $user_id)
    {
        $notification = $this->findOneBy(array('id' => $id, 'user_id' => $user_id, 'status' => 1));

        if ($notification) {
            $notification->setStatus(0);
            $this->_em->persist($notification);
            $this->_em->flush();
        }
    }


    /**
     * close Notification by user id
     *
     * @param string $identifier
     * @param integer $user_id
     *
     * @return void
     */
    public function closeNotificationByUserId($indentifier, $user_id)
    {
        $notification = $this->findOneBy(array('indentifier' => $indentifier, 'user_id' => $user_id, 'status' => 1));

        if ($notification) {
            $notification->setStatus(0);
            $this->_em->persist($notification);
            $this->_em->flush();
        }
    }

    /**
     * close notification by ad id
     *
     * @param string  $identifier
     * @param integer $ad_id
     */
    public function closeNotificationByAdId($indentifier, $ad_id)
    {
        $notification = $this->findOneBy(array('indentifier' => $indentifier, 'ad_id' => $ad_id, 'status' => 1));

        if ($notification) {
            $notification->setStatus(0);
            $this->_em->persist($notification);
            $this->_em->flush();
        }
    }

    /**
     * close notification by ad id
     *
     * @param string  $identifier
     * @param integer $ad_id
     */
    public function closeNotificationByOnlyAdId($ad_id)
    {
        $notifications = $this->findBy(array('ad_id' => $ad_id, 'status' => 1));

        foreach ($notifications as $notification) {
            $notification->setStatus(0);
            $this->_em->persist($notification);
        }

        $this->_em->flush();
    }
}
