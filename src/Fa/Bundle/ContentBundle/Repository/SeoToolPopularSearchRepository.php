<?php

/**
 * This file is part of the fa bundle.
 *
 * @copyright Copyright (c) 2014, FMG
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Fa\Bundle\ContentBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Fa\Bundle\CoreBundle\Manager\CommonManager;
use Fa\Bundle\AdBundle\Solr\AdSolrFieldMapping;
use Fa\Bundle\EntityBundle\Repository\LocationRepository;

/**
 * Seo tool popular search repository.
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 *
 * @author Amit Limbadia <amitl@aspl.in>
 * @copyright 2014 Friday Media Group Ltd
 * @version 1.0
 */
class SeoToolPopularSearchRepository extends EntityRepository
{
    use \Fa\Bundle\CoreBundle\Search\Search;

    const ALIAS = 'stps';

    /**
     * Prepare query builder.
     *
     * @param array $data Array of data.
     *
     * @return Doctrine\ORM\QueryBuilder The query builder
     */
    public function getBaseQueryBuilder()
    {
        return $this->createQueryBuilder(self::ALIAS);
    }

    /**
     * Add popular search keywords filter.
     *
     * @param string $customerName User name.
     */
    protected function addTitleFilter($title = null)
    {
        $this->queryBuilder->andWhere(sprintf('%s.title LIKE \'%%%s%%\'', $this->getRepositoryAlias(), $title));
    }

    /**
     * Remove seo tool popular search based on seo tool id.
     *
     * @param integer $seoToolId
     */
    public function removeRecordsBySeoToolId($seoToolId)
    {
        $this->createQueryBuilder(self::ALIAS)
        ->delete()
        ->andWhere(sprintf('%s.seo_tool = %d', self::ALIAS, $seoToolId))
        ->getQuery()
        ->execute();
    }

    /**
     * Get seo tool popular search table name.
     */
    private function getSeoToolPopularSearchTableName()
    {
        return $this->_em->getClassMetadata('FaContentBundle:SeoToolPopularSearch')->getTableName();
    }

    /**
     * Get popular search array for seo tool id.
     *
     * @param integer $seoToolId Seo tool id.
     * @param object  $container Container object.
     *
     * @return array
     */
    public function getPopularSearchArrayBySeoToolId($seoToolId, $container)
    {
        if ($container) {
            $culture     = CommonManager::getCurrentCulture($container);
            $tableName   = $this->getSeoToolPopularSearchTableName();
            $cacheKey    = $tableName.'|'.__FUNCTION__.'|'.$seoToolId.'_'.$culture;
            $cachedValue = CommonManager::getCacheVersion($container, $cacheKey);

            if ($cachedValue !== false) {
                return $cachedValue;
            }
        }
        $popularSearchArray = array();
        $popularSearches = $this->createQueryBuilder(self::ALIAS)
        ->andWhere(sprintf('%s.seo_tool = %d', self::ALIAS, $seoToolId))
        ->getQuery()
        ->execute();

        foreach ($popularSearches as $popularSearch) {
            $popularSearchArray[] = array('title' => $popularSearch->getTitle(), 'url' => $popularSearch->getUrl());
        }

        if ($container && count($popularSearchArray)) {
            CommonManager::setCacheVersion($container, $cacheKey, $popularSearchArray);
        }

        return $popularSearchArray;
    }

    /**
     * Get popular search url.
     *
     * @param string  $url                   Url.
     * @param array   $cookieLocationDetails Location details.
     * @param boolean $mapFlag               Map flag.
     * @param object  $container             Container object.
     *
     * @return array
     */
    public function getPopularSearchUrl($url, $cookieLocationDetails, $mapFlag, $container)
    {
        $listUrl = null;
        $locationRepository = $this->_em->getRepository('FaEntityBundle:Location');
        $urlParseArray = parse_url($url);
        $categorySlug = (isset($urlParseArray['path']) ? $urlParseArray['path'] : '');
        $categorySlug = str_replace($container->get('request_stack')->getCurrentRequest()->getBaseURL(), '', $categorySlug);
        $locationSlug = $locationRepository->getSlugById(LocationRepository::COUNTY_ID, $container);
        if ($mapFlag) {
            if (isset($urlParseArray['query'])) {
                $urlParseArray['query'] = $urlParseArray['query'].'&map=1';
            } else {
                $urlParseArray['query'] = 'map=1';
            }
        }

        /*
         * commented for FFR-1747
        if (!isset($cookieLocationDetails['locality_id']) && isset($cookieLocationDetails['slug'])) {
            $locationSlug = $cookieLocationDetails['slug'];
        } elseif (isset($cookieLocationDetails['locality_id']) && $cookieLocationDetails['town_id']) {
            $locationSlug = $locationRepository->getSlugById($cookieLocationDetails['town_id'], $container);
        }
        */

        if ($categorySlug && $locationSlug) {
            $listUrl = $container->get('router')->generate('listing_page', array(
                'location' => $locationSlug,
                'page_string' => $categorySlug,
            )).(isset($urlParseArray['query']) ? '?'.$urlParseArray['query'] : '');

            $listUrl = preg_replace('/(\/+)/', '/', $listUrl);
        }

        return $listUrl;
    }
}
