<?php

/**
 * This file is part of the fa bundle.
 *
 * @copyright Copyright (c) 2014, FMG
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Fa\Bundle\ContentBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Fa\Bundle\CoreBundle\Manager\CommonManager;

/**
 * Static page repository.
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 *
 * @author Amit Limbadia <amitl@aspl.in>
 * @copyright 2014 Friday Media Group Ltd
 * @version 1.0
 */
class StaticPageRepository extends EntityRepository
{
    use \Fa\Bundle\CoreBundle\Search\Search;

    const STATIC_PAGE_TYPE_ID     = 1;
    const STATIC_BLOCK_TYPE_ID    = 2;
    const STATIC_BLOCK_GA_CODE_ID = 3;

    const STATIC_PAGE_COOKIES_POLICY_ID = 5;
    const STATIC_PAGE_CONTACT_US_ID = 6;

    const ALIAS = 'sp';

    /**
     * Prepare query builder.
     *
     * @param array $data Array of data.
     *
     * @return Doctrine\ORM\QueryBuilder The query builder
     */
    public function getBaseQueryBuilder()
    {
        return $this->createQueryBuilder(self::ALIAS);
    }

    /**
     * Add static page title filter to existing query object.
     *
     * @param string $title Package title.
     */
    protected function addTitleFilter($title = null)
    {
        $this->queryBuilder->andWhere(sprintf('%s.title LIKE \'%%%s%%\'', $this->getRepositoryAlias(), $title));
    }

    /**
     * Add package status filter to existing query object.
     *
     * @param integer $status Status.
     */
    protected function addStatusFilter($status = null)
    {
        $this->queryBuilder->andWhere($this->getRepositoryAlias().'.status = '.$status);
    }

    /**
     * Get static page table name.
     */

    private function getStaticPageTableName()
    {
        return $this->_em->getClassMetadata('FaContentBundle:StaticPage')->getTableName();
    }

    /**
     * Get static page link array.
     *
     * @param object $container Container identifier.
     *
     * @return array
     */
    public function getStaticPageLinkArray($container = null, $slug_only = false)
    {
        if ($container) {
            $culture     = CommonManager::getCurrentCulture($container);
            $tableName   = $this->getStaticPageTableName();
            $cacheKey    = $tableName.'|'.__FUNCTION__.'|'.$culture.'_'.$slug_only;
            $cachedValue = CommonManager::getCacheVersion($container, $cacheKey);

            if ($cachedValue !== false) {
                return $cachedValue;
            }
        }

        $staticPageLinkArray = array();
        $staticPages = $this->getBaseQueryBuilder()
        ->where(self::ALIAS.'.status = 1')
        ->andWhere(self::ALIAS.'.type = '.self::STATIC_PAGE_TYPE_ID)
        ->getQuery()
        ->getResult();

        foreach ($staticPages as $staticPage) {
            if (!$slug_only) {
                $staticPageLinkArray[$staticPage->getSlug()] = $staticPage->getTitle();
            }

            $staticPageLinkArray[$staticPage->getId()] = $staticPage->getSlug();
        }

        if ($container) {
            CommonManager::setCacheVersion($container, $cacheKey, $staticPageLinkArray);
        }

        return $staticPageLinkArray;
    }

    /**
     * Get static block detail.
     *
     * @param string $slug      Slug of block.
     * @param object $container Container identifier.
     *
     * @return array
     */
    public function getStaticBlockDetailArray($slug, $container = null, $ad = null)
    {
        if ($container) {
            $culture     = CommonManager::getCurrentCulture($container);
            $tableName   = $this->getStaticPageTableName();
            $cacheKey    = $tableName.'|'.__FUNCTION__.'|'.$slug.'_'.$culture;
            $cachedValue = CommonManager::getCacheVersion($container, $cacheKey);

            if ($cachedValue !== false) {
                return $cachedValue;
            }
        }

        $staticBlockDetailArray = $this->getBaseQueryBuilder()
        ->select(self::ALIAS.'.title', self::ALIAS.'.description')
        ->where(self::ALIAS.'.status = 1')
        ->andWhere(StaticPageRepository::ALIAS.'.type IN (:type)')
        ->setParameter('type', array(StaticPageRepository::STATIC_BLOCK_TYPE_ID, StaticPageRepository::STATIC_BLOCK_GA_CODE_ID))
        ->andWhere(self::ALIAS.'.slug = :slug')
        ->setParameter('slug', $slug)
        ->getQuery()
        ->getOneOrNullResult();

        if ($container) {
            CommonManager::setCacheVersion($container, $cacheKey, $staticBlockDetailArray);
        }
        
        if ($staticBlockDetailArray['description']!='') {
            $extraParams = array();
            $cookieValue = $container->get('request_stack')->getCurrentRequest()->cookies->get('location');
            if (!empty($cookieValue)) {
                $extraParams = array_merge($extraParams, array('cookieValues'=>$cookieValue));
            }
            if ($ad) {
                $extraParams = array_merge($extraParams, array('ad'=>$ad));
            }
            $staticBlockDetailArray['description'] = $container->get('fa.banner.manager')->parseStaticBlockCode($staticBlockDetailArray['description'], $extraParams);
        }
        

        return $staticBlockDetailArray;
    }

    public function getStaticBlockGTMDetailArray($slug, $container = null, $ad = null, $facetResult=null)
    {
        if ($container) {
            $culture     = CommonManager::getCurrentCulture($container);
            $tableName   = $this->getStaticPageTableName();
            $cacheKey    = $tableName.'|'.__FUNCTION__.'|'.$slug.'_'.$culture;
            $cachedValue = CommonManager::getCacheVersion($container, $cacheKey);

            if ($cachedValue !== false) {
                //return $cachedValue;
            }
        }

        $staticBlockDetailArray = $this->getBaseQueryBuilder()
            ->select(self::ALIAS.'.title', self::ALIAS.'.description')
            ->where(self::ALIAS.'.status = 1')
            ->andWhere(StaticPageRepository::ALIAS.'.type IN (:type)')
            ->setParameter('type', array(StaticPageRepository::STATIC_BLOCK_TYPE_ID, StaticPageRepository::STATIC_BLOCK_GA_CODE_ID))
            ->andWhere(self::ALIAS.'.slug = :slug')
            ->setParameter('slug', $slug)
            ->getQuery()
            ->getOneOrNullResult();

        if ($container) {
            CommonManager::setCacheVersion($container, $cacheKey, $staticBlockDetailArray);
        }

        if ($staticBlockDetailArray['description']!='') {
            $extraParams = array();
            $cookieValue = $container->get('request_stack')->getCurrentRequest()->cookies->get('location');
            if (!empty($cookieValue)) {
                $extraParams = array_merge($extraParams, array('cookieValues'=>$cookieValue));
            }
            if ($ad) {
                $extraParams = array_merge($extraParams, array('ad'=>$ad));
            }
            if ($facetResult) {
                $extraParams = array_merge($extraParams, array('facetResult'=>$facetResult));
            }

            $staticBlockDetailArray['description'] = $container->get('fa.banner.manager')->parseStaticBlockGTMCode($staticBlockDetailArray['description'], $extraParams);
        }


        return $staticBlockDetailArray;
    }

    /**
     * Get static page link array.
     *
     * @param object $container Container identifier.
     *
     * @return array
     */
    public function getStaticPagesForFooter($container = null)
    {
        if ($container) {
            $culture     = CommonManager::getCurrentCulture($container);
            $tableName   = $this->getStaticPageTableName();
            $cacheKey    = $tableName.'|'.__FUNCTION__.'|'.$culture;
            $cachedValue = CommonManager::getCacheVersion($container, $cacheKey);

            if ($cachedValue !== false) {
                return $cachedValue;
            }
        }

        $staticPageLinkArray = array();
        $staticPages = $this->getBaseQueryBuilder()
        ->where(self::ALIAS.'.status = 1')
        ->andWhere(self::ALIAS.'.type = '.self::STATIC_PAGE_TYPE_ID)
        ->andWhere(self::ALIAS.'.include_in_footer = 1')
        ->getQuery()
        ->getArrayResult();


        if ($container) {
            CommonManager::setCacheVersion($container, $cacheKey, $staticPages);
        }

        return $staticPages;
    }


    /**
     * Get static page link array.
     *
     * @param object $container Container identifier.
     *
     * @return array
     */
    public function getStaticPagesForMobileFooter($container = null)
    {
        if ($container) {
            $culture     = CommonManager::getCurrentCulture($container);
            $tableName   = $this->getStaticPageTableName();
            $cacheKey    = $tableName.'|'.__FUNCTION__.'|'.$culture;
            $cachedValue = CommonManager::getCacheVersion($container, $cacheKey);

            if ($cachedValue !== false) {
                return $cachedValue;
            }
        }

        $mobileStaticPages = $this->getBaseQueryBuilder()
            ->where(self::ALIAS.'.status = 1')
            ->andWhere(self::ALIAS.'.type = '.self::STATIC_PAGE_TYPE_ID)
            ->andWhere(self::ALIAS.'.include_in_mobile_footer = 1')
            ->getQuery()
            ->getArrayResult();

        if ($container) {
            CommonManager::setCacheVersion($container, $cacheKey, $mobileStaticPages);
        }
        return $mobileStaticPages;
    }
}
