<?php

/**
 * This file is part of the fa bundle.
 *
 * @copyright Copyright (c) 2014, FMG
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Fa\Bundle\ContentBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Fa\Bundle\CoreBundle\Manager\CommonManager;
use Fa\Bundle\ContentBundle\Manager\BannerManager;
use Fa\Bundle\AdBundle\Solr\AdSolrFieldMapping;

/**
 * Banner repository.
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 *
 * @author Sagar Lotiya <amitl@aspl.in>
 * @copyright 2014 Friday Media Group Ltd
 * @version 1.0
 */
class BannerRepository extends EntityRepository
{
    use \Fa\Bundle\CoreBundle\Search\Search;

    const ALIAS = 'b';

    /**
     * Prepare query builder.
     *
     * @param array $data Array of data.
     *
     * @return Doctrine\ORM\QueryBuilder The query builder
     */
    public function getBaseQueryBuilder()
    {
        return $this->createQueryBuilder(self::ALIAS);
    }

    /**
     * Get banners array by page route.
     *
     * @param string  $currentRoute Name of current route.
     * @param object  $container    Container object.
     *
     * @return Doctrine\ORM\QueryBuilder The query builder
     */
    public function getBannersArrayByPage($currentRoute, $container)
    {
        $bannerPageRoutes  = CommonManager::getBannerPageRoutes();
        $pageId            = array_search($currentRoute, $bannerPageRoutes);
        $pageId            = rtrim($pageId, 'l');
        $bannersArray      = array();
        $bannersFinalArray = array();
        $categoryId        = null;

        if ($pageId && in_array($pageId, array(BannerPageRepository::PAGE_SEARCH_RESULTS, BannerPageRepository::PAGE_AD_DETAILS, BannerPageRepository::PAGE_LANDING_PAGE, BannerPageRepository::PAGE_LANDING_PAGE.'l'))) {
            switch ($pageId) {
                case BannerPageRepository::PAGE_SEARCH_RESULTS:
                    $searchParams = $container->get('request_stack')->getCurrentRequest()->get('finders');
                    if (is_array($searchParams) && isset($searchParams['item__category_id'])) {
                        $categoryId = $searchParams['item__category_id'];
                    }
                    break;
                case BannerPageRepository::PAGE_AD_DETAILS:
                    $adId = $container->get('request_stack')->getCurrentRequest()->get('id');
                    $data           = array();
                    $keywords       = null;
                    $page           = 1;
                    $recordsPerPage = 1;

                    //set ad criteria to search
                    $data['query_filters']['item']['id'] = $adId;
                    // initialize solr search manager service and fetch data based of above prepared search options
                    $solrSearchManager = $container->get('fa.solrsearch.manager');
                    $solrSearchManager->init('ad', $keywords, $data, $page, $recordsPerPage);
                    $solrResponse = $solrSearchManager->getSolrResponse();

                    // fetch result set from solr
                    $adDetail = $solrSearchManager->getSolrResponseDocs($solrResponse);
                    if (count($adDetail)) {
                        $categoryId = isset($adDetail[0][AdSolrFieldMapping::CATEGORY_ID])?$adDetail[0][AdSolrFieldMapping::CATEGORY_ID]:null;
                    }
                    break;
                case BannerPageRepository::PAGE_LANDING_PAGE:
                case BannerPageRepository::PAGE_LANDING_PAGE.'l':
                    $categoryId = $container->get('request_stack')->getCurrentRequest()->get('category_id');
                    break;
            }
        }

        if ($pageId == false) {
            if ($currentRoute == 'location_home_page' || $currentRoute == 'landing_page_category' || $currentRoute == 'landing_page_category_location') {
                $pageId = BannerPageRepository::PAGE_HOME;
            } else {
                $pageId = BannerPageRepository::PAGE_ALL_OTHER;
            }
        }

        if ($container) {
            $culture     = CommonManager::getCurrentCulture($container);
            $tableName   = $this->getBannerTableName();
            $cacheKey    = $tableName.'|'.__FUNCTION__.'|'.$pageId.'_'.$categoryId.'_'.$culture;
            $cachedValue = CommonManager::getCacheVersion($container, $cacheKey);

            if ($cachedValue !== false) {
                return $cachedValue;
            }
        }

        if ($categoryId) {
            $parentCategories = array_reverse(array_keys($this->_em->getRepository('FaEntityBundle:Category')->getCategoryPathArrayById($categoryId, false, $container)));

            foreach ($parentCategories as $parentCategoryId) {
                $bannersArray = $this->getBaseQueryBuilder()
                ->select(self::ALIAS.'.id as banner_id,'.self::ALIAS.'.code,'.BannerZoneRepository::ALIAS.'.id As zone_id,'.BannerZoneRepository::ALIAS.'.max_width,'.BannerZoneRepository::ALIAS.'.max_height,'.BannerZoneRepository::ALIAS.'.is_desktop,'.BannerZoneRepository::ALIAS.'.is_tablet,'.BannerZoneRepository::ALIAS.'.is_mobile,'.BannerPageRepository::ALIAS.'.id as page_id, IDENTITY('.self::ALIAS.'.category) as category_id')
                ->innerJoin(self::ALIAS.'.banner_pages', BannerPageRepository::ALIAS)
                ->innerJoin(self::ALIAS.'.banner_zone', BannerZoneRepository::ALIAS)
                ->andWhere(BannerPageRepository::ALIAS.'.id = (:pageId)')
                ->andWhere(BannerRepository::ALIAS.'.category = (:categoryId)')
                ->setParameter('pageId', $pageId)
                ->setParameter('categoryId', $parentCategoryId)
                ->getQuery()
                ->getResult();
                //if ($bannersArray && count($bannersArray) > 0) {
                  //  break;
                //}
            }
        }

        $bannersGlobalArray = $this->getBaseQueryBuilder()
        ->select(self::ALIAS.'.id as banner_id,'.self::ALIAS.'.code,'.BannerZoneRepository::ALIAS.'.id As zone_id,'.BannerZoneRepository::ALIAS.'.max_width,'.BannerZoneRepository::ALIAS.'.max_height,'.BannerZoneRepository::ALIAS.'.is_desktop,'.BannerZoneRepository::ALIAS.'.is_tablet,'.BannerZoneRepository::ALIAS.'.is_mobile,'.BannerPageRepository::ALIAS.'.id as page_id, IDENTITY('.self::ALIAS.'.category) as category_id')
        ->innerJoin(self::ALIAS.'.banner_pages', BannerPageRepository::ALIAS)
        ->innerJoin(self::ALIAS.'.banner_zone', BannerZoneRepository::ALIAS)
        ->andWhere(BannerPageRepository::ALIAS.'.id = (:pageId)')
        ->andWhere(BannerRepository::ALIAS.'.category IS NULL')
        ->setParameter('pageId', array($pageId))
        ->getQuery()
        ->getResult();

        if ($bannersArray && count($bannersArray) > 0) {
            foreach ($bannersArray as $bannersTmpArray) {
                $bannersFinalArray[$bannersTmpArray['zone_id']] = $bannersTmpArray;
            }
        }
        if ($bannersGlobalArray && count($bannersGlobalArray) > 0) {
            foreach ($bannersGlobalArray as $bannersTmpArray) {
                if (!isset($bannersFinalArray[$bannersTmpArray['zone_id']])) {
                    $bannersFinalArray[$bannersTmpArray['zone_id']] = $bannersTmpArray;
                }
            }
        }

        if ($container) {
            CommonManager::setCacheVersion($container, $cacheKey, $bannersFinalArray);
        }

        return $bannersFinalArray;
    }

    /**
     * Get banner table name.
     *
     * @return Ambigous <string, multitype:>
     */
    private function getBannerTableName()
    {
        return $this->_em->getClassMetadata('FaContentBundle:Banner')->getTableName();
    }
}
