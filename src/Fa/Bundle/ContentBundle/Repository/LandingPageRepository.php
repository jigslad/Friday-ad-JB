<?php

/**
 * This file is part of the fa bundle.
 *
 * @copyright Copyright (c) 2014, FMG
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Fa\Bundle\ContentBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Fa\Bundle\CoreBundle\Manager\CommonManager;

/**
 * Landing page repository.
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 *
 * @author Amit Limbadia <amitl@aspl.in>
 * @copyright 2014 Friday Media Group Ltd
 * @version 1.0
 */
class LandingPageRepository extends EntityRepository
{
    use \Fa\Bundle\CoreBundle\Search\Search;

    const ALIAS               = 'lp';
    const CTEGORY_TYPE_ID     = 1;
    const SUB_CTEGORY_TYPE_ID = 2;
    const LIFESTYLE_TYPE_ID   = 3;
    const DIMENTION_TYPE_ID   = 4;

    /**
     * Prepare query builder.
     *
     * @param array $data Array of data.
     *
     * @return Doctrine\ORM\QueryBuilder The query builder
     */
    public function getBaseQueryBuilder()
    {
        return $this->createQueryBuilder(self::ALIAS);
    }

    /**
     * Get landing page type array.
     *
     * @param Container $container Container identifier.
     * @param boolean   $addEmpty  Flag to show empty message.
     *
     * @return array
     */
    public static function getLandingPageTypeArray($container, $addEmpty = true)
    {
        $translator      = CommonManager::getTranslator($container);
        $landingPageTypeArray = array();
        if ($addEmpty) {
            $landingPageTypeArray[''] = $translator->trans('Select Landing Page Type');
        }
        $landingPageTypeArray[self::CTEGORY_TYPE_ID]     = $translator->trans('Category');
        /*$landingPageTypeArray[self::SUB_CTEGORY_TYPE_ID] = $translator->trans('Sub category');
        $landingPageTypeArray[self::LIFESTYLE_TYPE_ID]   = $translator->trans('Lifestyle');
        $landingPageTypeArray[self::DIMENTION_TYPE_ID]   = $translator->trans('Dimension');*/

        return $landingPageTypeArray;
    }

    /**
     * Add landing page title filter to existing query object.
     *
     * @param string $title Package title.
     */
    protected function addH1TagFilter($title = null)
    {
        $this->queryBuilder->andWhere(sprintf('%s.h1_tag LIKE \'%%%s%%\'', $this->getRepositoryAlias(), $title));
    }

    /**
     * Add type filter.
     *
     * @param integer $type Landing page type.
     */
    protected function addTypeFilter($type = null)
    {
        $this->queryBuilder->andWhere($this->getRepositoryAlias().'.type = '.$type);
    }

    /**
     * Add status filter.
     *
     * @param integer Status entity type.
     */
    protected function addStatusFilter($status = null)
    {
        $this->queryBuilder->andWhere($this->getRepositoryAlias().'.status = '.$status);
    }
}
