<?php

/**
 * This file is part of the fa bundle.
 *
 * @copyright Copyright (c) 2014, FMG
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Fa\Bundle\ReportBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Fa\Bundle\CoreBundle\Manager\CommonManager;
use Fa\Bundle\UserBundle\Repository\RoleRepository;
use Doctrine\ORM\QueryBuilder;

/**
 * AdPrintInsertDateReportDailyRepository repository.
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 *
 * @author Amit Limbadia <amitl@aspl.in>
 * @copyright 2014 Friday Media Group Ltd
 * @version 1.0
 */
class AdPrintInsertDateReportDailyRepository extends EntityRepository
{
    use \Fa\Bundle\CoreBundle\Search\Search;

    const ALIAS = 'apidrd';

    /**
     * Prepare query builder.
     *
     * @param array $data Array of data.
     *
     * @return Doctrine\ORM\QueryBuilder The query builder
     */
    public function getBaseQueryBuilder()
    {
        return $this->createQueryBuilder(self::ALIAS);
    }

    /**
     * Remove ad statistics.
     *
     * @param array  $adIds Ad id array.
     * @param string $date  Date.
     */
    public function removeAdPrintInsertDateReportDailyAdsByIds($adIds, $date)
    {
        if ($date) {
            $startDate = CommonManager::getTimeStampFromStartDate(date('Y-m-d', strtotime($date)));
            $endDate   = CommonManager::getTimeStampFromEndDate(date('Y-m-d', strtotime($date)));
        } else {
            $startDate = CommonManager::getTimeStampFromStartDate(date('Y-m-d', strtotime('-1 day')));
            $endDate   = CommonManager::getTimeStampFromEndDate(date('Y-m-d', strtotime('-1 day')));
        }
        $this->getBaseQueryBuilder()
            ->delete()
            ->andWhere(self::ALIAS.'.ad_id IN (:adIds)')
            ->setParameter('adIds', $adIds)
            ->andWhere('('.self::ALIAS.'.created_at BETWEEN '.$startDate.' AND  '.$endDate.')')
            ->getQuery()
            ->execute();
    }
}
