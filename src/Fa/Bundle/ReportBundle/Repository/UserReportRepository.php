<?php

/**
 * This file is part of the fa bundle.
 *
 * @copyright Copyright (c) 2014, FMG
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Fa\Bundle\ReportBundle\Repository;

use Doctrine\ORM\EntityRepository;
// use Proxies\__CG__\Fa\Bundle\ReportBundle\Entity\UserReportDaily;
use Fa\Bundle\ReportBundle\Repository\UserReportDailyRepository;
use Fa\Bundle\CoreBundle\Manager\CommonManager;
use Entity;
use Fa\Bundle\UserBundle\Repository\RoleRepository;
use Fa\Bundle\UserBundle\Repository\UserRepository;

/**
 * Dotmailer repository.
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 *
 * @author Sagar Lotiya <amitl@aspl.in>
 * @copyright 2014 Friday Media Group Ltd
 * @version 1.0
 */
class UserReportRepository extends EntityRepository
{
    use \Fa\Bundle\CoreBundle\Search\Search;

    const ALIAS = 'ur';

    /**
     * Prepare query builder.
     *
     * @param array $data Array of data.
     *
     * @return Doctrine\ORM\QueryBuilder The query builder
     */
    public function getBaseQueryBuilder()
    {
        return $this->createQueryBuilder(self::ALIAS);
    }

    /**
     * Get print upsell ids array.
     *
     * @param array $userIds user id array.
     *
     * @return array
     */
    public function getUserReportUsersByIds($userIds)
    {
        $userReportUserIds = array();
        $reportUsers = $this->getBaseQueryBuilder()
        ->andWhere(self::ALIAS.'.user_id IN (:userIds)')
        ->setParameter('userIds', $userIds)
        ->getQuery()
        ->getResult();

        foreach ($reportUsers as $reportUser) {
            $userReportUserIds[] = $reportUser->getUserId();
        }

        return $userReportUserIds;
    }

    /**
     * Get user report query
     *
     * @param array $searchParams search parameters array.
     *
     * @return array
     */
    public function getUserReportQuery($searchParams, $sorter = null)
    {
        $userReportDailyTableFields = array('renewed_ads', 'expired_ads', 'cancelled_ads', 'number_of_ad_placed', 'number_of_ad_sold', 'number_of_ads_to_renew', 'saved_searches', 'total_spent', 'profile_page_view_count', 'profile_page_email_sent_count', 'profile_page_website_url_click_count', 'profile_page_phone_click_count', 'profile_page_social_links_click_count', 'profile_page_map_click_count');

        $qb = $this->createQueryBuilder(self::ALIAS)
              ->select(
                self::ALIAS.'.user_id',
                self::ALIAS.'.role_id',
                self::ALIAS.'.username',
                self::ALIAS.'.phone',
                self::ALIAS.'.name',
                self::ALIAS.'.email',
                self::ALIAS.'.is_active',
                self::ALIAS.'.signup_date',
                self::ALIAS.'.first_paa',
                self::ALIAS.'.last_paa',
                self::ALIAS.'.postcode',
                self::ALIAS.'.town_id',
                self::ALIAS.'.is_facebook_verified',
                self::ALIAS.'.is_paypal_vefiried',
                self::ALIAS.'.total_ad',
                self::ALIAS.'.total_active_ad'
            );

        if ($searchParams && CommonManager::inArrayMulti($userReportDailyTableFields, $searchParams['rus_report_columns'])) {
            $qb = $qb->addSelect(
                'SUM('.UserReportDailyRepository::ALIAS.'.renewed_ads) As renewed_ads',
                'SUM('.UserReportDailyRepository::ALIAS.'.expired_ads) As expired_ads',
                'SUM('.UserReportDailyRepository::ALIAS.'.cancelled_ads) As cancelled_ads',
                'SUM('.UserReportDailyRepository::ALIAS.'.number_of_ad_placed) As number_of_ad_placed',
                'SUM('.UserReportDailyRepository::ALIAS.'.number_of_ad_sold) As number_of_ad_sold',
                'SUM('.UserReportDailyRepository::ALIAS.'.number_of_ads_to_renew) As number_of_ads_to_renew',
                'SUM('.UserReportDailyRepository::ALIAS.'.saved_searches) As saved_searches',
                'SUM('.UserReportDailyRepository::ALIAS.'.total_spent) As total_spent',
                'SUM('.UserReportDailyRepository::ALIAS.'.profile_page_view_count) As profile_page_view_count',
                'SUM('.UserReportDailyRepository::ALIAS.'.profile_page_email_sent_count) As profile_page_email_sent_count',
                'SUM('.UserReportDailyRepository::ALIAS.'.profile_page_website_url_click_count) As profile_page_website_url_click_count',
                'SUM('.UserReportDailyRepository::ALIAS.'.profile_page_phone_click_count) As profile_page_phone_click_count',
                'SUM('.UserReportDailyRepository::ALIAS.'.profile_page_social_links_click_count) As profile_page_social_links_click_count',
                'SUM('.UserReportDailyRepository::ALIAS.'.profile_page_map_click_count) As profile_page_map_click_count'
            );

            $qb = $qb->addSelect(
                'SUM('.UserReportDailyRepository::ALIAS.'.renewed_ads) As renewed_ads_sum',
                'SUM('.UserReportDailyRepository::ALIAS.'.expired_ads) As expired_ads_sum',
                'SUM('.UserReportDailyRepository::ALIAS.'.cancelled_ads) As cancelled_ads_sum',
                'SUM('.UserReportDailyRepository::ALIAS.'.number_of_ad_placed) As number_of_ad_placed_sum',
                'SUM('.UserReportDailyRepository::ALIAS.'.number_of_ad_sold) As number_of_ad_sold_sum',
                'SUM('.UserReportDailyRepository::ALIAS.'.number_of_ads_to_renew) As number_of_ads_to_renew_sum',
                'SUM('.UserReportDailyRepository::ALIAS.'.saved_searches) As saved_searches_sum',
                'SUM('.UserReportDailyRepository::ALIAS.'.total_spent) As total_spent_sum',
                'SUM('.UserReportDailyRepository::ALIAS.'.profile_page_view_count) As profile_page_view_count_sum',
                'SUM('.UserReportDailyRepository::ALIAS.'.profile_page_email_sent_count) As profile_page_email_sent_count_sum',
                'SUM('.UserReportDailyRepository::ALIAS.'.profile_page_website_url_click_count) As profile_page_website_url_click_count_sum',
                'SUM('.UserReportDailyRepository::ALIAS.'.profile_page_phone_click_count) As profile_page_phone_click_count_sum',
                'SUM('.UserReportDailyRepository::ALIAS.'.profile_page_social_links_click_count) As profile_page_social_links_click_count_sum',
                'SUM('.UserReportDailyRepository::ALIAS.'.profile_page_map_click_count) As profile_page_map_click_count_sum'
            );
        }

        if ($searchParams && !empty($searchParams['rus_from_date'])) {
            $finalStartDate = CommonManager::getTimeStampFromStartDate($searchParams['rus_from_date']);
            if (isset($searchParams['rus_to_date']) && $searchParams['rus_to_date'] != '') {
                $finalEndDate = CommonManager::getTimeStampFromEndDate($searchParams['rus_to_date']);
            } else {
                $finalEndDate = CommonManager::getTimeStampFromEndDate(date('d/m/Y'));
            }

            if ($searchParams['rus_date_filter_type'] == 'signup_date') {
                $qb = $qb->where('('.self::ALIAS.'.signup_date BETWEEN '.$finalStartDate.' AND  '.$finalEndDate.')');
                $qb = $qb->leftJoin('FaReportBundle:UserReportDaily', UserReportDailyRepository::ALIAS, 'WITH', UserReportDailyRepository::ALIAS.'.user_id = '.self::ALIAS.'.user_id');
            } else {
                $qb = $qb->where('('.UserReportDailyRepository::ALIAS.'.created_at BETWEEN '.$finalStartDate.' AND  '.$finalEndDate.')');
                $qb = $qb->innerJoin('FaReportBundle:UserReportDaily', UserReportDailyRepository::ALIAS, 'WITH', UserReportDailyRepository::ALIAS.'.user_id = '.self::ALIAS.'.user_id');
            }
        }

        if ($searchParams && !empty($searchParams['rus_user_type'])) {
            $qb = $qb->andWhere(self::ALIAS.'.role_id = '.$searchParams['rus_user_type']);
        } else {
            $roleIds = array(RoleRepository::ROLE_BUSINESS_SELLER_ID, RoleRepository::ROLE_SELLER_ID);
            $qb = $qb->andWhere(self::ALIAS.'.role_id IN (:roleIds)');
            $qb = $qb->setParameter('roleIds', $roleIds);
        }

        if ($searchParams && !empty($searchParams['rus_name'])) {
            $qb = $qb->andWhere(self::ALIAS.'.name LIKE :name');
            $qb = $qb->setParameter('name', $searchParams['rus_name'].'%');
        }

        if ($searchParams && !empty($searchParams['rus_email'])) {
            $qb = $qb->andWhere(self::ALIAS.'.email LIKE :email');
            $qb = $qb->setParameter('email', $searchParams['rus_email'].'%');
        }

        if ($searchParams && !empty($searchParams['rus_report_type']) && $searchParams['rus_report_type'] == 'user_wise') {
            $qb = $qb->groupBy(self::ALIAS.'.user_id');
        }

        // sorting.
        $sortFields = self::getReportSortFields();
        if (in_array($sorter['sort_field'], $sortFields) && isset($sorter['sort_field']) && $sorter['sort_field'] && isset($sorter['sort_ord']) && $sorter['sort_ord']) {
            if (in_array($sorter['sort_field'], self::getUserReportSortFields())) {
                $qb->orderBy(self::ALIAS.'.'.$sorter['sort_field'], $sorter['sort_ord']);
            } elseif (in_array($sorter['sort_field'], UserReportDailyRepository::getUserReportDailySortFields())) {
                $qb->orderBy($sorter['sort_field'].'_sum', $sorter['sort_ord']);
            }
        }

        return $qb->getQuery();
    }

    /**
     * Get processed result array
     *
     * @param array $reportArray report array.
     *
     * @return array
     */
    public function processRecord($recordArray, $searchParams, $container = null)
    {
        $booleanFields  = array_keys(CommonManager::getUserReportBooleanFieldsArray());
        $categoryFields = array_keys(CommonManager::getUserReportCategoryFieldsArray());
        $dateTypeFields = array_keys(CommonManager::getUserReportDateFieldsArray());
        $editionFields  = array_keys(CommonManager::getUserReportEditionFieldsArray());
        $isCategorySet  = false;

        if ($recordArray && is_array($recordArray)) {
            if (in_array('is_new', $searchParams['rus_report_columns']) && $searchParams['rus_report_type'] == 'user_wise') {
                $enteredStartDate = CommonManager::getTimeStampFromStartDate($searchParams['rus_from_date']);
                $enteredEndDate   = CommonManager::getTimeStampFromEndDate($searchParams['rus_to_date']);
                $signupDate       = $recordArray['signup_date'];
                if ($signupDate >= $enteredStartDate && $signupDate <= $enteredEndDate) {
                    $recordArray['is_new'] = 'Yes';
                } else {
                    $recordArray['is_new'] = 'No';
                }
            }

            foreach ($recordArray as $key => $value) {
                if (in_array($key, $dateTypeFields)) {
                    if ($value == null) {
                        $recordArray[$key] = '';
                    } else {
                        $recordArray[$key] = CommonManager::formatDate($value, $container, \IntlDateFormatter::SHORT);
                    }
                }

                if (in_array($key, $booleanFields) && $searchParams['rus_report_type'] == 'user_wise') {
                    if ($value == 1) {
                        $recordArray[$key] = 'Yes';
                    } else {
                        $recordArray[$key] = 'No';
                    }
                }
            }
        }

        return $recordArray;
    }

    public function getCategoryAndEditionDataArray($searchParams, $container = null)
    {
        $recordArray    = array();
        $categoryFields = array_keys(CommonManager::getUserReportCategoryFieldsArray());
        $editionFields  = array_keys(CommonManager::getUserReportEditionFieldsArray());
        $packageFields  = array_keys(CommonManager::getUserReportProfilePackageFieldsArray());
        $dateFilterType = $searchParams['rus_date_filter_type'];

        if (CommonManager::inArrayMulti($categoryFields, $searchParams['rus_report_columns'])) {
            $categoryArray = CommonManager::getHistoryRepository($container, 'FaReportBundle:UserReportCategoryDaily')->getCategoryInWhichMaxAdPostedByDateRange($searchParams);
            if ($categoryArray && count($categoryArray) > 0) {
                $categoryPath = CommonManager::getEntityRepository($container, 'FaEntityBundle:Category')->getCategoryPathArrayById($categoryArray[0]['category_id'], false, $container);
                if (is_array($categoryPath)) {
                    $counter = 1;
                    foreach ($categoryPath as $key => $value) {
                        switch ($counter) {
                            case 1:
                                $recordArray['category'] = $value;
                                break;
                            case 2:
                                $recordArray['class'] = $value;
                                break;
                            case 3:
                                $recordArray['subclass'] = $value;
                                break;
                            case 4:
                                $recordArray['sub_sub_class'] = $value;
                                break;
                        }
                        $counter++;
                    }
                }
            }
        }

        if (CommonManager::inArrayMulti($editionFields, $searchParams['rus_report_columns'])) {
            $editionArray = CommonManager::getHistoryRepository($container, 'FaReportBundle:UserReportEditionDaily')->getEditionInWhichMaxAdPostedByDateRange($searchParams);
            if ($editionArray && count($editionArray) > 0) {
                $entityCacheManager     = $container->get('fa.entity.cache.manager');
                $editionName            = $entityCacheManager->getEntityNameById('FaAdBundle:PrintEdition', $editionArray[0]['edition_id']);
                $recordArray['edition'] = $editionName;
            }
        }

        if (CommonManager::inArrayMulti($packageFields, $searchParams['rus_report_columns'])) {
            if ($dateFilterType == 'signup_date') {
                $packageArray = CommonManager::getHistoryRepository($container, 'FaReportBundle:UserReportProfilePackageDaily')->getPackageDetailBySignupDateRange($searchParams);
            } else {
                $packageArray = CommonManager::getHistoryRepository($container, 'FaReportBundle:UserReportProfilePackageDaily')->getPackageDetailByDateRange($searchParams);
            }
            if ($packageArray && count($packageArray) > 0) {
                $recordArray['package_revenue'] = CommonManager::formatCurrency($packageArray[0]['TotalPackageRevenue'], $container);
            }
        }

        return $recordArray;
    }

    /**
     * Get user report query
     *
     * @param array $searchParams search parameters array.
     *
     * @return array
     */
    public function getBooleanAndOtherFieldsSumQuery($searchParams)
    {
        $qb = $this->createQueryBuilder(self::ALIAS)
        ->select(
            'SUM('.self::ALIAS.'.is_active) As is_active',
            'SUM('.self::ALIAS.'.is_facebook_verified) As is_facebook_verified',
            'SUM('.self::ALIAS.'.is_paypal_vefiried) As is_paypal_vefiried',
            'SUM('.self::ALIAS.'.total_ad) As total_ad',
            'SUM('.self::ALIAS.'.total_active_ad) As total_active_ad'
        );

        if ($searchParams && !empty($searchParams['rus_from_date'])) {
            $finalStartDate = CommonManager::getTimeStampFromStartDate($searchParams['rus_from_date']);
            if (isset($searchParams['rus_to_date']) && $searchParams['rus_to_date'] != '') {
                $finalEndDate = CommonManager::getTimeStampFromEndDate($searchParams['rus_to_date']);
            } else {
                $finalEndDate = CommonManager::getTimeStampFromEndDate(date('d/m/Y'));
            }

            if (isset($searchParams['rus_date_filter_type']) && $searchParams['rus_date_filter_type'] == 'signup_date') {
                $qb = $qb->where('('.self::ALIAS.'.signup_date BETWEEN '.$finalStartDate.' AND  '.$finalEndDate.')');
            } else {
                $qb = $qb->where('('.self::ALIAS.'.created_at BETWEEN '.$finalStartDate.' AND  '.$finalEndDate.')');
                $qb = $qb->orWhere('('.self::ALIAS.'.updated_at BETWEEN '.$finalStartDate.' AND  '.$finalEndDate.')');
            }
        }

        if ($searchParams && !empty($searchParams['rus_user_type'])) {
            $qb = $qb->andWhere(self::ALIAS.'.role_id = '.$searchParams['rus_user_type']);
        }

        return $qb->getQuery();
    }

    /**
     * Get newly signup users query
     *
     * @param array $searchParams search parameters array.
     *
     * @return array
     */
    public function getNewlySignupUsersQuery($searchParams)
    {
        $qb = $this->createQueryBuilder(self::ALIAS)
        ->select(
            'COUNT('.self::ALIAS.'.id) as signup_date'
        );

        if ($searchParams && !empty($searchParams['rus_from_date'])) {
            $finalStartDate = CommonManager::getTimeStampFromStartDate($searchParams['rus_from_date']);
            if (isset($searchParams['rus_to_date']) && $searchParams['rus_to_date'] != '') {
                $finalEndDate = CommonManager::getTimeStampFromEndDate($searchParams['rus_to_date']);
            } else {
                $finalEndDate = CommonManager::getTimeStampFromEndDate(date('d/m/Y'));
            }
            $qb = $qb->where('('.self::ALIAS.'.signup_date BETWEEN '.$finalStartDate.' AND  '.$finalEndDate.')');
        }

        if ($searchParams && !empty($searchParams['rus_user_type'])) {
            $qb = $qb->andWhere(self::ALIAS.'.role_id = '.$searchParams['rus_user_type']);
        } else {
            $roleIds = array(RoleRepository::ROLE_BUSINESS_SELLER_ID, RoleRepository::ROLE_SELLER_ID);
            $qb = $qb->andWhere(self::ALIAS.'.role_id IN (:roleIds)');
            $qb = $qb->setParameter('roleIds', $roleIds);
        }

        return $qb->getQuery();
    }

    /**
     * Get fields which are not available in group type report
     *
     * @return array
     */
    public function getNotAvailableFieldsArrayForGroupTypeReport()
    {
        return array('postcode', 'town', 'last_paa', 'first_paa', 'package_name', 'package_cancelled');
    }

    /**
     * Get user report sort fields
     */
    public static function getUserReportSortFields()
    {
        $userReportSortFields   = array();
        $userReportSortFields[] = 'name';
        $userReportSortFields[] = 'username';
        $userReportSortFields[] = 'email';
        $userReportSortFields[] = 'signup_date';
        $userReportSortFields[] = 'total_ad';
        $userReportSortFields[] = 'total_active_ad';

        return $userReportSortFields;
    }

    /**
     * Get report sort fields
     */
    public static function getReportSortFields()
    {
        return array_merge(self::getUserReportSortFields(), UserReportDailyRepository::getUserReportDailySortFields());
    }

    /**
     * Get user details.
     *
     * @param array $userIds user id array.
     *
     * @return array
     */
    public function getUserDetailByUserIds($userIds)
    {
        $userDetail = array();
        $reportUsers = $this->getBaseQueryBuilder()
        ->andWhere(self::ALIAS.'.user_id IN (:userIds)')
        ->setParameter('userIds', $userIds)
        ->getQuery()
        ->getResult();
        foreach ($reportUsers as $reportUser) {
            $userDetail[$reportUser->getUserId()] = array(
                'name' => $reportUser->getName(),
                'business_name' => $reportUser->getBusinessName(),
                'email' => $reportUser->getEmail(),
                'phone' => $reportUser->getPhone(),
            );
        }

        return $userDetail;
    }

    /**
     * Get PPR report query
     *
     * @param array $searchParams search parameters array.
     *
     * @return array
     */
    public function getPPRReportQueryOLD($searchParams, $sorter = null)
    {
        $userReportDailyTableFields = array('renewed_ads', 'expired_ads', 'cancelled_ads', 'number_of_ad_placed', 'number_of_ad_sold', 'number_of_ads_to_renew', 'saved_searches', 'total_spent');

        $qb = $this->createQueryBuilder(self::ALIAS)
        ->select(
            self::ALIAS.'.user_id',
            self::ALIAS.'.role_id',
            self::ALIAS.'.username',
            self::ALIAS.'.name',
            self::ALIAS.'.email',
            self::ALIAS.'.is_active',
            self::ALIAS.'.signup_date',
            self::ALIAS.'.first_paa',
            self::ALIAS.'.last_paa',
            self::ALIAS.'.postcode',
            self::ALIAS.'.town_id',
            self::ALIAS.'.is_facebook_verified',
            self::ALIAS.'.is_paypal_vefiried',
            self::ALIAS.'.total_ad',
            self::ALIAS.'.total_active_ad'
        );

        if ($searchParams && CommonManager::inArrayMulti($userReportDailyTableFields, $searchParams['rus_report_columns'])) {
            $qb = $qb->addSelect(
                'SUM('.UserReportDailyRepository::ALIAS.'.renewed_ads) As renewed_ads',
                'SUM('.UserReportDailyRepository::ALIAS.'.expired_ads) As expired_ads',
                'SUM('.UserReportDailyRepository::ALIAS.'.cancelled_ads) As cancelled_ads',
                'SUM('.UserReportDailyRepository::ALIAS.'.number_of_ad_placed) As number_of_ad_placed',
                'SUM('.UserReportDailyRepository::ALIAS.'.number_of_ad_sold) As number_of_ad_sold',
                'SUM('.UserReportDailyRepository::ALIAS.'.number_of_ads_to_renew) As number_of_ads_to_renew',
                'SUM('.UserReportDailyRepository::ALIAS.'.saved_searches) As saved_searches',
                'SUM('.UserReportDailyRepository::ALIAS.'.total_spent) As total_spent'
            );

            $qb = $qb->addSelect(
                'SUM('.UserReportDailyRepository::ALIAS.'.renewed_ads) As renewed_ads_sum',
                'SUM('.UserReportDailyRepository::ALIAS.'.expired_ads) As expired_ads_sum',
                'SUM('.UserReportDailyRepository::ALIAS.'.cancelled_ads) As cancelled_ads_sum',
                'SUM('.UserReportDailyRepository::ALIAS.'.number_of_ad_placed) As number_of_ad_placed_sum',
                'SUM('.UserReportDailyRepository::ALIAS.'.number_of_ad_sold) As number_of_ad_sold_sum',
                'SUM('.UserReportDailyRepository::ALIAS.'.number_of_ads_to_renew) As number_of_ads_to_renew_sum',
                'SUM('.UserReportDailyRepository::ALIAS.'.saved_searches) As saved_searches_sum',
                'SUM('.UserReportDailyRepository::ALIAS.'.total_spent) As total_spent_sum'
            );
        }

        if ($searchParams && !empty($searchParams['rus_from_date'])) {
            $finalStartDate = CommonManager::getTimeStampFromStartDate($searchParams['rus_from_date']);
            if (isset($searchParams['rus_to_date']) && $searchParams['rus_to_date'] != '') {
                $finalEndDate = CommonManager::getTimeStampFromEndDate($searchParams['rus_to_date']);
            } else {
                $finalEndDate = CommonManager::getTimeStampFromEndDate(date('d/m/Y'));
            }

            $qb = $qb->where('('.UserReportDailyRepository::ALIAS.'.created_at BETWEEN '.$finalStartDate.' AND '.$finalEndDate.')');
            $qb = $qb->innerJoin('FaReportBundle:UserReportDaily', UserReportDailyRepository::ALIAS, 'WITH', UserReportDailyRepository::ALIAS.'.user_id = '.self::ALIAS.'.user_id');
        }

        if ($searchParams && !empty($searchParams['rus_name'])) {
            $qb = $qb->andWhere(self::ALIAS.'.name LIKE :name');
            $qb = $qb->setParameter('name', $searchParams['rus_name'].'%');
        }

        if ($searchParams && !empty($searchParams['rus_email'])) {
            $qb = $qb->andWhere(self::ALIAS.'.email LIKE :email');
            $qb = $qb->setParameter('email', $searchParams['rus_email'].'%');
        }

        $qb = $qb->groupBy(self::ALIAS.'.user_id');

        // sorting.
        $sortFields = self::getReportSortFields();
        if (in_array($sorter['sort_field'], $sortFields) && isset($sorter['sort_field']) && $sorter['sort_field'] && isset($sorter['sort_ord']) && $sorter['sort_ord']) {
            if (in_array($sorter['sort_field'], self::getUserReportSortFields())) {
                $qb->orderBy(self::ALIAS.'.'.$sorter['sort_field'], $sorter['sort_ord']);
            } elseif (in_array($sorter['sort_field'], UserReportDailyRepository::getUserReportDailySortFields())) {
                $qb->orderBy($sorter['sort_field'].'_sum', $sorter['sort_ord']);
            }
        }

        return $qb->getQuery();
    }

    /**
     * Get PPR report query
     *
     * @param array $searchParams search parameters array.
     *
     * @return array
     */
    public function getPPRReportQuery($searchParams, $sorter = null)
    {
        $userReportDailyTableFields = array('renewed_ads', 'expired_ads', 'cancelled_ads', 'number_of_ad_placed', 'number_of_ad_sold', 'number_of_ads_to_renew', 'saved_searches', 'total_spent');

        $qb = $this->createQueryBuilder(self::ALIAS)
        ->select(
            self::ALIAS.'.user_id',
            self::ALIAS.'.role_id',
            self::ALIAS.'.username',
            self::ALIAS.'.name',
            self::ALIAS.'.email',
            self::ALIAS.'.is_active',
            self::ALIAS.'.signup_date',
            self::ALIAS.'.first_paa',
            self::ALIAS.'.last_paa',
            self::ALIAS.'.postcode',
            self::ALIAS.'.town_id',
            self::ALIAS.'.is_facebook_verified',
            self::ALIAS.'.is_paypal_vefiried',
            self::ALIAS.'.total_ad',
            self::ALIAS.'.total_active_ad'
        );

        if ($searchParams && !empty($searchParams['rus_from_date'])) {
            $finalStartDate = CommonManager::getTimeStampFromStartDate($searchParams['rus_from_date']);
            if (isset($searchParams['rus_to_date']) && $searchParams['rus_to_date'] != '') {
                $finalEndDate = CommonManager::getTimeStampFromEndDate($searchParams['rus_to_date']);
            } else {
                $finalEndDate = CommonManager::getTimeStampFromEndDate(date('d/m/Y'));
            }

            $qb = $qb->where('('.UserReportProfilePackageDailyRepository::ALIAS.'.created_at BETWEEN '.$finalStartDate.' AND  '.$finalEndDate.') AND ('.UserReportProfilePackageDailyRepository::ALIAS.'.package_price > 0)');
            $qb = $qb->innerJoin('FaReportBundle:UserReportProfilePackageDaily', UserReportProfilePackageDailyRepository::ALIAS, 'WITH', UserReportProfilePackageDailyRepository::ALIAS.'.user_id = '.self::ALIAS.'.user_id');
        }

        if ($searchParams && !empty($searchParams['rus_name'])) {
            $qb = $qb->andWhere(self::ALIAS.'.name LIKE :name');
            $qb = $qb->setParameter('name', $searchParams['rus_name'].'%');
        }

        if ($searchParams && !empty($searchParams['rus_email'])) {
            $qb = $qb->andWhere(self::ALIAS.'.email LIKE :email');
            $qb = $qb->setParameter('email', $searchParams['rus_email'].'%');
        }

        if ($searchParams && !empty($searchParams['business_category_id'])) {
            $qb = $qb->andWhere(UserReportProfilePackageDailyRepository::ALIAS.'.package_category_id = :category');
            $qb = $qb->setParameter('category', $searchParams['business_category_id']);
        }

        if ($searchParams && !empty($searchParams['rus_source'])) {
            if ($searchParams['rus_source'] == 'netsuite') {
                $remarkArray = array('migrated_package', 'choose-package-backend');
            } elseif ($searchParams['rus_source'] == 'self-service') {
                $remarkArray = array('package-renew-thourgh-recurring', 'choose-package-frontend', 'reg_back', 'my_account_user_upgrade', 'downgraded-to-free-package-on-fail-payment');
            }

            $qb = $qb->andWhere(UserReportProfilePackageDailyRepository::ALIAS.'.package_remark IN (:packageRemark)');
            $qb = $qb->setParameter('packageRemark', $remarkArray);
        }

        $qb = $qb->andWhere(self::ALIAS.'.role_id IN (:roleIds)');
        $qb = $qb->setParameter('roleIds', array(RoleRepository::ROLE_BUSINESS_SELLER_ID));
        $qb = $qb->groupBy(self::ALIAS.'.user_id');

        // sorting.
        $sortFields = self::getReportSortFields();
        if (in_array($sorter['sort_field'], $sortFields) && isset($sorter['sort_field']) && $sorter['sort_field'] && isset($sorter['sort_ord']) && $sorter['sort_ord']) {
            if (in_array($sorter['sort_field'], self::getUserReportSortFields())) {
                $qb->orderBy(self::ALIAS.'.'.$sorter['sort_field'], $sorter['sort_ord']);
            } elseif (in_array($sorter['sort_field'], UserReportDailyRepository::getUserReportDailySortFields())) {
                $qb->orderBy($sorter['sort_field'].'_sum', $sorter['sort_ord']);
            }
        }

        return $qb->getQuery();
    }

    /**
     * Get processed result array
     *
     * @param array $reportArray report array.
     *
     * @return array
     */
    public function processRecordForPPR($recordArray, $searchParams, $container = null)
    {
        $booleanFields  = array_keys(CommonManager::getUserReportBooleanFieldsArray());
        $dateTypeFields = array_keys(CommonManager::getUserReportDateFieldsArray());

        if ($recordArray && is_array($recordArray)) {
            if (in_array('is_new', $searchParams['rus_report_columns'])) {
                $enteredStartDate = CommonManager::getTimeStampFromStartDate($searchParams['rus_from_date']);
                $enteredEndDate   = CommonManager::getTimeStampFromEndDate($searchParams['rus_to_date']);
                $signupDate       = $recordArray['signup_date'];
                if ($signupDate >= $enteredStartDate && $signupDate <= $enteredEndDate) {
                    $recordArray['is_new'] = 'Yes';
                } else {
                    $recordArray['is_new'] = 'No';
                }
            }

            foreach ($recordArray as $key => $value) {
                if (in_array($key, $dateTypeFields)) {
                    if ($value == null) {
                        $recordArray[$key] = '';
                    } else {
                        $recordArray[$key] = CommonManager::formatDate($value, $container, \IntlDateFormatter::SHORT);
                    }
                }

                if (in_array($key, $booleanFields)) {
                    if ($value == 1) {
                        $recordArray[$key] = 'Yes';
                    } else {
                        $recordArray[$key] = 'No';
                    }
                }
            }
        }

        return $recordArray;
    }

    /**
     * Get user profile report query
     *
     * @param array $searchParams search parameters array.
     *
     * @return array
     */
    public function getUserProfileReportQuery($searchParams, $sorter = null)
    {
        $qb = $this->createQueryBuilder(self::ALIAS)
         ->select(
           self::ALIAS.'.user_id',
           self::ALIAS.'.role_id',
           self::ALIAS.'.username',
           self::ALIAS.'.phone',
           self::ALIAS.'.name',
           self::ALIAS.'.email',
           self::ALIAS.'.signup_date',
           self::ALIAS.'.banner_path',
           self::ALIAS.'.company_welcome_message',
           self::ALIAS.'.company_address',
           self::ALIAS.'.phone1',
           self::ALIAS.'.phone2',
           self::ALIAS.'.website_link',
           self::ALIAS.'.about_us',
           self::ALIAS.'.about_you',
           self::ALIAS.'.image',
           self::ALIAS.'.path'
           );

        if ($searchParams && !empty($searchParams['rus_from_date'])) {
            $finalStartDate = CommonManager::getTimeStampFromStartDate($searchParams['rus_from_date']);
            if (isset($searchParams['rus_to_date']) && $searchParams['rus_to_date'] != '') {
                $finalEndDate = CommonManager::getTimeStampFromEndDate($searchParams['rus_to_date']);
            } else {
                $finalEndDate = CommonManager::getTimeStampFromEndDate(date('d/m/Y'));
            }

            if ($searchParams['rus_date_filter_type'] == 'signup_date') {
                $qb = $qb->where('('.self::ALIAS.'.signup_date BETWEEN '.$finalStartDate.' AND  '.$finalEndDate.')');
            } else {
                $qb = $qb->where('('.self::ALIAS.'.updated_at BETWEEN '.$finalStartDate.' AND  '.$finalEndDate.')');
            }
        }

        if ($searchParams && !empty($searchParams['rus_user_type'])) {
            $qb = $qb->andWhere(self::ALIAS.'.role_id = '.$searchParams['rus_user_type']);
        } else {
            $roleIds = array(RoleRepository::ROLE_BUSINESS_SELLER_ID, RoleRepository::ROLE_SELLER_ID);
            $qb = $qb->andWhere(self::ALIAS.'.role_id IN (:roleIds)');
            $qb = $qb->setParameter('roleIds', $roleIds);
        }

        if ($searchParams && !empty($searchParams['rus_email'])) {
            $qb = $qb->andWhere(self::ALIAS.'.email LIKE :email');
            $qb = $qb->setParameter('email', $searchParams['rus_email'].'%');
        }

        $booleanFields    = array('rus_banner_image' => 'banner_path', 'rus_welcome_message' => 'company_welcome_message', 'rus_address' => 'company_address', 'rus_website_link' => 'website_link', 'rus_about' => 'about_us');
        $searchParamsKeys = array_keys($searchParams);
        foreach ($booleanFields as $fieldName => $dbFieldName) {
            if (in_array($fieldName, $searchParamsKeys) && $searchParams[$fieldName] != '') {
                if ($searchParams[$fieldName] == '1') {
                    $qb = $qb->andWhere(self::ALIAS.'.'.$dbFieldName.' IS NOT NULL AND '.self::ALIAS.'.'.$dbFieldName.' <> \'\'');
                } else {
                    $qb = $qb->andWhere(self::ALIAS.'.'.$dbFieldName.' IS NULL OR '.self::ALIAS.'.'.$dbFieldName.' = \'\'');
                }
            }
        }

        if ($searchParams && $searchParams['rus_profile_image'] != '') {
            if (!empty($searchParams['rus_user_type'])) {
                if ($searchParams['rus_user_type'] == RoleRepository::ROLE_BUSINESS_SELLER_ID) {
                    if ($searchParams['rus_profile_image'] == '1') {
                        $qb = $qb->andWhere(self::ALIAS.'.path IS NOT NULL AND '.self::ALIAS.'.path <> \'\'');
                    } else {
                        $qb = $qb->andWhere(self::ALIAS.'.path IS NULL OR '.self::ALIAS.'.path = \'\'');
                    }
                } else {
                    if ($searchParams['rus_profile_image'] == '1') {
                        $qb = $qb->andWhere(self::ALIAS.'.image IS NOT NULL AND '.self::ALIAS.'.image <> \'\'');
                    } else {
                        $qb = $qb->andWhere(self::ALIAS.'.image IS NULL OR '.self::ALIAS.'.image = \'\'');
                    }
                }
            } else {
                if ($searchParams['rus_profile_image'] == '1') {
                    $qb = $qb->andWhere('('.self::ALIAS.'.path IS NOT NULL AND '.self::ALIAS.'.path <> \'\' AND '.self::ALIAS.'.role_id = '.RoleRepository::ROLE_BUSINESS_SELLER_ID.') OR ('.self::ALIAS.'.image IS NOT NULL AND '.self::ALIAS.'.image <> \'\' AND '.self::ALIAS.'.role_id = '.RoleRepository::ROLE_SELLER_ID.')');
                } else {
                    $qb = $qb->andWhere('('.self::ALIAS.'.path IS NULL OR '.self::ALIAS.'.path = \'\' AND '.self::ALIAS.'.role_id = '.RoleRepository::ROLE_BUSINESS_SELLER_ID.') AND ('.self::ALIAS.'.image IS NULL OR '.self::ALIAS.'.image = \'\' AND '.self::ALIAS.'.role_id = '.RoleRepository::ROLE_SELLER_ID.')');
                }
            }
        }

        if ($searchParams && $searchParams['rus_phone'] != '') {
            if (!empty($searchParams['rus_user_type'])) {
                if ($searchParams['rus_user_type'] == RoleRepository::ROLE_BUSINESS_SELLER_ID) {
                    if ($searchParams['rus_phone'] == '1') {
                        $qb = $qb->andWhere('('.self::ALIAS.'.phone1 IS NOT NULL AND '.self::ALIAS.'.phone1 <> \'\') OR ('.self::ALIAS.'.phone2 IS NOT NULL AND '.self::ALIAS.'.phone2 <> \'\')');
                    } else {
                        $qb = $qb->andWhere('('.self::ALIAS.'.phone1 IS NULL OR '.self::ALIAS.'.phone1 = \'\') AND ('.self::ALIAS.'.phone2 IS NULL OR '.self::ALIAS.'.phone2 = \'\')');
                    }
                } else {
                    if ($searchParams['rus_phone'] == '1') {
                        $qb = $qb->andWhere(self::ALIAS.'.phone IS NOT NULL AND '.self::ALIAS.'.phone <> \'\'');
                    } else {
                        $qb = $qb->andWhere(self::ALIAS.'.phone IS NULL OR '.self::ALIAS.'.phone = \'\'');
                    }
                }
            } else {
                if ($searchParams['rus_phone'] == '1') {
                    $qb = $qb->andWhere('(('.self::ALIAS.'.phone1 IS NOT NULL AND '.self::ALIAS.'.phone1 <> \'\' AND '.self::ALIAS.'.role_id = '.RoleRepository::ROLE_BUSINESS_SELLER_ID.') OR ('.self::ALIAS.'.phone2 IS NOT NULL AND '.self::ALIAS.'.phone2 <> \'\' AND '.self::ALIAS.'.role_id = '.RoleRepository::ROLE_BUSINESS_SELLER_ID.')) OR ('.self::ALIAS.'.phone IS NOT NULL AND '.self::ALIAS.'.phone <> \'\' AND '.self::ALIAS.'.role_id = '.RoleRepository::ROLE_SELLER_ID.')');
                } else {
                    $qb = $qb->andWhere('(('.self::ALIAS.'.phone1 IS NULL OR '.self::ALIAS.'.phone1 = \'\' AND '.self::ALIAS.'.role_id = '.RoleRepository::ROLE_BUSINESS_SELLER_ID.') AND ('.self::ALIAS.'.phone2 IS NULL OR '.self::ALIAS.'.phone2 = \'\' AND '.self::ALIAS.'.role_id = '.RoleRepository::ROLE_BUSINESS_SELLER_ID.')) AND ('.self::ALIAS.'.phone IS NULL OR '.self::ALIAS.'.phone = \'\' AND '.self::ALIAS.'.role_id = '.RoleRepository::ROLE_SELLER_ID.')');
                }
            }
        }

        if ($searchParams && $searchParams['rus_about'] != '') {
            if (!empty($searchParams['rus_user_type'])) {
                if ($searchParams['rus_user_type'] == RoleRepository::ROLE_BUSINESS_SELLER_ID) {
                    if ($searchParams['rus_about'] == '1') {
                        $qb = $qb->andWhere(self::ALIAS.'.about_us IS NOT NULL AND '.self::ALIAS.'.about_us <> \'\'');
                    } else {
                        $qb = $qb->andWhere(self::ALIAS.'.about_us IS NULL OR '.self::ALIAS.'.about_us = \'\'');
                    }
                } else {
                    if ($searchParams['rus_about'] == '1') {
                        $qb = $qb->andWhere(self::ALIAS.'.about_you IS NOT NULL AND '.self::ALIAS.'.about_you <> \'\'');
                    } else {
                        $qb = $qb->andWhere(self::ALIAS.'.about_you IS NULL OR '.self::ALIAS.'.about_you = \'\'');
                    }
                }
            } else {
                if ($searchParams['rus_about'] == '1') {
                    $qb = $qb->andWhere('('.self::ALIAS.'.about_us IS NOT NULL AND '.self::ALIAS.'.about_us <> \'\' AND '.self::ALIAS.'.role_id = '.RoleRepository::ROLE_BUSINESS_SELLER_ID.') OR ('.self::ALIAS.'.about_you IS NOT NULL AND '.self::ALIAS.'.about_you <> \'\' AND '.self::ALIAS.'.role_id = '.RoleRepository::ROLE_SELLER_ID.')');
                } else {
                    $qb = $qb->andWhere('('.self::ALIAS.'.about_us IS NULL OR '.self::ALIAS.'.about_us = \'\' AND '.self::ALIAS.'.role_id = '.RoleRepository::ROLE_BUSINESS_SELLER_ID.') AND ('.self::ALIAS.'.about_you IS NULL OR '.self::ALIAS.'.about_you = \'\' AND '.self::ALIAS.'.role_id = '.RoleRepository::ROLE_SELLER_ID.')');
                }
            }
        }

        // sorting.
        $sortFields = self::getReportSortFields();
        if (in_array($sorter['sort_field'], $sortFields) && isset($sorter['sort_field']) && $sorter['sort_field'] && isset($sorter['sort_ord']) && $sorter['sort_ord']) {
            if (in_array($sorter['sort_field'], self::getUserReportSortFields())) {
                $qb->orderBy(self::ALIAS.'.'.$sorter['sort_field'], $sorter['sort_ord']);
            } elseif (in_array($sorter['sort_field'], UserReportDailyRepository::getUserReportDailySortFields())) {
                $qb->orderBy($sorter['sort_field'].'_sum', $sorter['sort_ord']);
            }
        }

        return $qb->getQuery();
    }

    /**
     * Get processed result array
     *
     * @param array $reportArray report array.
     *
     * @return array
     */
    public function processUserProfileRecord($recordArray, $searchParams, $container = null)
    {
        $booleanFields       = array_keys(CommonManager::getUserProfileReportBooleanFieldsArray());
        $ignoreBooleanFields = array('path', 'image', 'phone', 'phone1', 'phone2');

        if ($recordArray && is_array($recordArray)) {
            foreach ($recordArray as $key => $value) {
                if ($key == 'role_id') {
                    if ($value == RoleRepository::ROLE_BUSINESS_SELLER_ID) {
                        $recordArray[$key] = 'Business';
                    } else {
                        $recordArray[$key] = 'Private';
                    }
                }

                if ($key == 'path' || $key == 'image') {
                    if ((!empty($recordArray['path']) && $recordArray['path'] != '') || (!empty($recordArray['image']) && $recordArray['image'] != '')) {
                        $recordArray['user_logo'] = 'Yes';
                    } else {
                        $recordArray['user_logo'] = 'No';
                    }
                }

                if ($key == 'phone' || $key == 'phone1'|| $key == 'phone2') {
                    if ((isset($recordArray['phone']) && strlen($recordArray['phone']) > 0) || (isset($recordArray['phone1']) && strlen($recordArray['phone1']) > 0) || (isset($recordArray['phone2']) && strlen($recordArray['phone2']) > 0)) {
                        $recordArray['user_phone'] = 'Yes';
                    } else {
                        $recordArray['user_phone'] = 'No';
                    }
                }

                if ($key == 'about_us' || $key == 'about_you') {
                    if ((!empty($recordArray['about_us']) && $recordArray['about_us'] != '') || (!empty($recordArray['about_you']) && $recordArray['about_you'] != '')) {
                        $recordArray['about'] = 'Yes';
                    } else {
                        $recordArray['about'] = 'No';
                    }
                }

                if (in_array($key, $booleanFields) && !in_array($key, $ignoreBooleanFields)) {
                    if (!empty($value) && strlen(trim($value)) > 0) {
                        $recordArray[$key] = 'Yes';
                    } else {
                        $recordArray[$key] = 'No';
                    }
                }
            }
        }

        return $recordArray;
    }
}
