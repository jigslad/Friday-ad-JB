<?php

/**
 * This file is part of the fa bundle.
 *
 * @copyright Copyright (c) 2014, FMG
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Fa\Bundle\EntityBundle\Repository;

use Doctrine\ORM\EntityRepository as BaseEntityRepository;
use Doctrine\Common\Collections\ArrayCollection;
use Fa\Bundle\CoreBundle\Manager\CommonManager;
use Fa\Bundle\CoreBundle\Manager\SolrSearchManager;
use Fa\Bundle\CoreBundle\Manager\SearchFiltersManager;
use Fa\Bundle\EntityBundle\Repository\EntityRepository;
use Fa\Bundle\AdBundle\Solr\AdSolrFieldMapping;

/**
 * Category dimension repository.
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CategoryDimensionRepository extends BaseEntityRepository
{
    use \Fa\Bundle\CoreBundle\Search\Search;

    const ALIAS = 'cd';

    /**
     * Prepare query builder.
     *
     * @param array $data array of data
     *
     * @return Doctrine\ORM\QueryBuilder The query builder
     */
    public function getBaseQueryBuilder()
    {
        return $this->createQueryBuilder(self::ALIAS);
    }

    /**
     * Get dimension by category id.
     *
     * @param string $categoryId
     *
     * @return ArrayCollection
     */
    public function getDimesionByCategory($categoryId = null)
    {
        $qb = $this->createQueryBuilder(self::ALIAS);

        if (!$categoryId) {
            $qb->where(self::ALIAS.'.category IS NULL');
        } else {
            $qb->where(self::ALIAS.'.category = '.$categoryId);
        }

        $objResources = $qb->getQuery()->getArrayResult();

        return $objResources;
    }

    /**
     * Get dimension array by category id.
     *
     * @param string $categoryId
     *
     * @return array
     */
    public function getDimesionByCategoryArray($categoryId = null)
    {
        $dimensionArray = array();

        $results = $this->getDimesionByCategory($categoryId);

        foreach ($results as $result) {
            $dimensionArray[$result['id']] = $result['name'];
        }

        return $dimensionArray;
    }

    /**
     * Get hierarchy dimension array by category id.
     *
     * @param string $categoryId
     *
     * @return array
     */
    public function getDimesionByCategoryHierarchyArray($categoryId = null)
    {
        $dimensionArray = array();

        $results = $this->getDimesionByCategory($categoryId);

        foreach ($results as $result) {
            $dimensionArray[$result['id']] = $result['name'];
        }

        if (!count($dimensionArray)) {
            $categoryObj = $this->_em->getRepository('FaEntityBundle:Category')->find($categoryId);
            if ($categoryObj && $categoryObj->getLvl() > 1) {
                $parentObj = $categoryObj->getParent();
                return $this->getDimesionByCategoryHierarchyArray($parentObj->getId());
            }
        }

        return $dimensionArray;
    }

    /**
     * Get dimensions array by category ids.
     *
     * @param mixed   $categoryId Category id.
     * @param object  $container  Container identifier.
     * @param boolean $isIndex    Is indexed dimensions or not.
     *
     * @return array
     */
    public function getDimesionsByCategoryId($categoryId = null, $container = null, $isIndex = false)
    {
        if ($container) {
            $culture     = CommonManager::getCurrentCulture($container);
            $cacheKey    = $this->getTableName().'|'.__FUNCTION__.'|'.$categoryId.'_'.$isIndex.'_'.$culture;
            $cachedValue = CommonManager::getCacheVersion($container, $cacheKey);

            if ($cachedValue !== false) {
                return $cachedValue;
            }
        }

        $dimensionArray = array();
        $categoryPath   = $this->getEntityManager()->getRepository('FaEntityBundle:Category')->getCategoryPathArrayById($categoryId, false, $container);
        $categorieIds   = array_keys($categoryPath);

        if (!$isIndex) {
            array_shift($categorieIds);
        }

        if (count($categorieIds)) {
            $qb = $this->createQueryBuilder(self::ALIAS)
                       ->andWhere(self::ALIAS.'.category IN (:category_id)')
                       ->setParameter('category_id', $categorieIds)
                       ->orderBy(self::ALIAS.'.category', 'asc');

            if ($isIndex) {
                $qb->andWhere(self::ALIAS.'.is_index=1');
            }

            $dimensions = $qb->getQuery()->getArrayResult();

            foreach ($dimensions as $dimension) {
                $dimensionArray[$dimension['id']] = $dimension['name'];
            }
        }

        if ($container) {
            CommonManager::setCacheVersion($container, $cacheKey, $dimensionArray);
        }

        return $dimensionArray;
    }

    /**
     * Get indexable dimensions.
     *
     * @return array
     */
    public static function getIndexableDimesionsArray()
    {
        $indexableDimensionArray = array();

        $oClass = new \ReflectionClass('\Fa\Bundle\EntityBundle\Interfaces\IndexableDimensionInterface');
        $constantArray = $oClass->getConstants();

        foreach ($constantArray as $constKey => $constValue) {
            $displayValue = array_map("strtolower", explode('_', $constKey));
            $displayValue = array_map("ucfirst", $displayValue);
            $indexableDimensionArray[$constValue] = '{'.implode('-', $displayValue).'}';
        }
        asort($indexableDimensionArray);

        return $indexableDimensionArray;
    }

    /**
     * Get dimensions unit options.
     *
     * @param object $container Container identifier.
     *
     * @return array
     */
    public function getDimensionUnitOptionsArray($container)
    {
        $translator = CommonManager::getTranslator($container);
        $unitArray  = array(
                          'cm'   => $translator->trans('cm'),
                          'inch' => $translator->trans('inches'),
        );

        return $unitArray;
    }

    /**
     * Get dimensions unit name from id.
     *
     * @param integer $id Id of dimension_unit.
     * @param object  $container
     *
     * @return string
     */
    public function getDimensionUnitNameById($id, $container)
    {
        $options = $this->getDimensionUnitOptionsArray($container);
        if (isset($options[$id])) {
            return $options[$id];
        }

        return null;
    }

    /**
     * Get indexed dimensions array by category ids.
     *
     * @param mixed  $categoryId Category id.
     * @param object $container  Container identifier.
     *
     * @return array
     */
    public function getIndexedDimesionsByCategoryId($categoryId = null, $container = null)
    {
        return $this->getDimesionsByCategoryId($categoryId, $container, true);
    }

    /**
     * Get indexed dimensions array by category ids.
     *
     * @param integer $dimensionField  Dimension field.
     * @param array   $searchParams    Search parameters.
     * @param array   $seleted         Selected choices.
     * @param object  $container       Container identifier.
     * @param boolean $isCheckedFirst  Flag to show checked checkboxes first.
     * @param string  $categoryId      Category id.
     * @param string  $staticFilters   Solr search static filters.
     * @param boolean $fromCommandLine From commandline flag.
     *
     * @return array
     */
    public function getDimensionFacetBySearchParams($dimensionField, $searchParams = array(), $selected = array(), $container = null, $isCheckedFirst = false, $categoryId = null, $staticFilters = null, $fromCommandLine = false, $cookieLocationDetails = array(), $showWithoutCategory = false)
    {
        $categoryName = null;
        $dimensionFacetData = array();
        $selected = (is_array($selected) ? $selected: array ($selected));

        if ($showWithoutCategory || (isset($searchParams['item__category_id']) && $searchParams['item__category_id']) || $categoryId) {
            if (($pos = strpos($dimensionField, "__")) !== false) {
                $dimensionField = substr($dimensionField, $pos + 2);
            }

            if ((isset($searchParams['item__category_id']) && $searchParams['item__category_id'])) {
                $categoryName = $this->getEntityManager()->getRepository('FaEntityBundle:Category')->getRootCategoryName($searchParams['item__category_id'], $container, true);
            } else if ($categoryId) {
                $categoryName = $this->getEntityManager()->getRepository('FaEntityBundle:Category')->getRootCategoryName($categoryId, $container, true);
            }
            $solrMapping  = 'Fa\Bundle\AdBundle\Solr\Ad'.$categoryName.'SolrFieldMapping::';
            $facetField   = $solrMapping.strtoupper($dimensionField);

            if ($dimensionField == 'ad_type_id') {
                $facetField = 'Fa\Bundle\AdBundle\Solr\AdSolrFieldMapping::TYPE_ID';
            }

            if ($dimensionField == 'category_make') {
                $facetField = 'Fa\Bundle\AdBundle\Solr\AdSolrFieldMapping::CATEGORY_MAKE_ID';
            }
            
            if (defined($facetField)) { 
                $data       = array();
                $keywords   = null;
                
                

                if (isset($searchParams['keywords']) && $searchParams['keywords']) {
                    $keywords = $searchParams['keywords'];
                    unset($searchParams['keywords']);
                }

                $searchParamsCommandLine = array('search' => $searchParams);
                if ($fromCommandLine) {
                    $searchParamsCommandLine['sort_field'] = 'item__published_at';
                    $searchParamsCommandLine['sort_ord'] = 'desc';
                    $searchParamsCommandLine['page']  = 1;
                }

                // initialize search filter manager service and prepare filter data for searching
                $container->get('fa.searchfilters.manager')->init($this->_em->getRepository('FaAdBundle:Ad'), $this->_em->getClassMetadata('FaAdBundle:Ad')->getTableName(), 'search', $searchParamsCommandLine);
                $data = $container->get('fa.searchfilters.manager')->getFiltersData();

                if ((!isset($data['search']['item__distance']) || (isset($data['search']['item__distance']) && $data['search']['item__distance'] >= 0 && $data['search']['item__distance'] <= 200))) {
                    if (is_array($cookieLocationDetails) && count($cookieLocationDetails) &&
                        (!isset($cookieLocationDetails['latitude']) || !$cookieLocationDetails['latitude']) &&
                        (!isset($cookieLocationDetails['longitude']) || !$cookieLocationDetails['longitude']) &&
                        (isset($data['query_sorter']['item']) && isset($data['query_sorter']['item']['geodist']))) {
                            unset($data['query_sorter']['item']['geodist']);
                    }
                }

                // Active or expired ads
                if (isset($searchParams['expired_ads']) && $searchParams['expired_ads']) {
                    $data['query_filters']['item']['status_id'] = EntityRepository::AD_STATUS_EXPIRED_ID;
                } else {
                    $data['query_filters']['item']['status_id'] = EntityRepository::AD_STATUS_LIVE_ID;
                }

                // ad location filter with distance
                if (isset($searchParams['item__location']) && $searchParams['item__location']) {
                    $data['query_filters']['item']['location'] = $searchParams['item__location'].'|'. (isset($searchParams['item__distance']) ? $searchParams['item__distance'] : '');
                }

                // ads with min 1 photo
                if (isset($searchParams['items_with_photo']) && $searchParams['items_with_photo']) {
                    $data['query_filters']['item']['image_count'] = '1|';
                }

                // static filters.
                if ($staticFilters) {
                    $data['static_filters'] = $staticFilters;
                } else {
                    // remove adult results when there is no category selected, for is_trade_ad and image_with_photo count.
                    if (!isset($searchParams['item__category_id']) && in_array($dimensionField, array('is_trade_ad', 'id'))) {
                        $data['static_filters'] = ' AND -'.AdSolrFieldMapping::ROOT_CATEGORY_ID.':'.CategoryRepository::ADULT_ID;
                    }
                }

                // Facets for given dimension
                $data['facet_fields'][constant($facetField)] = array('min_count' => 1);
                
                // initialize solr search manager service and fetch data based of above prepared search options
                $container->get('fa.solrsearch.manager')->init('ad', $keywords, $data, 1, 1, 0, true);
                $facetResult = $container->get('fa.solrsearch.manager')->getSolrResponseFacetFields();
                if (isset($facetResult[constant($facetField)])) {
                    $dimensionFacetData = get_object_vars($facetResult[constant($facetField)]);

                    if ($isCheckedFirst) {
                        $selectedOptions    = array();
                        $nonSelectedOptions = array();
                        if (count($dimensionFacetData)) {
                            foreach ($dimensionFacetData as $value => $counter) {
                                if (in_array($value, $selected)) {
                                    $selectedOptions[$value] = $counter;
                                } else {
                                    $nonSelectedOptions[$value] = $counter;
                                }
                            }
                        }

                        $dimensionFacetData = $selectedOptions + $nonSelectedOptions;
                    }
                }
            }
        }

        return $dimensionFacetData;
    }

    /**
     * Get Table Name.
     *
     * @return string
     */
    private function getTableName()
    {
        return $this->_em->getClassMetadata('FaEntityBundle:CategoryDimension')->getTableName();
    }

    /**
     * Get searchable dimension fields array.
     *
     * @param integer $categoryId Category id
     * @param object  $container  Container interface.
     *
     * @return array
     */
    public function getSearchableDimensionFieldsArrayByCategoryId($categoryId, $container)
    {
        $searchableDimensionFieldArray = array();
        if ($categoryId) {
            $dimensions = $this->getSearchableDimesionsArrayByCategoryId($categoryId, $container);

            $dimensionFieldPrefix = 'item';
            $rootCategoryName  = $this->_em->getRepository('FaEntityBundle:Category')->getRootCategoryName($categoryId, $container);

            if ($rootCategoryName) {
                $dimensionFieldPrefix = $dimensionFieldPrefix.'_'.$rootCategoryName;
            }

            foreach ($dimensions as $dimensionId => $dimension) {
                $dimensionName = $dimension['name'];
                $dimensionField = str_replace(array('(', ')', ',', '?', '|', '.', '/', '\\', '*', '+', '-', '"', "'"), '', $dimensionName);

                $searchTypeArray = explode('_', $dimension['search_type']);
                if ($searchTypeArray[0] == 'choice') {
                    $dimensionField = str_replace(' ', '_', strtolower($dimensionField)).'_id';

                    if ($dimensionField == 'ad_type_id') {
                        $dimensionField = 'item__'.$dimensionField;
                    } else {
                        $dimensionField = $dimensionFieldPrefix.'__'.$dimensionField;
                    }

                    $searchableDimensionFieldArray[$dimensionName] = $dimensionField;
                }
            }
        }

        return $searchableDimensionFieldArray;
    }

    /**
     * Get searchable dimensions array by category id.
     *
     * @param integer $categoryId Category id
     * @param object  $container  Container i.dentifier.
     *
     * @return array
     */
    public function getSearchableDimesionsArrayByCategoryId($categoryId, $container = null)
    {
        if ($container) {
            $culture     = CommonManager::getCurrentCulture($container);
            $cacheKey    = $this->getTableName().'|'.__FUNCTION__.'|'.$categoryId.'_'.$culture;
            $cachedValue = CommonManager::getCacheVersion($container, $cacheKey);

            if ($cachedValue !== false) {
                return $cachedValue;
            }
        }

        $dimensionArray = array();
        $categoryPath   = $this->getEntityManager()->getRepository('FaEntityBundle:Category')->getCategoryPathArrayById($categoryId, false, $container);
        $categorieIds   = array_keys($categoryPath);

        if (count($categorieIds)) {
            $qb = $this->createQueryBuilder(self::ALIAS)
                       ->andWhere(self::ALIAS.'.category IN (:category_id)')
                       ->setParameter('category_id', $categorieIds)
                       ->andWhere(self::ALIAS.'.is_searchable=1')
                       ->addOrderBy(self::ALIAS.'.category', 'asc')
                       ->addOrderBy(self::ALIAS.'.ord', 'asc');

            $dimensions = $qb->getQuery()->getArrayResult();

            foreach ($dimensions as $dimension) {
                $dimensionArray[$dimension['id']] = $dimension;
            }
        }

        if ($container) {
            CommonManager::setCacheVersion($container, $cacheKey, $dimensionArray);
        }

        return $dimensionArray;
    }

    /**
     * Get indexable dimension fields array.
     *
     * @param integer $categoryId Category id
     * @param object  $container  Container interface.
     *
     * @return array
     */
    public function getIndexableDimensionFieldsArrayByCategoryId($categoryId, $container)
    {
        $indexableDimensionFieldArray = array();
        if ($categoryId) {
            $dimensions = $this->getIndexableDimesionsArrayByCategoryId($categoryId, $container);

            $dimensionFieldPrefix = 'item';
            $rootCategoryName  = $this->_em->getRepository('FaEntityBundle:Category')->getRootCategoryName($categoryId, $container);

            if ($rootCategoryName) {
                $dimensionFieldPrefix = $dimensionFieldPrefix.'_'.$rootCategoryName;
            }

            foreach ($dimensions as $dimensionId => $dimension) {
                $dimensionName = $dimension['name'];
                $dimensionField = str_replace(array('(', ')', ',', '?', '|', '.', '/', '\\', '*', '+', '-', '"', "'"), '', $dimensionName);

                $searchTypeArray = explode('_', $dimension['search_type']);
                if ($searchTypeArray[0] == 'choice') {
                    $dimensionField = str_replace(' ', '_', strtolower($dimensionField)).'_id';

                    if ($dimensionField == 'ad_type_id') {
                        $dimensionField = 'item__'.$dimensionField;
                    } else {
                        $dimensionField = $dimensionFieldPrefix.'__'.$dimensionField;
                    }

                    $indexableDimensionFieldArray[$dimensionName] = $dimensionField;
                }
            }
        }

        return $indexableDimensionFieldArray;
    }


    /**
     * Get indexable dimensions array by category id.
     *
     * @param integer $categoryId Category id
     * @param object  $container  Container i.dentifier.
     *
     * @return array
     */
    public function getIndexableDimesionsArrayByCategoryId($categoryId, $container = null)
    {
        if ($container) {
            $culture     = CommonManager::getCurrentCulture($container);
            $cacheKey    = $this->getTableName().'|'.__FUNCTION__.'|'.$categoryId.'_'.$culture;
            $cachedValue = CommonManager::getCacheVersion($container, $cacheKey);

            if ($cachedValue !== false) {
                return $cachedValue;
            }
        }

        $dimensionArray = array();
        $categoryPath   = $this->getEntityManager()->getRepository('FaEntityBundle:Category')->getCategoryPathArrayById($categoryId, false, $container);
        $categorieIds   = array_keys($categoryPath);

        if (count($categorieIds)) {
            $qb = $this->createQueryBuilder(self::ALIAS)
            ->andWhere(self::ALIAS.'.category IN (:category_id)')
            ->setParameter('category_id', $categorieIds)
            ->andWhere(self::ALIAS.'.is_index=1')
            ->orderBy(self::ALIAS.'.category', 'asc');

            $dimensions = $qb->getQuery()->getArrayResult();

            foreach ($dimensions as $dimension) {
                $dimensionArray[$dimension['id']] = $dimension;
            }
        }

        if ($container) {
            CommonManager::setCacheVersion($container, $cacheKey, $dimensionArray);
        }

        return $dimensionArray;
    }

    /**
     * Get searchable dimensions array with field by category id.
     *
     * @param integer $categoryId Category id
     * @param object  $container  Container i.dentifier.
     *
     * @return array
     */
    public function getSearchableDimesionsArrayWithFieldByCategoryId($categoryId, $container = null)
    {
        if ($container) {
            $culture     = CommonManager::getCurrentCulture($container);
            $cacheKey    = $this->getTableName().'|'.__FUNCTION__.'|'.$categoryId.'_'.$culture;
            $cachedValue = CommonManager::getCacheVersion($container, $cacheKey);

            if ($cachedValue !== false) {
                return $cachedValue;
            }
        }

        $dimensionArray = array();
        $dimensions     = $this->getSearchableDimesionsArrayByCategoryId($categoryId, $container);

        $dimensionFieldPrefix = 'item';
        $rootCategoryName     = $this->getEntityManager()->getRepository('FaEntityBundle:Category')->getRootCategoryName($categoryId, $container);

        if ($rootCategoryName) {
            $dimensionFieldPrefix = $dimensionFieldPrefix.'_'.$rootCategoryName;
        }

        foreach ($dimensions as $dimensionId => $dimension) {
            $dimensionField = str_replace(array('(', ')', ',', '?', '|', '.', '/', '\\', '*', '+', '-', '"', "'"), '', $dimension['name']);
            $dimensionField = str_replace(' ', '_', strtolower($dimensionField));

            if ($dimensionField == 'ad_type') {
                $dimensionField = 'item__'.$dimensionField;
            } else {
                $dimensionField = $dimensionFieldPrefix.'__'.$dimensionField;
            }

            $searchTypeArray = explode('_', $dimension['search_type']);
            if ($searchTypeArray[0] == 'choice') {
                $dimensionField = $dimensionField.'_id';
                $dimensionArray[$dimensionField] = $dimension;
            } else {
                $dimensionArray[$dimensionField] = $dimension;
            }
        }

        if ($container) {
            CommonManager::setCacheVersion($container, $cacheKey, $dimensionArray);
        }

        return $dimensionArray;
    }

    /**
     * Get dimention id by name and category.
     *
     * @param integer $categoryId    Category id.
     * @param string  $dimensionName Dimension name.
     * @param object  $container     Container i.dentifier.
     *
     * return mixed
     */
    public function getDimensionIdByNameAndCategory($categoryId, $dimensionName, $container = null)
    {
        if ($container) {
            $culture     = CommonManager::getCurrentCulture($container);
            $cacheKey    = $this->getTableName().'|'.__FUNCTION__.'|'.$categoryId.'_'.$dimensionName.'_'.$culture;
            $cachedValue = CommonManager::getCacheVersion($container, $cacheKey);

            if ($cachedValue !== false) {
                return $cachedValue;
            }
        }

        $categoryDimensionId = null;
        $categoryDimension   = $this->getDimensionByNameAndCategory($categoryId, $dimensionName);

        if ($categoryDimension) {
            $categoryDimensionId = $categoryDimension->getId();
        }

        if ($container) {
            CommonManager::setCacheVersion($container, $cacheKey, $categoryDimensionId);
        }

        return $categoryDimensionId;
    }

    /**
     * Get dimention by name and category.
     *
     * @param integer $categoryId    Category id.
     * @param string  $dimensionName Dimension name.
     *
     * return mixed
     */
    public function getDimensionByNameAndCategory($categoryId, $dimensionName)
    {
        $qb = $this->createQueryBuilder(self::ALIAS)
        ->andWhere(self::ALIAS.'.category = :categoryId')
        ->setParameter('categoryId', $categoryId)
        ->andWhere(self::ALIAS.'.name = :dimensionName')
        ->setParameter('dimensionName', $dimensionName);

        return $qb->getQuery()->getOneOrNullResult();
    }

    /**
     * Get searchable non indexable dimensions array.
     *
     * @param object $container  Container instance.
     *
     * @return array
     */
    public function getSearchableNonIndexableDimesionsArray($container = null)
    {
        if ($container) {
            $cacheKey    = $this->getTableName().'|'.__FUNCTION__;
            $cachedValue = CommonManager::getCacheVersion($container, $cacheKey);

            if ($cachedValue !== false) {
                return $cachedValue;
            }
        }

        $dimensionArray = array();
        $qb = $this->createQueryBuilder(self::ALIAS)
                   ->andWhere(self::ALIAS.'.is_searchable=1')
                   ->andWhere(self::ALIAS.'.is_index=0')
                   ->andWhere(self::ALIAS.'.category is not null')
                   ->groupBy(self::ALIAS.'.name');

        $dimensions = $qb->getQuery()->getResult();

        foreach ($dimensions as $dimension) {
            $dimensionField = str_replace(array('(', ')', ',', '?', '|', '.', '/', '\\', '*', '+', '-', '"', "'"), '', $dimension->getName());
            $dimensionField = str_replace(' ', '_', strtolower($dimensionField));

            $dimensionFieldPrefix = 'item';
            $rootCategoryName  = $this->_em->getRepository('FaEntityBundle:Category')->getRootCategoryName($dimension->getCategory()->getId(), $container);

            if ($rootCategoryName) {
                $dimensionFieldPrefix = $dimensionFieldPrefix.'_'.$rootCategoryName;
            }

            $searchTypeArray = explode('_', $dimension->getSearchType());
            if ($searchTypeArray[0] == 'choice') {
                $dimensionField = $dimensionField.'_id';

                if ($dimensionField == 'reg_year_id') {
                    $dimensionField = str_replace('_id', '', $dimensionField);
                } elseif ($dimensionField == 'mileage_id') {
                    $dimensionField = str_replace('_id', '', $dimensionField).'_range';
                } elseif ($dimensionField == 'engine_size_id') {
                    $dimensionField = str_replace('_id', '', $dimensionField).'_range';
                }

                if ($dimensionField == 'ad_type_id') {
                    $dimensionField = 'item__'.$dimensionField;
                } else {
                    $dimensionField = $dimensionFieldPrefix.'__'.$dimensionField;
                }

                $dimensionArray[] = $dimensionField;
            } elseif ($dimension->getSearchType() == 'range_date' || $dimension->getSearchType() == 'range_text') {
                $dimensionArray[] = $dimensionFieldPrefix.'__'.$dimensionField.'_from';
                $dimensionArray[] = $dimensionFieldPrefix.'__'.$dimensionField.'_to';
            } else {
                $dimensionArray[] = $dimensionFieldPrefix.'__'.$dimensionField;
            }
        }

        $dimensionArray = array_unique($dimensionArray);

        if ($container) {
            CommonManager::setCacheVersion($container, $cacheKey, array_unique($dimensionArray));
        }

        return $dimensionArray;
    }

    /**
     * Is url indxable by category dimension.
     *
     * @param array  $searchParams Search parameters.
     * @param object $container    Container identifier.
     *
     * @return boolean
     */
    public function isUrlIndexableBySearchParams($searchParams = array(), $container = null)
    {
        $isUrlIndexable = true;

        if (isset($searchParams['expired_ads'])) {
            $isUrlIndexable = false;
        } else {
            $nonIndexedSearchableFields = $this->getSearchableNonIndexableDimesionsArray($container);
            foreach ($nonIndexedSearchableFields as $field) {
                if (isset($searchParams[$field])) {
                    $isUrlIndexable = false;
                    break;
                }
            }

            if ($isUrlIndexable && isset($searchParams['item__ad_type_id'])) {
                $nonIndexableAdTypeForSaleIds = array(EntityRepository::AD_TYPE_FORSALE_ID, EntityRepository::PETS_AD_TYPE_FORSALE_ID, EntityRepository::HORSES_EQUESTRIAN_AD_TYPE_FORSALE_ID, EntityRepository::LIVESTOCK_AD_TYPE_FORSALE_ID);
                if (count($searchParams['item__ad_type_id']) == 1 && isset($searchParams['item__ad_type_id'][0]) && in_array($searchParams['item__ad_type_id'][0], $nonIndexableAdTypeForSaleIds)) {
                    $isUrlIndexable = false;
                }

                if ($isUrlIndexable && count($searchParams['item__ad_type_id']) == 1 && isset($searchParams['item__ad_type_id'][0]) && in_array($searchParams['item__ad_type_id'][0], array(EntityRepository::PROPERTY_AD_TYPE_OFFERED_ID))) {
                    $isUrlIndexable = false;
                }
            }

            if ($isUrlIndexable && isset($searchParams['item_motors__fuel_type_id'])) {
                $nonIndexableFuelTypePetrolIds = array(EntityRepository::CAR_FUEL_TYPE_PETROL_ID, EntityRepository::COMMERCIAL_VEHICLE_FUEL_TYPE_PETROL_ID, EntityRepository::BOATS_FUEL_TYPE_PETROL_ID, EntityRepository::FARM_FUEL_TYPE_PETROL_ID);
                if (count($searchParams['item_motors__fuel_type_id']) == 1 && isset($searchParams['item_motors__fuel_type_id'][0]) && in_array($searchParams['item_motors__fuel_type_id'][0], $nonIndexableFuelTypePetrolIds)) {
                    $isUrlIndexable = false;
                }

                $nonIndexableFuelTypeOthersIds = array(EntityRepository::CAR_FUEL_TYPE_OTHERS_ID, EntityRepository::COMMERCIAL_VEHICLE_FUEL_TYPE_OTHERS_ID);
                if ($isUrlIndexable && count($searchParams['item_motors__fuel_type_id']) == 1 && isset($searchParams['item_motors__fuel_type_id'][0]) && in_array($searchParams['item_motors__fuel_type_id'][0], $nonIndexableFuelTypeOthersIds)) {
                    $isUrlIndexable = false;
                }
            }

            if ($isUrlIndexable && isset($searchParams['item_motors__transmission_id'])) {
                $nonIndexableTransmissionManualIds = array(EntityRepository::CAR_TRANSMISSION_MANUAL_ID, EntityRepository::COMMERCIAL_VEHICLE_TRANSMISSION_MANUAL_ID, EntityRepository::FARM_TRANSMISSION_MANUAL_ID);
                if (count($searchParams['item_motors__transmission_id']) == 1 && isset($searchParams['item_motors__transmission_id'][0]) && in_array($searchParams['item_motors__transmission_id'][0], $nonIndexableTransmissionManualIds)) {
                    $isUrlIndexable = false;
                }
            }
        }

        return $isUrlIndexable;
    }

    /**
     * Get dimention id by name and category.
     *
     * @param integer $categoryId    Category id.
     * @param string  $dimensionName Dimension name.
     * @param object  $container     Container i.dentifier.
     *
     * return mixed
     */
    public function getDimensionIdByNameAndCategoryHierarchy($categoryId, $dimensionName, $container = null)
    {
        if ($container) {
            $culture     = CommonManager::getCurrentCulture($container);
            $cacheKey    = $this->getTableName().'|'.__FUNCTION__.'|'.$categoryId.'_'.$dimensionName.'_'.$culture;
            $cachedValue = CommonManager::getCacheVersion($container, $cacheKey);

            if ($cachedValue !== false) {
                return $cachedValue;
            }
        }

        $categoryDimensionId = $this->getDimensionIdByNameAndCategory($categoryId, $dimensionName, $container);
        if (!$categoryDimensionId) {
            $categoryPath   = $this->getEntityManager()->getRepository('FaEntityBundle:Category')->getCategoryPathArrayById($categoryId, false, $container);
            $categorieIds   = array_keys($categoryPath);
            array_pop($categorieIds);
            foreach ($categorieIds as $categoryId) {
                $categoryDimensionId = $this->getDimensionIdByNameAndCategory($categoryId, $dimensionName, $container);
                if ($categoryDimensionId) {
                    break;
                }
            }
        }

        if ($container) {
            CommonManager::setCacheVersion($container, $cacheKey, $categoryDimensionId);
        }

        return $categoryDimensionId;
    }

    /**
     * Get dimension by category id.
     *
     * @param string $categoryId
     *
     * @return ArrayCollection
     */
    public function getDimesionIdsByCategoryIdAndName($categoryId, $dimensionNameArray, $container)
    {
        $dimensionIdsArray = array();
        if ($container) {
            $culture     = CommonManager::getCurrentCulture($container);
            $cacheKey    = $this->getTableName().'|'.__FUNCTION__.'|'.$categoryId.'_'.implode('_', $dimensionNameArray).'_'.$culture;
            $cachedValue = CommonManager::getCacheVersion($container, $cacheKey);

            if ($cachedValue !== false) {
                return $cachedValue;
            }
        }

        $qb = $this->createQueryBuilder(self::ALIAS)
            ->andWhere(self::ALIAS.'.category = '.$categoryId)
            ->andWhere(self::ALIAS.'.name IN (:dimensionNameArray) ')
            ->setParameter('dimensionNameArray', $dimensionNameArray);

        $dimensions = $qb->getQuery()->getResult();

        if (count($dimensions)) {
            foreach ($dimensions as $dimension) {
                $dimensionIdsArray[$dimension->getId()] = $dimension->getName();
            }
            $dimensionIdsArray = array_unique($dimensionIdsArray);
        }


        if ($container) {
            CommonManager::setCacheVersion($container, $cacheKey, $dimensionIdsArray);
        }

        return $dimensionIdsArray;
    }
    /**
     * Get left searchable dimension fields array.
     *
     * @param integer $categoryId Category id
     * @param object  $container  Container interface.
     *
     * @return array
     */
    public function getLeftSearchableDimensionFieldsArrayByCategoryId($categoryId, $container)
    {
        $searchableDimensionFieldArray = array();
        $excludeDimensionNames = array('Ad Type', 'Age', 'Gender','Colour');
        $excludeCategoryIds = array(CategoryRepository::PETS,CategoryRepository::LIVESTOCK,CategoryRepository::GUINEA_PIGS_AND_SMALL_FURRIES,CategoryRepository::REPTILES_AND_AMPHIBIANS,CategoryRepository::OTHER_PETS,CategoryRepository::OTHER_LIVESTOCKS);
        
        $dimensions = $this->getSearchableDimesionsArrayByCategoryId($categoryId, $container);
        foreach ($dimensions as $dimension) {
            if(in_array($categoryId,$excludeCategoryIds)) {
                if(in_array($dimension['name'], $excludeDimensionNames)) {

                } else {
                    $searchableDimensionFieldArray[$dimension['id']] = $dimension;
                }
            } else {
                $searchableDimensionFieldArray[$dimension['id']] = $dimension;
            }
        }
        
        return $searchableDimensionFieldArray;
    }

}
