<?php

/**
 * This file is part of the fa bundle.
 *
 * @copyright Copyright (c) 2014, FMG
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Fa\Bundle\EntityBundle\Repository;

use Doctrine\ORM\EntityRepository as BaseEntityRepository;

/**
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 *
 * @author Janak Jadeja <samiram@aspl.in>
 * @copyright 2014 Friday Media Group Ltd
 * @version v1.0
 */
class MappingCategoryRepository extends BaseEntityRepository
{
    const ALIAS = 'mc';

    /**
     * Prepare query builder.
     *
     * @param array $data Array of data.
     *
     * @return Doctrine\ORM\QueryBuilder The query builder
     */
    public function getBaseQueryBuilder()
    {
        return $this->createQueryBuilder(self::ALIAS);
    }

    /**
     * Get new category ids based on old category ids.
     *
     * @param array $oldCategoryIds Array of old category ids.
     *
     * @return array
     */
    public function getNewCategoryIds($oldCategoryIds = array())
    {
        $query = $this->createQueryBuilder(self::ALIAS)
                       ->distinct()
                      ->select(self::ALIAS.'.new_id')
                      ->where(self::ALIAS.'.id IN (:oldCategoryIds)')
                      ->setParameter('oldCategoryIds', $oldCategoryIds);

        $results = $query->getQuery()->getArrayResult();

        $ids = array();
        if (count($results)) {
            foreach ($results as $result) {
                $ids[] = $result['new_id'];
            }
        }

        return $ids;
    }

    /**
     * Get new category ids based on old category ids.
     *
     * @param array $oldCategoryIds Array of old category ids.
     *
     * @return array
     */
    public function getOldCategoryIds($newCategoryId)
    {
        if (!is_array($newCategoryId)) {
            $newCategoryId = array($newCategoryId);
        }

        $query = $this->createQueryBuilder(self::ALIAS)
                      ->select(self::ALIAS.'.id')
                      ->where(self::ALIAS.'.new_id IN (:newCategoryId)')
                      ->setParameter('newCategoryId', $newCategoryId);

        $results = $query->getQuery()->getArrayResult();

        $ids = array();
        if (count($results)) {
            foreach ($results as $result) {
                $ids[] = $result['id'];
            }
        }

        return $ids;
    }
}
