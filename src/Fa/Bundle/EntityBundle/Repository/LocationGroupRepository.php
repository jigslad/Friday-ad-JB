<?php

/**
 * This file is part of the fa bundle.
 *
 * @copyright Copyright (c) 2014, FMG
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Fa\Bundle\EntityBundle\Repository;

use Doctrine\ORM\EntityRepository as BaseEntityRepository;
use Fa\Bundle\AdBundle\FaAdBundle;
use Fa\Bundle\CoreBundle\Manager\CommonManager;

/**
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 *
 * @author Amit Limbadia <amitl@aspl.in>
 * @copyright 2014 Friday Media Group Ltd
 * @version v1.0
 */
class LocationGroupRepository extends BaseEntityRepository
{
    use \Fa\Bundle\CoreBundle\Search\Search;

    const ALIAS                  = 'lg';
    const PRICE_GROUP_ID         = 1;
    const PRINT_EDITION_GROUP_ID = 2;
    const NON_PRINT_LOCATION_GROUP_ID = 13;

    /**
     * Prepare query builder.
     *
     * @param array $data Array of data.
     *
     * @return Doctrine\ORM\QueryBuilder The query builder
     */
    public function getBaseQueryBuilder()
    {
        return $this->createQueryBuilder(self::ALIAS);
    }

    /**
     * Get key value array of location groups.
     *
     * @return array
     */
    public function getLocationGroupsKeyValueArray()
    {
        $locationGroupArray = array();
        $locationGroups     = $this->getBaseQueryBuilder()->getQuery()->getArrayResult();

        if (count($locationGroups)) {
            foreach ($locationGroups as $locationGroup) {
                $locationGroupArray[$locationGroup['id']] = $locationGroup['name'];
            }
        }

        return $locationGroupArray;
    }

    /**
     * Get location group type array.
     *
     * @param Container $container Container identifier.
     * @param boolean   $addEmpty  Flag to show empty message.
     *
     * @return array
     */
    public static function getLocationGroupTypeArray($container, $addEmpty = true)
    {
        $translator      = CommonManager::getTranslator($container);
        $locationGroupTypeArray = array();
        if ($addEmpty) {
            $locationGroupTypeArray[''] = $translator->trans('Select Location Group Type');
        }
        $locationGroupTypeArray[self::PRICE_GROUP_ID]         = $translator->trans('Price Group');
        $locationGroupTypeArray[self::PRINT_EDITION_GROUP_ID] = $translator->trans('Print Edition Group');

        return $locationGroupTypeArray;
    }

    /**
     * Add location group type filter to existing query object.
     *
     * @param integer $type type
     *
     * @return void
     */
    protected function addTypeFilter($type = null)
    {
        $this->queryBuilder->andWhere($this->getRepositoryAlias().'.type = '.$type);
    }

    /**
     * Get related print edition for location group.
     *
     * @param integer $locationGroupId Location group id.
     *
     * @return array
     */
    public function getRelatedPrintEditionByLocationGroup($locationGroupId)
    {
        $relatedPrintEditionArray[6]  = array(10, 4, 2, 5);
        $relatedPrintEditionArray[2]  = array(5, 6, 4, 10);
        $relatedPrintEditionArray[8]  = array(7, 9, 5, 11);
        $relatedPrintEditionArray[9]  = array(8, 5, 2, 6);
        $relatedPrintEditionArray[4]  = array(10, 6, 2, 11);
        $relatedPrintEditionArray[7]  = array(8, 5, 11, 10);
        $relatedPrintEditionArray[5]  = array(10, 8, 6, 2);
        $relatedPrintEditionArray[10] = array(4, 6, 11, 5);
        $relatedPrintEditionArray[11] = array(5, 10, 7, 12);
        $relatedPrintEditionArray[12] = array(11, 10, 5, 7);

        if (isset($relatedPrintEditionArray[$locationGroupId])) {
            return $relatedPrintEditionArray[$locationGroupId];
        } else {
            return array();
        }
    }

    /**
     * Get active print edition array.
     *
     * @param integer $locationGroupId Location group id.
     *
     * @return array
     */
    public function getSelectedPrintEditionArrayForLocationGroupId($locationGroupId)
    {
        $printEditionArray = array();

        if ($locationGroupId) {
            $locationGroup = $this->find($locationGroupId);


            if ($locationGroup) {
                $relatedPrintEditions = explode(',', $locationGroup->getRelatedPrintEdition());
                $printEditionArray = $this->_em->getRepository('FaAdBundle:PrintEdition')->getActivePrintEditionArrayByIds($relatedPrintEditions);
            }
        }

        return $printEditionArray;
    }

    /**
     * Get other active print edition array.
     *
     * @param integer $locationGroupId Location group id.
     *
     * @return array
     */
    public function getOtherPrintEditionArrayForLocationGroupId($locationGroupId)
    {
        $printEditionArray = array();
        if ($locationGroupId) {
            $locationGroup = $this->find($locationGroupId);


            if ($locationGroup) {
                $relatedPrintEditions = explode(',', $locationGroup->getRelatedPrintEdition());
                $printEditions = $this->_em->getRepository('FaAdBundle:PrintEdition')->getActiveOtherPrintEdition($relatedPrintEditions);

                foreach ($printEditions as $printEdition) {
                    $printEditionArray[$printEdition->getId()] = $printEdition->getName();
                }
            }
        } else {
            $printEditionArray = $this->_em->getRepository('FaAdBundle:PrintEdition')->getActivePrintEditionArray();
        }

        return $printEditionArray;
    }
    /**
     * Get location Group by location.
     *
     * @param integer $locationId Location id.
     *
     * @return array
     */
    public function getLocationGroupByLocation($locationId)
    {
        $locationArry = [$locationId];
        //$locationData = $this->_em->getRepository('FaEntityBundle:Category')->find($locationId);
        $location = $this->getEntityManager()->getRepository('FaEntityBundle:LocationGroupLocation')->getLocationGroupIdByTownDomicile($locationArry);
        if($location){
            $locationGroup = $this->find($location[0]);
            return $locationGroup;
        }
     }
     /* Get Location Group By AdId.
     *
     * @param integer $AdId Ad id.
     *
     * @return array
     */
    public function getLocationGroupNameByAdID($AdId)
    {
        $location = $this->getEntityManager()->getRepository('FaAdBundle:AdLocation')->getLocationGroupByAdId($AdId);
        if($location){
            $locationGroup = $this->find($location[0]);
            return $locationGroup;
        }
        else
        {
            return '';
        }
    }
}
