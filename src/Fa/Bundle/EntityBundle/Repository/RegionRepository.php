<?php

/**
 * This file is part of the fa bundle.
 *
 * @copyright Copyright (c) 2014, FMG
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Fa\Bundle\EntityBundle\Repository;

use Doctrine\ORM\EntityRepository as BaseEntityRepository;
use Fa\Bundle\CoreBundle\Manager\CommonManager;

/**
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 *
 * @author Amit Limbadia <amitl@aspl.in>
 * @copyright 2014 Friday Media Group Ltd
 * @version v1.0
 */
class RegionRepository extends BaseEntityRepository
{
    use \Fa\Bundle\CoreBundle\Search\Search;

    const ALIAS = 'r';

    /**
     * prepareQueryBuilder.
     *
     * @param array $data array of data
     *
     * @return Doctrine\ORM\QueryBuilder The query builder
     */
    public function getBaseQueryBuilder()
    {
        return $this->createQueryBuilder(self::ALIAS);
    }

    /**
     * @param $container
     * @return mixed
     */
    public function getAllRegions($container)
    {
        if ($container) {
            $culture     = CommonManager::getCurrentCulture($container);
            $cacheKey    = 'region|'.__FUNCTION__.'|'.$culture;
            $cachedValue = CommonManager::getCacheVersion($container, $cacheKey);

            if ($cachedValue !== false) {
                return $cachedValue;
            }
        }

        $query = $this->createQueryBuilder(self::ALIAS);

        $objResources = $query->getQuery()->getArrayResult();

        $regionDetails = [];
        foreach ($objResources as $region) {
            $regionDetails[$region['id']]['name'] = $region['name'];
        }

        if ($container) {
            CommonManager::setCacheVersion($container, $cacheKey, $regionDetails);
        }

        return $regionDetails;
    }

    /**
     * @param $container
     * @param $id
     * @return array
     */
    public function getCachedRegionById($container, $id)
    {
        if (! empty($id)) {
            $regions = CommonManager::getCacheVersion($container, 'region|getAllRegions|en_GB');

            return [
                'id'    => $id,
                'name'  => $regions[$id]['name']
            ];
        } else {
            return [];
        }
    }
}