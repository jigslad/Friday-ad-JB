<?php

/**
 * This file is part of the fa bundle.
 *
 * @copyright Copyright (c) 2014, FMG
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Fa\Bundle\EntityBundle\Repository;

use Doctrine\ORM\EntityRepository as BaseEntityRepository;
use Fa\Bundle\CoreBundle\Manager\CommonManager;

/**
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 *
 * @author Amit Limbadia <amitl@aspl.in>
 * @copyright 2014 Friday Media Group Ltd
 * @version v1.0
 */
class EntityRepository extends BaseEntityRepository
{
    use \Fa\Bundle\CoreBundle\Search\Search;

    const ALIAS          = 'e';
    const ALIAS_ADSTATUS = 'eas';
    const ALIAS_ADTYPE   = 'eat';

    const AD_TYPE_ID     = 1;
    const COLOUR_ID      = 2;
    const AD_STATUS_ID   = 3;
    const USER_STATUS_ID = 4;
    const STATUS_ID      = 5;

    //user status
    const USER_STATUS_ACTIVE_ID = 52;
    const USER_STATUS_INACTIVE_ID = 53;
    const USER_STATUS_BLOCKED   = 54;

    const AD_STATUS_LIVE_ID               = 25;
    const AD_STATUS_DRAFT_ID              = 26;
    const AD_STATUS_EXPIRED_ID            = 27;
    const AD_STATUS_SOLD_ID               = 28;
    const AD_STATUS_MODERATED_ID          = 29;
    const AD_STATUS_REJECTED_ID           = 30;
    const AD_STATUS_REJECTEDWITHREASON_ID = 31;
    const AD_STATUS_IN_MODERATION_ID      = 32;
    const AD_STATUS_INACTIVE_ID           = 33;
    const AD_STATUS_SCHEDULED_ADVERT_ID   = 34;

    const AD_TYPE_FORSALE_ID              = 1;
    const AD_TYPE_WANTED_ID               = 2;
    const AD_TYPE_SWAPPING_ID             = 3;
    const AD_TYPE_FREETOCOLLECTOR_ID      = 4;

    const PETS_AD_TYPE_FORSALE_ID              = 2620;
    const HORSES_EQUESTRIAN_AD_TYPE_FORSALE_ID = 2763;
    const LIVESTOCK_AD_TYPE_FORSALE_ID         = 2891;

    const CONDITION_NEW_ID  = 5;
    const CONDITION_POOR_ID = 9;

    const BUSINESS_CATEGORY = 248;

    const TWO_DOOR_SALOON_ID      = 6356;
    const FOUR_DOOR_SALOON_ID     = 6358;
    const THREE_DOOR_HATCHBACK_ID = 6357;
    const FIVE_DOOR_HATCHBACK_ID  = 6359;
    const CONVERTIBLE_ID          = 6360;
    const COUPE_ID                = 6361;
    const ESTATE_ID               = 6362;
    const LIGHT_4x4_UTILITY_ID    = 6363;
    const MPV_ID                  = 6364;

    const CAR_FUEL_TYPE_OTHERS_ID                = 6428;
    const COMMERCIAL_VEHICLE_FUEL_TYPE_OTHERS_ID = 6429;

    const CAR_FUEL_TYPE_PETROL_ID                = 6367;
    const COMMERCIAL_VEHICLE_FUEL_TYPE_PETROL_ID = 6404;
    const BOATS_FUEL_TYPE_PETROL_ID              = 1627;
    const FARM_FUEL_TYPE_PETROL_ID               = 2043;

    const CAR_FUEL_TYPE_DIESEL_ID                = 6368;
    const COMMERCIAL_VEHICLE_FUEL_TYPE_DIESEL_ID = 6405;
    const BOATS_FUEL_TYPE_DIESEL_ID              = 1628;
    const FARM_FUEL_TYPE_DIESEL_ID               = 2044;

    const CAR_TRANSMISSION_MANUAL_ID                = 6371;
    const COMMERCIAL_VEHICLE_TRANSMISSION_MANUAL_ID = 6408;
    const FARM_TRANSMISSION_MANUAL_ID               = 2041;

    const PROPERTY_AD_TYPE_OFFERED_ID = 2520;
    const SERVICE_AD_TYPE_OFFERED_ID  = 2485;

    const COMPETITION_TYPE_ID = 7302;

    const ADULT_FETISH_TRAVEL_ARRANGEMENTS_IN_CALL   = 7327;
    const ADULT_FETISH_TRAVEL_ARRANGEMENTS_OUT_CALL  = 7326;
    const ADULT_MASSAGE_TRAVEL_ARRANGEMENTS_IN_CALL  = 7321;
    const ADULT_MASSAGE_TRAVEL_ARRANGEMENTS_OUT_CALL = 7320;
    const ADULT_ESCORT_TRAVEL_ARRANGEMENTS_IN_CALL   = 7315;
    const ADULT_ESCORT_TRAVEL_ARRANGEMENTS_OUT_CALL  = 7314;

    const ADULT_ESCORT_TRAVEL_ARRANGEMENTS_EITHER   = 7332;
    const ADULT_FETISH_TRAVEL_ARRANGEMENTS_EITHER  = 7333;
    const ADULT_MASSAGE_TRAVEL_ARRANGEMENTS_EITHER  = 7331;
    
    const IN_MORNING_TIME_MSG = "All of our ads go through a process of being reviewed to ensure that everything is genuine and safe. Most ads get reviewed and accepted instantaneously but we do double-check ads in certain categories, just to be on the safe side. Your ad will be reviewed by a member of the team this morning.";
    const IN_DAY_TIME_MSG = "All of our ads go through a process of being reviewed to ensure that everything is genuine and safe. Most ads get reviewed and accepted instantaneously but we do double-check ads in certain categories, just to be on the safe side. Don't worry though, your ad should be live very shortly.";
    const IN_NIGHT_TIME_MSG = "All of our ads go through a process of being reviewed to ensure that everything is genuine and safe. Most ads get reviewed and accepted instantaneously but we do double-check ads in certain categories, just to be on the safe side. Your ad will be reviewed by a member of the team in the morning.";
    const LIVE_EDIT_MORNING_MSG = "Whenever an ad is edited, we take the precaution of reviewing those changes. The changes you made to your ad will not come into effect until a member of our team has reviewed and accepted it. Your ad will be reviewed by a member of the team this morning.";
    const LIVE_EDIT_DAY_MSG = "Whenever an ad is edited, we take the precaution of reviewing those changes. The changes you made to your ad will not come into effect until a member of our team has reviewed and accepted it. Don't worry though, your ad should be live very shortly.";
    const LIVE_EDIT_NIGHT_MSG = "Whenever an ad is edited, we take the precaution of reviewing those changes. The changes you made to your ad will not come into effect until a member of our team has reviewed and accepted it. Your ad will be reviewed by a member of the team in the morning.";
    const DAY_SUNDAY = 0; // php standard day constant for Sunday date('w')
    const DAY_SATURDAY = 6; // php standard day constant for Saturday date('w')
    const SUN_SAT_START_TIME = 400; // date(Gi) returns 400 for 4 AM
    const SUN_SAT_END_TIME = 959; // date(Gi) returns 959 for 9:59 AM
    const SUN_SAT_START_TIME_1 = 1000; // date(Gi) returns 1000 for 10 AM
    const SUN_SAT_END_TIME_1 = 1759; // date(Gi) returns 1759 for 5:59 PM
    const MON_TO_FRI_START_TIME = 400; // date(Gi) returns 400 for 4 AM
    const MON_TO_FRI_END_TIME = 759; // date(Gi) returns 759 for 7:59 AM
    const MON_TO_FRI_START_TIME_1 = 800; // date(Gi) returns 800 for 8 AM
    const MON_TO_FRI_END_TIME_1 = 1959; // date(Gi) returns 1959 for 7:59 PM


    /**
     * Prepare query builder.
     *
     * @param array $data Array of data.
     *
     * @return Doctrine\ORM\QueryBuilder The query builder
     */
    public function getBaseQueryBuilder()
    {
        return $this->createQueryBuilder(self::ALIAS);
    }

    /**
     * Get entity type array.
     *
     * @param Container $container Container identifier.
     * @param boolean   $addEmpty  Flag to show empty message.
     *
     * @return array
     */
    public function getEntityTypeArray($container, $addEmpty = true)
    {
        $translator      = CommonManager::getTranslator($container);
        $entityTypeArray = array();
        if ($addEmpty) {
            $entityTypeArray[''] = $translator->trans('Select entity type');
        }
        $entityTypeArray[self::AD_TYPE_ID]     = $translator->trans('Ad type');
        $entityTypeArray[self::COLOUR_ID]      = $translator->trans('Colour');
        $entityTypeArray[self::AD_STATUS_ID]   = $translator->trans('Ad status');
        $entityTypeArray[self::USER_STATUS_ID] = $translator->trans('User status');

        return $entityTypeArray;
    }

    /**
     * Get status array.
     *
     * @param Container $container Container identifier
     * @param boolean   $addEmpty  Flag to show empty message
     *
     * @return array
     */
    public static function getStatusArray($container, $addEmpty = true)
    {
        $translator  = CommonManager::getTranslator($container);
        $statusArray = array();

        if ($addEmpty) {
            $statusArray[''] = $translator->trans('Select Status');
        }

        $statusArray[1] = $translator->trans('Active');
        $statusArray[0] = $translator->trans('Inactive');

        return $statusArray;
    }

    /**
     * Get status array.
     *
     * @param Container $container Container identifier
     * @param boolean   $addEmpty  Flag to show empty message
     *
     * @return array
     */
    public static function getNotificationTypeArray($container, $addEmpty = true)
    {
        $translator  = CommonManager::getTranslator($container);
        $statusArray = array();

        if ($addEmpty) {
            $statusArray[''] = $translator->trans('Select type');
        }

        $statusArray['success']     = $translator->trans('Success');
        $statusArray['info']        = $translator->trans('Info');
        $statusArray['promotional'] = $translator->trans('Promotional');
        $statusArray['warning']     = $translator->trans('Warning');
        $statusArray['error']       = $translator->trans('Error');

        return $statusArray;
    }

    /**
     * Get status array.
     *
     * @param Container $container Container identifier
     * @param boolean   $addEmpty  Flag to show empty message
     *
     * @return array
     */
    public static function getYesNoArray($container, $addEmpty = true)
    {
        $translator  = CommonManager::getTranslator($container);
        $statusArray = array();

        if ($addEmpty) {
            $statusArray[''] = $translator->trans('Select');
        }

        $statusArray[1] = $translator->trans('Yes');
        $statusArray[0] = $translator->trans('No');

        return $statusArray;
    }

    /**
     * Get status1 array.
     *
     * @param Container $container Container identifier
     * @param boolean   $addEmpty  Flag to show empty message
     *
     * @return array
     */
    public static function getStatusArray1($container, $addEmpty = true)
    {
        $translator  = CommonManager::getTranslator($container);
        $statusArray = array();

        if ($addEmpty) {
            $statusArray[''] = $translator->trans('Select Status');
        }

        $statusArray[1] = $translator->trans('Published');
        $statusArray[0] = $translator->trans('Unpublished');

        return $statusArray;
    }

    /**
     * Get table name.
     */
    private function getEntityTableName()
    {
        return $this->_em->getClassMetadata('FaEntityBundle:Entity')->getTableName();
    }

    /**
     * Get entity type array.
     *
     * @param integer $type      Entity type.
     * @param object  $container Container identifier.
     * @param bolean  $withSort  Sorting required or not.
     * @param string  $sortBy    Sort by name or ord
     *
     * @return array
     */
    public function getEntityArrayByType($type, $container = null, $withSort = true, $sortBy = 'name')
    {
        if ($container) {
            $culture     = CommonManager::getCurrentCulture($container);
            $tableName   = $this->getEntityTableName();
            $cacheKey    = $tableName.'|'.__FUNCTION__.'|'.$type.'_'.$withSort.'_'.$sortBy.'_'.$culture;
            $cachedValue = CommonManager::getCacheVersion($container, $cacheKey);

            if ($cachedValue !== false) {
                return $cachedValue;
            }
        }

        $entityArray  = array();
        $queryBuilder = $this->getBaseQueryBuilder()
                             ->where(self::ALIAS.'.category_dimension = '.$type);

        if ($withSort) {
            $queryBuilder->orderBy(self::ALIAS.'.'.$sortBy, 'ASC');
        }

        $entities = $queryBuilder->getQuery()->getResult();

        foreach ($entities as $entity) {
            $entityArray[$entity->getId()] = $entity->getName();
        }

        if ($container) {
            CommonManager::setCacheVersion($container, $cacheKey, $entityArray);
        }

        return $entityArray;
    }

    /**
     * Get entity by category dimension and name.
     *
     * @param integer $type Category dimension.
     * @param string  $name Entity name.
     * @param integer $id   Entity id.
     *
     * @return array
     */
    public function getEntityByTypeAndName($type, $name, $id = null)
    {
        $qb = $this->createQueryBuilder(self::ALIAS)
            ->where(self::ALIAS.'.category_dimension = '.$type)
            ->andWhere(self::ALIAS.'.name = '."'$name'")
            ->setMaxResults(1)
            ->orderBy(self::ALIAS.'.id', 'DESC');

        if ($id) {
            $qb->andWhere(self::ALIAS.'.id != '.$id);
        }

        $entity = $qb->getQuery()
            ->getOneOrNullResult();

        return $entity;
    }

    /**
     * Get entity by category dimension and min.
     *
     * @param integer $type Category dimension.
     * @param string  $min  Minimum value.
     * @param integer $id   Entity id.
     *
     * @return array
     */
    public function getEntityByTypeAndMin($type, $min, $id = null)
    {
        $entity = $this->createQueryBuilder(self::ALIAS)
        ->where(self::ALIAS.'.category_dimension = '.$type)
        ->andWhere(self::ALIAS.'.min = '.$min);

        if ($id) {
            $qb->andWhere(self::ALIAS.'.id != '.$id);
        }

        $entity = $qb->getQuery()
            ->getOneOrNullResult();

        return $entity;
    }

    /**
     * Get entity by category dimension and max.
     *
     * @param integer $type Category dimension.
     * @param string  $max  Maximum value.
     * @param integer $id   Entity id.
     *
     * @return array
     */
    public function getEntityByTypeAndMax($type, $max, $id = null)
    {
        $entity = $this->createQueryBuilder(self::ALIAS)
        ->where(self::ALIAS.'.category_dimension = '.$type)
        ->andWhere(self::ALIAS.'.max = '.$max);

        if ($id) {
            $qb->andWhere(self::ALIAS.'.id != '.$id);
        }

        $entity = $qb->getQuery()
        ->getOneOrNullResult();

        return $entity;
    }

    /**
     * Get entities by auto suggest text.
     *
     * @param string  $term     Auto suggest text.
     * @param integer $id       Entity id.
     * @param integer $parentId Parent id.
     *
     * @return array
     */
    public function getEntityArrayByTextAndType($term, $type, $parentId = null)
    {
        $entityArray = array();
        $qb          = $this->getBaseQueryBuilder()
                            ->andWhere(self::ALIAS.'.category_dimension = :category_dimension')
                            ->andWhere(self::ALIAS.'.name LIKE :term')
                            ->setParameter('term', $term.'%')
                            ->setParameter('category_dimension', $type);

        if ($parentId) {
            $qb->andWhere(self::ALIAS.'.parent_id = :parent_id')->setParameter('parent_id', $parentId);
        }

        $entities = $qb->getQuery()->getResult();

        foreach ($entities as $entity) {
            $entityArray[] = array('id'=> $entity->getId(), 'text' => $entity->getName());
        }

        return $entityArray;
    }

    /**
     * Get is_new entity options.
     *
     * @param object $container Container identifier.
     *
     * @return array
     */
    public function getIsNewOptionsArray($container)
    {
        $translator  = CommonManager::getTranslator($container);
        $entityArray = array(
                           '0' => $translator->trans('Used'),
                           '1' => $translator->trans('New'),
                           '2' => $translator->trans('New with tags')
                       );

        return $entityArray;
    }

    /**
     * Get is_new name from id.
     *
     * @param integer $id        Id of is_new.
     * @param string  $container Container.
     *
     * @return string
     */
    public function getIsNewNameById($id, $container)
    {
        $options = $this->getIsNewOptionsArray($container);
        if (isset($options[$id])) {
            return $options[$id];
        }

        return null;
    }


    /**
     * Get slug by id.
     *
     * @param integer $id
     * @param string  $container
     *
     * @return string
     */
    public function getSlugById($id, $container = null)
    {
        if ($container) {
            $cacheKey = 'EntityCacheManager'.'|'.'getEntitySlugById'.'|'.'FaEntityBundle:Entity'.'_'.$id;
            $cachedValue = CommonManager::getCacheVersion($container, $cacheKey);

            if ($cachedValue !== false) {
                return $cachedValue;
            }
        }

        $entity = $this->find($id);

        if ($entity) {
            if ($container) {
                CommonManager::setCacheVersion($container, $cacheKey, $entity->getSlug());
            }

            return $entity->getSlug();
        }
    }


    /**
     * Get slug by id.
     *
     * @param integer $id
     * @param string  $container
     *
     * @return string
     */
    public function getSeoValueById($id, $container = null)
    {
        if ($container) {
            $cacheKey = 'EntityCacheManager'.'|'.'getSeoValueById'.'|'.'FaEntityBundle:Entity'.'_'.$id;
            $cachedValue = CommonManager::getCacheVersion($container, $cacheKey);

            if ($cachedValue !== false) {
                return $cachedValue;
            }
        }

        $entity = $this->find($id);

        if ($entity) {
            if ($container) {
                CommonManager::setCacheVersion($container, $cacheKey, $entity->getSeoValue());
            }

            return $entity->getSeoValue();
        }
    }

    /**
     * Get entities by category dimension id.
     *
     * @param integer $categoryDimensionId Category dimension id.
     *
     * return mixed
     */
    public function getEntitiesByCategoryDimensionId($categoryDimensionId)
    {
        return $this->getBaseQueryBuilder()
            ->andWhere(self::ALIAS.'.category_dimension = :categoryDimensionId')
            ->setParameter('categoryDimensionId', $categoryDimensionId)
            ->addOrderBy(self::ALIAS.'.name', 'asc')
            ->getQuery()
            ->getResult();
    }

    /**
     * Get entity id by category dimension and name.
     *
     * @param integer $categoryDimension Category dimension.
     * @param string  $name              Entity name.
     * @param object  $container         Container instance.
     *
     * @return integer
     */
    public function getEntityIdByCategoryDimensionAndName($categoryDimension, $name, $container = null)
    {
        if ($container) {
            $tableName   = $this->getEntityTableName();
            $cacheKey    = $tableName.'|'.__FUNCTION__.'|'.$categoryDimension.'_'.$name;
            $cachedValue = CommonManager::getCacheVersion($container, $cacheKey);

            if ($cachedValue !== false) {
                return $cachedValue;
            }
        }

        $entityId = null;
        $entity = $this->createQueryBuilder(self::ALIAS)
                         ->select(self::ALIAS.'.id')
                         ->andWhere(self::ALIAS.'.category_dimension = '.$categoryDimension)
                         ->andWhere(self::ALIAS.'.name = :name')
                         ->setParameter('name', $name)
                         ->getQuery()
                         ->getOneOrNullResult();
        
        //for plural breeds
        if(empty($entity)) {
       		if(substr($name, -1) == 's') {
            	$name = substr($name, 0, -1);
                $entity = $this->createQueryBuilder(self::ALIAS)
                	->select(self::ALIAS.'.id')
                    ->andWhere(self::ALIAS.'.category_dimension = '.$categoryDimension)
                    ->andWhere(self::ALIAS.'.name = :name')
                    ->setParameter('name', $name)
                    ->getQuery()
                    ->getOneOrNullResult();
            }
        }

        if ($entity) {
            $entityId = $entity['id'];
        }

        if ($container) {
            CommonManager::setCacheVersion($container, $cacheKey, $entityId);
        }

        return $entityId;
    }

    /**
     * Get entity type array.
     *
     * @param integer $parentId  Parent id.
     * @param object  $container Container identifier.
     * @param bolean  $withSort  Sorting required or not.
     *
     * @return array
     */
    public function getEntityArrayByParent($parentId, $container = null, $withSort = true)
    {
        if ($container) {
            $culture     = CommonManager::getCurrentCulture($container);
            $tableName   = $this->getEntityTableName();
            $cacheKey    = $tableName.'|'.__FUNCTION__.'|'.$parentId.'_'.$withSort.'_'.$culture;
            $cachedValue = CommonManager::getCacheVersion($container, $cacheKey);

            if ($cachedValue !== false) {
                return $cachedValue;
            }
        }

        $entityArray  = array();
        $queryBuilder = $this->getBaseQueryBuilder()->where(self::ALIAS.'.parent_id = '.$parentId);

        if ($withSort) {
            $queryBuilder->orderBy(self::ALIAS.'.name', 'ASC');
        }

        $entities = $queryBuilder->getQuery()->getResult();

        foreach ($entities as $entity) {
            $entityArray[$entity->getId()] = $entity->getName();
        }

        if ($container) {
            CommonManager::setCacheVersion($container, $cacheKey, $entityArray);
        }

        return $entityArray;
    }

    /**
     * Get body type array.
     *
     * @param object $container Container identifier.
     *
     * @return array
     */
    public function getLandingPageBodyTypeArray($container)
    {
        $translator       = CommonManager::getTranslator($container);
        $orderedBodyTypes = array(
                                self::THREE_DOOR_HATCHBACK_ID => $translator->trans('Hatchback'),
                                self::COUPE_ID                => $translator->trans('Coupes'),
                                self::TWO_DOOR_SALOON_ID      => $translator->trans('Saloons'),
                                self::CONVERTIBLE_ID          => $translator->trans('Convertibles'),
                                self::ESTATE_ID               => $translator->trans('Estates'),
                                self::MPV_ID                  => $translator->trans('MPVs'),
                                self::LIGHT_4x4_UTILITY_ID    => $translator->trans('4x4')
                            );

        return $orderedBodyTypes;
    }

    /**
     * Non crawlable some dimension values.
     *
     * @return array
     */
    public function nonCrawlableDimensionValues()
    {
        return array(
                   self::AD_TYPE_FORSALE_ID,
                   self::PETS_AD_TYPE_FORSALE_ID,
                   self::HORSES_EQUESTRIAN_AD_TYPE_FORSALE_ID,
                   self::LIVESTOCK_AD_TYPE_FORSALE_ID,
                   self::CAR_FUEL_TYPE_PETROL_ID,
                   self::COMMERCIAL_VEHICLE_FUEL_TYPE_PETROL_ID,
                   self::BOATS_FUEL_TYPE_PETROL_ID,
                   self::FARM_FUEL_TYPE_PETROL_ID,
                   self::CAR_TRANSMISSION_MANUAL_ID,
                   self::COMMERCIAL_VEHICLE_TRANSMISSION_MANUAL_ID,
                   self::FARM_TRANSMISSION_MANUAL_ID,
                   self::PROPERTY_AD_TYPE_OFFERED_ID,
                   self::CAR_FUEL_TYPE_OTHERS_ID,
                   self::COMMERCIAL_VEHICLE_FUEL_TYPE_OTHERS_ID,
                   self::SERVICE_AD_TYPE_OFFERED_ID
               );
    }

    /**
     * Get entities by ids.
     *
     * @param array $entityIds Entity id array.
     *
     * return mixed
     */
    public function getEntitiesByIds($entityIds)
    {
        return $this->getBaseQueryBuilder()
        ->andWhere(self::ALIAS.'.id IN (:entityIds)')
        ->setParameter('entityIds', $entityIds)
        ->addOrderBy(self::ALIAS.'.name', 'asc')
        ->getQuery()
        ->getResult();
    }

    /**
     * Get entity by comparing each word in given string.
     *
     * @param string  $string              Auto suggest text.
     * @param integer $categoryDimensionId Category dimension id.
     *
     * @return object
     */
    public function getMatchedEntityByString($string, $categoryDimensionId)
    {
        $string = trim($string);
        $keywords = explode(" ", $string);
        foreach ($keywords as $keyword) {
           $qb = $this->getBaseQueryBuilder()
            ->andWhere(self::ALIAS.'.category_dimension = :category_dimension')
            ->andWhere(self::ALIAS.'.name LIKE :term')
            ->setParameter('term', $keyword)
            ->setParameter('category_dimension', $categoryDimensionId)
            ->setMaxResults(1);

           $entity = $qb->getQuery()->getOneOrNullResult();
           if ($entity) {
               return $entity;
           }
        }

        return null;
    }

    /**
     * Get entity type array.
     *
     * @param integer $type      Entity type.
     * @param object  $container Container identifier.
     * @param bolean  $withSort  Sorting required or not.
     * @param string  $sortBy    Sort by name or ord
     *
     * @return array
     */
    public function getEntitySlugArrayByType($type, $container = null, $withSort = true, $sortBy = 'name')
    {
        if ($container) {
            $culture     = CommonManager::getCurrentCulture($container);
            $tableName   = $this->getEntityTableName();
            $cacheKey    = $tableName.'|'.__FUNCTION__.'|'.$type.'_'.$withSort.'_'.$sortBy.'_'.$culture;
            $cachedValue = CommonManager::getCacheVersion($container, $cacheKey);

            if ($cachedValue !== false) {
                return $cachedValue;
            }
        }

        $entityArray  = array();
        $queryBuilder = $this->getBaseQueryBuilder()
        ->where(self::ALIAS.'.category_dimension = '.$type);

        if ($withSort) {
            $queryBuilder->orderBy(self::ALIAS.'.'.$sortBy, 'ASC');
        }

        $entities = $queryBuilder->getQuery()->getResult();

        foreach ($entities as $entity) {
            $entityArray[$entity->getId()] = $entity->getSlug();
        }

        if ($container) {
            CommonManager::setCacheVersion($container, $cacheKey, $entityArray);
        }

        return $entityArray;
    }

    /**
     * Get nested childrens array by category id.
     *
     * @param integet $fieldId   field id
     * @param integet $fieldName field name
     * @param object  $container container object
     *
     * @return array
     */
    public function getEntityIdsByFieldIdAndName($fieldId, $fieldName, $container = null)
    {
        if ($container) {
            $culture     = CommonManager::getCurrentCulture($container);
            $tableName   = $this->getEntityTableName();
            $cacheKey    = $tableName.'|'.__FUNCTION__.'|'.$fieldId.'_'.$fieldName.'_'.$culture;
            $cachedValue = CommonManager::getCacheVersion($container, $cacheKey);

            if ($cachedValue !== false) {
                return $cachedValue;
            }
        }

        $entityIdsArray = array();
        $sql            = "SELECT node1.id FROM ".$this->_entityName." As node1
                           WHERE node1.category_dimension IN
                           (SELECT node2.category_dimension_id FROM Fa\Bundle\AdBundle\Entity\PaaField As node2 WHERE node2.field = '".$fieldId."') AND node1.name = '".$fieldName."'";
        $entities       = $this->_em->createQuery($sql)->getResult();

        if (count($entities)) {
            foreach ($entities as $entity) {
                $entityIdsArray[] = $entity['id'];
            }
        }

        if ($container) {
            CommonManager::setCacheVersion($container, $cacheKey, $entityIdsArray);
        }

        return $entityIdsArray;
    }

    public function geUserStatusesForCombo($user)
    {
       $q = $this->createQueryBuilder(self::ALIAS)
        ->select(self::ALIAS.'.id', self::ALIAS.'.name')
        ->where(self::ALIAS.'.category_dimension = '.self::USER_STATUS_ID)
        ->orderBy(self::ALIAS.'.name', 'ASC');

        if ($user->getStatus()) {
            $q->andWhere(self::ALIAS.'.id != '.$user->getStatus()->getId());
        }

        return $q->getQuery()->getArrayResult();
    }

    /**
     * Get custom formatted entity options.
     *
     * @param array  $options  options
     * @param string $callFrom from where this function called.
     *
     * @return array
     */
    public function customFormatOptions($options, $callFrom = 'paa', $entityName = null)
    {
        
        $specialEntitiesInCall = array(
                                    self::ADULT_ESCORT_TRAVEL_ARRANGEMENTS_IN_CALL,
                                    self::ADULT_FETISH_TRAVEL_ARRANGEMENTS_IN_CALL,
                                    self::ADULT_MASSAGE_TRAVEL_ARRANGEMENTS_IN_CALL,
                                    );

        $specialEntitiesOutCall = array(
            


                                    self::ADULT_ESCORT_TRAVEL_ARRANGEMENTS_OUT_CALL,
                                    self::ADULT_FETISH_TRAVEL_ARRANGEMENTS_OUT_CALL,
                                    self::ADULT_MASSAGE_TRAVEL_ARRANGEMENTS_OUT_CALL
                                );

        $specialEntitiesEither = array(
                                    self::ADULT_ESCORT_TRAVEL_ARRANGEMENTS_EITHER,
                                    self::ADULT_FETISH_TRAVEL_ARRANGEMENTS_EITHER,
                                    self::ADULT_MASSAGE_TRAVEL_ARRANGEMENTS_EITHER
                                );

        $specialEntities = array_merge($specialEntitiesInCall, $specialEntitiesOutCall,$specialEntitiesEither);

        if (is_array($options) && count($options)) {
            foreach ($options as $entityId => $entityName) {
                if (in_array($entityId, $specialEntities)) {
                    if ($callFrom == 'paa') {
                        if (in_array($entityId, $specialEntitiesInCall)) {
                            $options[$entityId] = $entityName . ' (they travel)';
                        } else if (in_array($entityId, $specialEntitiesOutCall)) {
                            $options[$entityId] = $entityName . ' (you travel)';
                        } else if (in_array($entityId, $specialEntitiesEither)) {
                            $options[$entityId] = $entityName . ' (you/they travel)';
                        }
                    } else if ($callFrom == 'for-endusers') {
                        if (in_array($entityId, $specialEntitiesInCall)) {
                            $options[$entityId] = $entityName . ' (you travel)';
                        } else if (in_array($entityId, $specialEntitiesOutCall)) {
                            $options[$entityId] = $entityName . ' (they travel)';
                        } else if (in_array($entityId, $specialEntitiesEither)) {
                            $options[$entityId] = $entityName . ' (you/they travel)';    
                        }
                    }
                } else if($entityName=='Either') {
                	$options[$entityId] = $entityName . ' (you/they travel)';
                }
            }
        } else {
            if (in_array($options, $specialEntities)) {
                if (in_array($options, $specialEntitiesInCall)) {
                    $options = $entityName . ' (you travel)';
                } else if (in_array($options, $specialEntitiesOutCall)) {
                    $options = $entityName . ' (they travel)';
                } else if (in_array($options, $specialEntitiesEither)) {
                    $options = $entityName . ' (you/they travel)';   
                }
            } else if($entityName=='Either') {
                	$options = $entityName . ' (you/they travel)';
            }
        }

        return $options;
    }
    
    // Inmoderation tooltip message
    public static function inModerationTooltipMsg()
    {
        $message = array();
        $inMorningTimeMsg = self::IN_MORNING_TIME_MSG;
        $inDayTimeMsg = self::IN_DAY_TIME_MSG;
        $inNightTimeMsg = self::IN_NIGHT_TIME_MSG;
        $liveEditMorningMsg = self::LIVE_EDIT_MORNING_MSG;
        $liveEditDayMsg = self::LIVE_EDIT_DAY_MSG;
        $liveEditNightMsg = self::LIVE_EDIT_NIGHT_MSG;
        
        $sunday = self::DAY_SUNDAY;
        $saturday = self::DAY_SATURDAY;
        $currentDay = intval(date('w'));
        $currentTime = intval(date('Gi'));
        
        if($currentDay == $sunday || $currentDay == $saturday) {
            $morStartTime = self::SUN_SAT_START_TIME;
            $morEndTime = self::SUN_SAT_END_TIME;
            $dayStartTime = self::SUN_SAT_START_TIME_1;
            $dayEndTime = self::SUN_SAT_END_TIME_1;
            
            if ($currentTime >= $morStartTime && $currentTime <= $morEndTime) {
                $message['inModeration'] = $inMorningTimeMsg;
                $message['liveEdit'] = $liveEditMorningMsg;
            }elseif ($currentTime >= $dayStartTime && $currentTime <= $dayEndTime) {
                $message['inModeration'] = $inDayTimeMsg;
                $message['liveEdit'] = $liveEditDayMsg;
            }else {
                $message['inModeration'] = $inNightTimeMsg;
                $message['liveEdit'] = $liveEditNightMsg;
            }
        }else {
            $morStartTime = self::MON_TO_FRI_START_TIME;
            $morEndTime = self::MON_TO_FRI_END_TIME;
            $dayStartTime = self::MON_TO_FRI_START_TIME_1;
            $dayEndTime = self::MON_TO_FRI_END_TIME_1;
            
            if ($currentTime >= $morStartTime && $currentTime <= $morEndTime) {
                $message['inModeration'] = $inMorningTimeMsg;
                $message['liveEdit'] = $liveEditMorningMsg;
            }elseif ($currentTime >= $dayStartTime && $currentTime <= $dayEndTime) {
                $message['inModeration'] = $inDayTimeMsg;
                $message['liveEdit'] = $liveEditDayMsg;
            }else {
                $message['inModeration'] = $inNightTimeMsg;
                $message['liveEdit'] = $liveEditNightMsg;
            }
        }
        return $message;
    }
}
