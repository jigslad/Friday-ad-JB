<?php

/**
 * This file is part of the fa bundle.
 *
 * @copyright Copyright (c) 2014, FMG
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Fa\Bundle\EntityBundle\Repository;

use Doctrine\ORM\EntityRepository as BaseEntityRepository;
use Fa\Bundle\EntityBundle\Repository\LocationRepository;
use Fa\Bundle\CoreBundle\Manager\CommonManager;

/**
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 *
 * @author Samir Amrutya <samiram@aspl.in>
 * @copyright 2014 Friday Media Group Ltd
 * @version v1.0
 */
class LocalityRepository extends BaseEntityRepository
{
    use \Fa\Bundle\CoreBundle\Search\Search;

    const ALIAS = 'll';

    /**
     * Prepare query builder.
     *
     * @param array $data array of data
     *
     * @return Doctrine\ORM\QueryBuilder The query builder
     */
    public function getBaseQueryBuilder()
    {
        return $this->createQueryBuilder(self::ALIAS);
    }

    /**
     * Get towns key value array by term.
     *
     * @param string  $term Search term.
     *
     * @return array
     */
    public function getLocalitiesArrayByTerm($term)
    {
        $localities = $this->getBaseQueryBuilder()
        ->andWhere(self::ALIAS.'.locality_text LIKE :term')
        ->setParameter('term', $term.'%')
        ->orderBy(self::ALIAS.'.locality_text', 'asc')
        ->groupBy(self::ALIAS.'.locality_text')
        ->getQuery()->getResult();

        $localityArray = array();
        foreach ($localities as $locality) {
            //getTown Lat and Long
            $getTown = $this->_em->getRepository('FaEntityBundle:Location')->find($locality->getTownId());
            $localiyName = explode(',', $locality->getLocalityText());
            $localityArray[] = array('id'=> $locality->getId().','.$locality->getTownId(), 'text' => $locality->getLocalityText(), 'latlong' => $getTown->getLatitude().', '.$getTown->getLongitude(), 'slug' => $getTown->getUrl());
        }

        return $localityArray;
    }

    /**
     * Get locality information array by locaton.
     *
     * @param string $location  Locality id.
     * @param object $container Container interface.
     * @param string $column
     *
     * @return array
     */
    public function getLocalityInfoArrayById($location, $container = null, $column = 'id')
    {
        if ($container) {
            $culture     = CommonManager::getCurrentCulture($container);
            $cacheKey    = $this->getTableName().'|'.__FUNCTION__.'|'.$location.'_'.$column.'_'.$culture;
            $cachedValue = CommonManager::getCacheVersion($container, $cacheKey);

            if ($cachedValue !== false) {
                return $cachedValue;
            }
        }

        $localityInfoArray = array();

        $qb = $this->getBaseQueryBuilder()
        ->select(self::ALIAS, PostcodeRepository::ALIAS.'.latitude', PostcodeRepository::ALIAS.'.longitude', PostcodeRepository::ALIAS.'.county_id')
        ->leftJoin('Fa\Bundle\EntityBundle\Entity\Postcode', PostcodeRepository::ALIAS, 'WITH', self::ALIAS.'.id = '.PostcodeRepository::ALIAS.'.locality_id');

        if ($location) {
            $qb->andWhere(self::ALIAS.'.'.$column." = :value");
            $qb->setParameter('value', $location);
        }

        $qb->setMaxResults(1);

        $locality = $qb->getQuery()->getOneOrNullResult();

        if ($locality) {
            $localityInfoArray['latitude']    = $locality['latitude'];
            $localityInfoArray['longitude']   = $locality['longitude'];
            $localityInfoArray['county_id']   = $locality['county_id'];
            $localityInfoArray['locality_id'] = $locality[0]->getId();
            $localityInfoArray['locality']    = $locality[0]->getName();
            $localityInfoArray['town_id']     = $locality[0]->getTownId();
            $localityInfoArray['slug']        = $locality[0]->getUrl();
        }

        if ($container) {
            CommonManager::setCacheVersion($container, $cacheKey, $localityInfoArray);
        }

        return $localityInfoArray;
    }

    /**
     * Get slug by column.
     *
     * @param string  $column
     * @param integer $value
     * @param object  $container
     *
     * @return string
     */
    public function getSlugByColumn($column, $value, $container = null)
    {
        $value = strtolower($value);

        if ($container) {
            $tableName   = $this->getTableName();

            if ($column == 'id') {
                $cacheKey = 'EntityCacheManager'.'|'.'getEntitySlugById'.'|'.'FaEntityBundle:Locality'.'_'.$value;
            } else {
                $cacheKey    = $tableName.'|'.__FUNCTION__.'|'.$column.'_'.str_replace(' ', '', $value);
            }

            $cachedValue = CommonManager::getCacheVersion($container, $cacheKey);

            if ($cachedValue !== false) {
                return $cachedValue;
            }
        }

        $location = $this->findOneBy(array($column => $value));

        if ($location) {
            if ($container) {
                CommonManager::setCacheVersion($container, $cacheKey, $location->getUrl());
            }

            return $location->getUrl();
        }
    }

    /**
     * Get slug by column.
     *
     * @param string  $column
     * @param integer $value
     * @param object  $container
     *
     * @return string
     */
    public function getColumnBySlug($column, $slug, $container = null)
    {
        if ($container) {
            $tableName   = $this->getTableName();
            $cacheKey    = $tableName.'|'.__FUNCTION__.'|'.$column.'_'.$slug;
            $cachedValue = CommonManager::getCacheVersion($container, $cacheKey);

            if ($cachedValue !== false) {
                return $cachedValue;
            }
        }

        $location = $this->findOneBy(array('url' => $slug));

        if ($location) {
            if ($container) {
                CommonManager::setCacheVersion($container, $cacheKey, $location->getUrl());
            }

            $methodName = 'get'.str_replace(' ', '', ucwords(str_replace('_', ' ', $column)));

            $data = null;
            if ($column == 'id') {
                $data = $location->getId().','.$location->getTownId();
            } else {
                $data = $location->$methodName();
            }

            if ($data) {
                if ($container) {
                    CommonManager::setCacheVersion($container, $cacheKey, $data);
                }

                return $data;
            }
        }
    }

    /**
     * Get location text by location.
     *
     * @param string $location  Name of location.
     * @param object $container Container interface.
     *
     * @return string
     */
    public function getLocationTextByLocation($location, $container = null)
    {
        if ($container) {
            $culture     = CommonManager::getCurrentCulture($container);
            $cacheKey    = $this->getTableName().'|'.__FUNCTION__.'|'.str_replace(' ', '', $location).'_'.$culture;
            $cachedValue = CommonManager::getCacheVersion($container, $cacheKey);

            if ($cachedValue !== false) {
                return $cachedValue;
            }
        }

        $locationText = null;
        $object = $this->getBaseQueryBuilder()
        ->where(self::ALIAS.".name = :name")
        ->setParameter('name', $location)
        ->orWhere(self::ALIAS.".url = :slug")
        ->setParameter('slug', $location)
        ->setMaxResults(1)
        ->getQuery()->getOneOrNullResult();

        if ($object && $object->getName()) {
            $locationText = $object->getName();
        }

        if ($container) {
            CommonManager::setCacheVersion($container, $cacheKey, $locationText);
        }

        return $locationText;
    }

    /**
     * Get entity table name.
     */
    private function getTableName()
    {
        return $this->_em->getClassMetadata('FaEntityBundle:Locality')->getTableName();
    }

    /**
     * Get localities by town ids.
     *
     * @param array $townIds Town ids.
     *
     * @return array
     */
    public function getLocalitiesArrayByTwonIds($townIds)
    {
        $localities = $this->getBaseQueryBuilder()
        ->andWhere(self::ALIAS.'.town_id IN (:townIds)')
        ->setParameter('townIds', $townIds)
        ->orderBy(self::ALIAS.'.name', 'asc')
        ->getQuery()->getResult();

        $localityArray = array();
        foreach ($localities as $locality) {
            $localityArray[] = $locality;
        }

        return $localityArray;
    }

    /**
     * Check whether same locality name exists in another town.
     *
     * @param string $location  Name of locality.
     * @param object $container Container interface.
     *
     * @return string
     */
    public function isDuplicateName($name, $container = null)
    {
        if ($container) {
            $culture     = CommonManager::getCurrentCulture($container);
            $cacheKey    = $this->getTableName().'|'.__FUNCTION__.'|'.str_replace(' ', '', $name).'_'.$culture;
            $cachedValue = CommonManager::getCacheVersion($container, $cacheKey);

            if ($cachedValue !== false) {
                return $cachedValue;
            }
        }

        $qb = $this->createQueryBuilder(self::ALIAS)
                   ->select('COUNT('.self::ALIAS.'.id)')
                   ->andWhere(self::ALIAS.'.name =:name')
                   ->setParameter('name', $name)
                   ->groupBy(self::ALIAS.'.name');

        $localitiesCount = $qb->getQuery()->getSingleScalarResult();

        $isDuplicateName = false;
        if ($localitiesCount > 1) {
            $isDuplicateName = true;
        }

        if ($container) {
            CommonManager::setCacheVersion($container, $cacheKey, $isDuplicateName);
        }

        return $isDuplicateName;
    }

    /**
     * @param $container
     * @return mixed
     */
    public function getAllLocalities($container)
    {
        if ($container) {
            $culture     = CommonManager::getCurrentCulture($container);
            $cacheKey    = $this->getTableName().'|'.__FUNCTION__.'|'.$culture;
            $cachedValue = CommonManager::getCacheVersion($container, $cacheKey);

            if ($cachedValue !== false) {
                return $cachedValue;
            }
        }

        $query = $this->createQueryBuilder(self::ALIAS);

        $objResources = $query->getQuery()->getArrayResult();

        $locationDetails = [];
        foreach ($objResources as $location) {
            $locationDetails[$location['id']]['name']           = $location['name'];
            $locationDetails[$location['id']]['slug']           = $location['url'];
            $locationDetails[$location['id']]['locality_text']  = $location['locality_text'];
            $locationDetails[$location['id']]['town_id']        = $location['town_id'];
        }

        if ($container) {
            CommonManager::setCacheVersion($container, $cacheKey, $locationDetails);
        }

        return $locationDetails;
    }

    /**
     * @param $container
     * @param $id
     * @return array
     */
    public function getCachedLocalityById($container, $id)
    {
        if (! empty($id)) {
            $localities = CommonManager::getCacheVersion($container, 'locality|getAllLocalities|en_GB');

            return [
                'id'            => $id,
                'name'          => $localities[$id]['name'],
                'slug'          => $localities[$id]['slug'],
                'locality_text' => $localities[$id]['locality_text'],
                'town_id'       => $localities[$id]['town_id']
            ];
        } else {
            return [];
        }
    }
}
