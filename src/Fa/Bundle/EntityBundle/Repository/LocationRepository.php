<?php

/**
 * This file is part of the fa bundle.
 *
 * @copyright Copyright (c) 2014, FMG
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Fa\Bundle\EntityBundle\Repository;

use Doctrine\ORM\EntityRepository as BaseEntityRepository;
use Fa\Bundle\CoreBundle\Manager\CommonManager;
use Fa\Bundle\AdBundle\Solr\AdSolrFieldMapping;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpFoundation\Cookie;
use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;
use Fa\Bundle\EntityBundle\Entity\Location;

/**
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 *
 * @author Amit Limbadia <amitl@aspl.in>
 * @copyright 2014 Friday Media Group Ltd
 * @version v1.0
 */
class LocationRepository extends BaseEntityRepository
{
    use \Fa\Bundle\CoreBundle\Search\Search;

    const ALIAS     = 'l';
    const COUNTY_ID = 2;
    const CACHE_TTL = 259200; // 3 days
    const LONDON_TOWN_ID = 831;
    const LONDON_TXT = 'london';
    const COUNTY_GREATER_LONDON_ID = 830;

    /**
     * prepareQueryBuilder.
     *
     * @param array $data array of data
     *
     * @return Doctrine\ORM\QueryBuilder The query builder
     */
    public function getBaseQueryBuilder()
    {
        return $this->createQueryBuilder(self::ALIAS);
    }

    /**
     * Get children by id.
     *
     * @param string $id
     *
     * @return object
     */
    public function getChildrenById($id = null)
    {
        $query = $this->createQueryBuilder(self::ALIAS);

        if (!$id) {
            $query->where(self::ALIAS.'.parent IS NULL OR '.self::ALIAS.'.parent = 0');
        } else {
            $query->where(self::ALIAS.'.parent = '.$id);
        }

        $objResources = $query->getQuery()->getArrayResult();

        return $objResources;
    }
    
    /**
     * Get children by id.
     *
     * @param string $id
     *
     * @return object
     */
    public function getChildrenIdsById($id)
    {
        $query = $this->createQueryBuilder(self::ALIAS);
        $query->where(self::ALIAS.'.parent = '.$id);
        $childrens = $query->getQuery()->getArrayResult();
        $childrenArray = array();
        foreach ($childrens as $children) {
            $childrenArray[] = $children['id'];
        }
        
        return $childrenArray;
    }

    /**
     * Get children key value array by parent id.
     *
     * @param string $id
     *
     * @return Object
     */
    public function getChildrenKeyValueArrayByParentId($id = null)
    {
        $childrenArray = array();
        if ($id) {
            if (!is_array($id)) {
                $id = array($id);
            }

            $childrens = $this->getBaseQueryBuilder()
                         ->where(self::ALIAS.'.parent IN (' . implode(', ', $id) . ')')
                         ->orderBy(self::ALIAS.'.name', 'asc')
                         ->getQuery()->getArrayResult();

            foreach ($childrens as $children) {
                $childrenArray[$children['id']] = $children['name'];
            }
        }

        return $childrenArray;
    }

    /**
     * Get location names by id array query.
     *
     * @param array $ids
     *
     * @return Doctrine_Query
     */
    public function getLocationIdsQuery($ids)
    {
        return $locations = $this->getBaseQueryBuilder()
            ->where(self::ALIAS.'.id IN (:ids)')
            ->setParameter('ids', $ids);
    }

    /**
     * Get location names by id array.
     *
     * @param array $ids
     *
     * @return Doctrine_Collection
     */
    public function getLocationByIds($ids)
    {
        $locations = $this->getLocationIdsQuery($ids)
            ->orderBy(self::ALIAS.'.name', 'ASC')
            ->getQuery()
            ->getResult();

        return $locations;
    }

    /**
     * Get locations by level.
     *
     * @param array $ids
     *
     * @return Doctrine_Collection
     */
    public function getLocationByLevel($level)
    {
        $locations = $this->getBaseQueryBuilder()
            ->andWhere(self::ALIAS.'.lvl = '.$level)
            ->andWhere(self::ALIAS.'.status is NULL')
            ->orderBy(self::ALIAS.'.name', 'ASC')
            ->getQuery()
            ->getResult();
            
        return $locations;
    }

    /**
     * Get location names by id array.
     *
     * @param array   $ids
     * @param boolean $withDomicilePrefix
     *
     * @return array
     */
    public function getLocationKeyValueArrayByIds($ids, $withDomicilePrefix = true)
    {
        $locationArray = array();
        $locations = $this->getLocationIdsQuery($ids)
            ->getQuery()
            ->getResult();

        foreach ($locations as $location) {
            if ($location->getLvl() > 2) {
                if ($withDomicilePrefix) {
                    $locationArray[$location->getParent()->getId().'_'.$location->getId()] = $location->getName();
                } else {
                    $locationArray[$location->getId()] = $location->getName();
                }
            } else {
                $locationArray[$location->getId()] = $location->getName();
            }
        }

        asort($locationArray);

        return $locationArray;
    }

    /**
     * Get towns key value array by term.
     *
     * @param string  $term Search term.
     *
     * @return array
     */
    public function getTownsArrayByTerm($term, $lvl = '3')
    {
        $towns = $this->getBaseQueryBuilder()
                      ->andWhere(self::ALIAS.'.lvl = :lvl')
                      ->andWhere(self::ALIAS.'.name LIKE :term')
                      ->setParameter('lvl', $lvl)
                      ->setParameter('term', $term.'%')
                      ->orderBy(self::ALIAS.'.name', 'asc')
                      ->getQuery()->getResult();

        $townArray = array();
        foreach ($towns as $town) {
            $townArray[] = array('id'=> $town->getId(), 'text' => $town->getName().', '.$town->getParent()->getName(), 'latlong' => $town->getLatitude().', '.$town->getLongitude());
        }

        return $townArray;
    }
    
    /**
     * Get towns key value array by term.
     *
     * @param string  $term Search term.
     *
     * @return array
     */
    public function getTownsAreaArrayByTerm($term, $lvl = '4')
    {
        $areas = $this->getBaseQueryBuilder()
                    ->andWhere(self::ALIAS.'.lvl = :lvl')
                    ->setParameter('lvl', $lvl)
                    ->andWhere(self::ALIAS.'.name LIKE :term')
                    ->setParameter('term', $term.'%')
                    ->orderBy(self::ALIAS.'.name', 'asc')
                    ->getQuery()->getResult();
        
        $areaArray = array();
        foreach ($areas as $area) {
            $areaArray[] = array('id'=> $area->getParent()->getId(), 'text' => $area->getName().', '.$area->getParent()->getName(), 'area_id'=> $area->getId(), 'locationBy' => 'area', 'latlong' => $area->getLatitude().', '.$area->getLongitude());
        }
        
        return $areaArray;
    }

    /**
     * Get towns key value array by term.
     *
     * @param string $longitude
     * @param string $latitude
     * @param string $distance
     *
     * @return string
     */
    public function getSolrGeoLocationFilterQuery($latitude, $longitude, $distance = null)
    {
        //{!geofilt pt=52.542661,-0.285207 sfield=store d=1}
        //{!bbox pt=52.542661,-0.285207 sfield=store d=1}

        $solrQuery = '';
        if ($distance) {
            $pt = $latitude.','.$longitude;
            $d  = ($distance * 1.60934); // convert milesto km

            $solrQuery = ' AND {!bbox pt='.$pt.' sfield=store d='.$d.'}';
        }

        return $solrQuery;
    }

    /**
     * Get table name.
     *
     * @return string Table name.
     */
    private function getTableName()
    {
        return $this->_em->getClassMetadata('FaEntityBundle:Location')->getTableName();
    }

    /**
     * Get location distance options.
     *
     * @param object $container Container identifier.
     *
     * @return array
     */
    public function getDistanceOptionsArray($container)
    {
        $translator  = CommonManager::getTranslator($container);
        $optionArray = array(
                           ''       => $translator->trans('Select distance'),
                           '0'      => $translator->trans('0 mile'),
                           '2'      => $translator->trans('2 miles'),
                           '5'      => $translator->trans('5 miles'),
                           '10'     => $translator->trans('10 miles'),
                           '15'     => $translator->trans('15 miles'),
                           '20'     => $translator->trans('20 miles'),
                           '30'     => $translator->trans('30 miles'),
                           '50'     => $translator->trans('50 miles'),
                           '75'     => $translator->trans('75 miles'),
                           '100'    => $translator->trans('100 miles'),
                           '150'    => $translator->trans('150 miles'),
                           '200'    => $translator->trans('200 miles'),
                           '100000' => $translator->trans('National'),
        );

        return $optionArray;
    }

    /**
     * Get location distance text by value.
     *
     * @param integer $id        Distance value.
     * @param object  $container Container identifier.
     *
     * @return mixed
     */
    public function getDistanceOptionNameById($id, $container)
    {
        $options = $this->getDistanceOptionsArray($container);
        if (isset($options[$id])) {
            return $options[$id];
        }

        return null;
    }

    /**
     * Get slug by id.
     *
     * @param integer $id
     * @param string  $container
     *
     * @return string
     */
    public function getSlugById($id, $container = null)
    {
        if ($container) {
            $cacheKey = 'EntityCacheManager'.'|'.'getEntitySlugById'.'|'.'FaEntityBundle:Location'.'_'.$id;
            $cachedValue = CommonManager::getCacheVersion($container, $cacheKey);

            if ($cachedValue !== false) {
                return $cachedValue;
            }
        }

        $location = $this->find($id);

        if ($location) {
            $locationSlug = $location->getRedirectUrl()?$location->getRedirectUrl():$location->getUrl();
            if ($container) {
                CommonManager::setCacheVersion($container, $cacheKey, $locationSlug);
            }

            return $locationSlug;
        }
    }
    
    /**
     * Get slug by id.
     *
     * @param integer $id
     * @param string  $container
     *
     * @return string
     */
    public function getSlugForDetailAd($id, $container = null)
    {
        if ($container) {
            $cacheKey = 'EntityCacheManager'.'|'.'getSlugForDetailAd'.'|'.'FaEntityBundle:Location'.'_'.$id;
            $cachedValue = CommonManager::getCacheVersion($container, $cacheKey);
            
            if ($cachedValue !== false) {
                return $cachedValue;
            }
        }
        
        $location = $this->find($id);
        
        if ($location) {
            $locationUrl = $location->getUrl();
            if ($container) {
                CommonManager::setCacheVersion($container, $cacheKey, $locationUrl);
            }
            
            return $locationUrl;
        }
    }

    /**
     * Get slug by name.
     *
     * @param string  $name
     * @param integer $lvl
     * @param object  $container
     *
     * @return string
     */
    public function getSlugByName($name, $lvl = null, $container = null)
    {
        $name = strtolower($name);

        if ($container) {
            $tableName   = $this->getEntityTableName();
            $cacheKey    = $tableName.'|'.__FUNCTION__.'|'.str_replace(' ', '', $name).'_'.$lvl;
            $cachedValue = CommonManager::getCacheVersion($container, $cacheKey);

            if ($cachedValue !== false) {
                return $cachedValue;
            }
        }

        if ($lvl) {
            $location = $this->findOneBy(array('name' => $name, 'lvl' => $lvl));
        } else {
            $location = $this->findOneBy(array('name' => $name));
        }

        if ($location) {
            $locationSlug = $location->getRedirectUrl()?$location->getRedirectUrl():$location->getUrl();
            if ($container) {
                CommonManager::setCacheVersion($container, $cacheKey, $locationSlug);
            }

            return $locationSlug;
        }
    }

    /**
     * Get name by slug.
     *
     * @param string  $name
     * @param integer $lvl
     * @param object  $container
     *
     * @return string
     */
    public function getNameBySlug($slug, $lvl = null, $container = null)
    {
        $locationName = '';
        if ($container) {
            $tableName   = $this->getEntityTableName();
            $cacheKey    = $tableName.'|'.__FUNCTION__.'|'.$slug.'_'.$lvl;
            $cachedValue = CommonManager::getCacheVersion($container, $cacheKey);

            if ($cachedValue !== false) {
                return $cachedValue;
            }
        }
        
        $query = $this->createQueryBuilder(self::ALIAS)
                        ->where(self::ALIAS.'.url = :url')
                        ->setParameter('url', $slug)
                        ->orWhere(self::ALIAS.'.redirect_url = :redirecturl')
                        ->setParameter('redirecturl', $slug);

        if ($lvl) {
            $query->andWhere('lvl', $lvl);
        }
        $location = $query->getQuery()->getResult();

        if ($location) {
            $locationName = $location[0]->getName();
        }

        if ($container) {
            CommonManager::setCacheVersion($container, $cacheKey, $locationName);
        }

        return $locationName;
    }

    /**
     * Get location text by location.
     *
     * @param string $location  Name of location.
     * @param object $container Container interface.
     *
     * @return string
     */
    public function getLocationTextByLocation($location, $container = null)
    {
        if ($container) {
            $culture     = CommonManager::getCurrentCulture($container);
            $cacheKey    = $this->getTableName().'|'.__FUNCTION__.'|'.str_replace(' ', '', $location).'_'.$culture;
            $cachedValue = CommonManager::getCacheVersion($container, $cacheKey);

            if ($cachedValue !== false) {
                return $cachedValue;
            }
        }

        $locationText = null;
        $object = $this->getBaseQueryBuilder()
        ->where(self::ALIAS.".name = :name")
        ->setParameter('name', $location)
        ->orWhere(self::ALIAS.".url = :slug")
        ->setParameter('slug', $location)
        ->orWhere(self::ALIAS.".redirect_url = :redirectslug")
        ->setParameter('redirectslug', $location)
        ->setMaxResults(1)
        ->getQuery()->getOneOrNullResult();

        if ($object && $object->getName()) {
            $locationText = $object->getName();
        }

        if ($container) {
            CommonManager::setCacheVersion($container, $cacheKey, $locationText);
        }

        return $locationText;
    }

    /**
     * Get entity table name.
     */
    private function getEntityTableName()
    {
        return $this->_em->getClassMetadata('FaEntityBundle:Location')->getTableName();
    }


    /**
     * Get categories by level.
     *
     * @param string $slug      Full slug.
     * @param string $container Container interface.
     *
     * @return Collection
     */
    public function getIdBySlug($slug, $container = null)
    {
        if ($container) {
            $tableName   = $this->getEntityTableName();
            $cacheKey    = $tableName.'|'.__FUNCTION__.'|'.$slug;
            $cachedValue = CommonManager::getCacheVersion($container, $cacheKey);

            if ($cachedValue !== false) {
                return $cachedValue;
            }
        }

        $query = $this->createQueryBuilder(self::ALIAS)
                        ->where(self::ALIAS.'.url = :url')
                        ->setParameter('url', $slug);

        $objResources = $query->getQuery()->getResult();

        if ($objResources) {
            if ($container) {
                CommonManager::setCacheVersion($container, $cacheKey, $objResources[0]->getId());
            }

            return $objResources[0]->getId();
        }
    }

    /**
     * Get categories by level.
     *
     * @param string $slug      Full slug.
     * @param string $container Container interface.
     *
     * @return Collection
     */
    public function getLocationBySlug($slug, $container = null)
    {
        if ($container) {
            $tableName   = $this->getEntityTableName();
            $cacheKey    = $tableName.'|'.__FUNCTION__.'|'.$slug;
            $cachedValue = CommonManager::getCacheVersion($container, $cacheKey);

            if ($cachedValue !== false) {
                return $cachedValue;
            }
        }

        $query = $this->createQueryBuilder(self::ALIAS)
        ->where(self::ALIAS.'.url = :url')
        ->setParameter('url', $slug);

        $objResources = $query->getQuery()->getResult();

        if ($objResources) {
            if ($container) {
                CommonManager::setCacheVersion($container, $cacheKey, $objResources[0]);
            }

            return $objResources[0];
        }
    }

    /**
     * Get town and county name from town id.
     *
     * @param string $location  Postcode or town name.
     * @param object $container Container interface.
     * @param string $withParent
     *
     * @return string
     */
    public function getLocationNameWithParentNameById($location, $container = null, $withParent = true)
    {
        if ($container) {
            $culture     = CommonManager::getCurrentCulture($container);
            $cacheKey    = $this->getTableName().'|'.__FUNCTION__.'|'.$location.'_'.$withParent.'_'.$culture;
            $cachedValue = CommonManager::getCacheVersion($container, $cacheKey);

            if ($cachedValue !== false) {
                return $cachedValue;
            }
        }

        $locationText = null;
        $location = $this->getLocationIdsQuery($location)->getQuery()->getOneOrNullResult();

        if ($location && ($location->getLvl() == 3 || $location->getLvl() == 4)) {
            if ($withParent || $location->getLvl() == 4) {
                $locationText = $location->getName().', '.$location->getParent()->getName();
            } else {
                $locationText = $location->getName();
            }
        }

        if ($container) {
            CommonManager::setCacheVersion($container, $cacheKey, $locationText);
        }

        return $locationText;
    }

    /**
     * Get town information array by locaton.
     *
     * @param string $location  Postcode or town name.
     * @param object $container Container interface.
     * @param string $column
     *
     * @return array
     */
    public function getTownInfoArrayById($location, $container = null, $column = 'id')
    {
        if ($container) {
            $culture     = CommonManager::getCurrentCulture($container);
            $cacheKey    = $this->getTableName().'|'.__FUNCTION__.'|'.$location.'_'.$column.'_'.$culture;
            $cachedValue = CommonManager::getCacheVersion($container, $cacheKey);

            if ($cachedValue !== false) {
                return $cachedValue;
            }
        }

        $lifetime = self::CACHE_TTL;
        $townInfoArray = null;
        $query = $this->createQueryBuilder(self::ALIAS)
                        ->select(self::ALIAS)
                        ->where(self::ALIAS.'.'.$column.'= :location')
                        ->setParameter('location', $location)
                        ->andWhere(self::ALIAS.'.lvl = 3 OR '.self::ALIAS.'.lvl = 4')
                        ->setMaxResults(1);
        
        $town = $query->getQuery()->getOneOrNullResult();

        if ($town) {
            $townInfoArray['latitude']  = $town->getLatitude();
            $townInfoArray['longitude'] = $town->getLongitude();
            $townInfoArray['town_id']   = $town->getId();
            $townInfoArray['town']      = $town->getName();
            $townInfoArray['county_id'] = $town->getParent()->getId();
            $townInfoArray['county']    = $town->getParent()->getName();
            $townInfoArray['lvl']    	= $town->getLvl();
            
            //if town is special than area behave as like town for SEO
            if (!$town->getIsSpecialArea() && $town->getLvl()==4) {
                $townInfoArray['slug']  = $town->getParent()->getUrl();
            } else {
                $townInfoArray['slug']  = $town->getUrl();
            }
            $lifetime = null;
        }

        if ($container) {
            CommonManager::setCacheVersion($container, $cacheKey, $townInfoArray, $lifetime);
        }

        return $townInfoArray;
    }
    
    /**
     * Get town information array by locaton.
     *
     * @param string $location  Postcode or town name.
     * @param object $container Container interface.
     * @param string $column
     *
     * @return array
     */
    public function getTownAndAreaById($location, $container = null)
    {
        if ($container) {
            $culture     = CommonManager::getCurrentCulture($container);
            $cacheKey    = $this->getTableName().'|'.__FUNCTION__.'|'.$location.'_'.$culture;
            $cachedValue = CommonManager::getCacheVersion($container, $cacheKey);
            
            if ($cachedValue !== false) {
                return $cachedValue;
            }
        }
        
        $query = $this->createQueryBuilder(self::ALIAS)
                        ->select(self::ALIAS)
                        ->where(self::ALIAS.'.id = :location')
                        ->setParameter('location', $location)
                        ->andWhere(self::ALIAS.'.lvl = 3 OR '.self::ALIAS.'.lvl = 4')
                        ->setMaxResults(1);
        
        return $query->getQuery()->getOneOrNullResult();
    }

    /**
     * Get town information array by id.
     *
     * @param integer $Townid.
     * @param object $container Container interface.
     * @param string $column
     *
     * @return array
     */
    public function getArrayByTownId($Townid, $container = null)
    {
        if ($container) {
            $culture     = CommonManager::getCurrentCulture($container);
            $cacheKey    = $this->getTableName().'|'.__FUNCTION__.'|'.$Townid.'_id_'.$culture;
            $cachedValue = CommonManager::getCacheVersion($container, $cacheKey);

            if ($cachedValue !== false) {
                return $cachedValue;
            }
        }

        $townInfoArray = null;
        $town          = $this->findOneBy(array('id' => $Townid));
        $lifetime = null;
        if ($town) {
            $townInfoArray['latitude']      = $town->getLatitude();
            $townInfoArray['longitude']     = $town->getLongitude();
            $townInfoArray['town_id']       = $town->getId();
            $townInfoArray['location_text'] = $town->getName();
            $townInfoArray['location']      = $town->getId();
            $townInfoArray['town']          = $town->getName();
            $townInfoArray['county_id']     = !empty($town->getParent()) ? $town->getParent()->getId() : null;
            $townInfoArray['paa_county']    = !empty($town->getParent()) ? $town->getParent()->getName() : null;
            $townInfoArray['slug']          = $town->getRedirectUrl()?$town->getRedirectUrl():$town->getUrl();
            $lifetime = null;
        }

        if ($container) {
            CommonManager::setCacheVersion($container, $cacheKey, $townInfoArray, $lifetime);
        }

        return $townInfoArray;
    }

    /**
     * Get county information array by locaton.
     *
     * @param string $location  County id.
     * @param object $container Container interface.
     * @param string $column
     *
     * @return array
     */
    public function getCountyInfoArrayById($location, $container = null, $column = 'id')
    {
        if ($container) {
            $culture     = CommonManager::getCurrentCulture($container);
            $cacheKey    = $this->getTableName().'|'.__FUNCTION__.'|'.$location.'_'.$column.'_'.$culture;
            $cachedValue = CommonManager::getCacheVersion($container, $cacheKey);

            if ($cachedValue !== false) {
                return $cachedValue;
            }
        }

        $lifetime = self::CACHE_TTL;
        $countyInfoArray = array();
        $county = null;
        $objResources = null;
        if ($column=='url') {
            $query = $this->createQueryBuilder(self::ALIAS)
                            ->where(self::ALIAS . '.url = :url')
                            ->setParameter('url', $location)
                            ->andWhere(self::ALIAS . '.lvl = 2');
            $objResources = $query->getQuery()->getResult();
            $county = ($objResources)?$objResources[0]:null;
        } else {
            $county  = $this->findOneBy(array($column => $location, 'lvl' => '2'));
        }

        if ($county) {
            $countyInfoArray['latitude']  = $county->getLatitude();
            $countyInfoArray['longitude'] = $county->getLongitude();
            $countyInfoArray['county_id'] = $county->getId();
            $countyInfoArray['county']    = $county->getName();
            $countyInfoArray['slug']      = $county->getUrl();
            $countyInfoArray['lvl']       = $county->getLvl();
            $lifetime = null;
        }

        if ($container) {
            CommonManager::setCacheVersion($container, $cacheKey, $countyInfoArray, $lifetime);
        }

        return $countyInfoArray;
    }

    /**
     * Get cookie value.
     *
     * @param string  $location  Location string.
     * @param object  $container Container identifier.
     * @param boolean $slugFlag  Check in slug flag.
     *
     * @return array
     */
    public function getCookieValue($location, $container, $slugFlag = false, $locationArea = null)
    {
        $postCode      = $this->_em->getRepository('FaEntityBundle:Postcode')->getPostCodInfoArrayByLocation($location, $container);
        $town          = null;
        $county        = null;
        $locality      = null;
        $cookieValue   = array();
        $slugFlagValue = 'url';

        if (!$slugFlag) {
            $slugFlagValue = 'name';
        }
        
        if ($locationArea != null) {
            $location = $locationArea;
        }

        if (!$postCode || (isset($postCode['town_id']) && ($postCode['town_id'] == null || $postCode['town_id'] == 0))) {
            if (preg_match('/^\d+$/', $location)) {
                $town = $this->getTownInfoArrayById($location, $container);
            } elseif (preg_match('/^([\d]+,[\d]+)$/', $location)) {
                $localityTown = explode(',', $location);
                $localityId = $localityTown[0];
                $townId     = $localityTown[1];
                if ($localityId && $townId) {
                    $locality  = $this->_em->getRepository('FaEntityBundle:Locality')->getLocalityInfoArrayById($localityId, $container);
                    $town = $this->getTownInfoArrayById($townId, $container);
                }
            } else {
                $town = $this->getTownInfoArrayById($location, $container, $slugFlagValue);
            }
        }

        if (!$town) {
            $county = $this->getCountyInfoArrayById($location, $container, $slugFlagValue);

            if (!$county) {
                $localityObj = $this->_em->getRepository('FaEntityBundle:Locality')->findOneBy(array($slugFlagValue => $location));
                if ($localityObj) {
                    $locality  = $this->_em->getRepository('FaEntityBundle:Locality')->getLocalityInfoArrayById($localityObj->getId(), $container);
                    $town      = $this->getTownInfoArrayById($locality['town_id'], $container);
                }
            }
        }

        // FFR-1076
        // Replace postcode with town in all URLs
        if ($postCode) {
            if (isset($postCode['locality_id']) && $postCode['locality_id'] > 0) {
                $locality = $this->_em->getRepository('FaEntityBundle:Locality')->getLocalityInfoArrayById($postCode['locality_id'], $container);
            } else {
                $town = $this->getTownInfoArrayById($postCode['town_id'], $container);
            }
            $postCode = null;
        }

        if ($postCode) {
            $town     = $container->get('fa.entity.cache.manager')->getEntityNameById('FaEntityBundle:Location', $postCode['town_id']);
            $county   = $container->get('fa.entity.cache.manager')->getEntityNameById('FaEntityBundle:Location', $postCode['county_id']);
            $locality = $container->get('fa.entity.cache.manager')->getEntityNameById('FaEntityBundle:Locality', $postCode['locality_id']);

            $cookieValue['latitude']       = $postCode['latitude'];
            $cookieValue['longitude']      = $postCode['longitude'];
            $cookieValue['locality_id']    = $postCode['locality_id'];
            $cookieValue['locality']       = $locality;
            $cookieValue['town_id']        = $postCode['town_id'];
            $cookieValue['town']           = $town;
            $cookieValue['county']         = $county;
            $cookieValue['postcode']       = strtolower($postCode['postcode_c']);
            $cookieValue['location']       = $cookieValue['postcode'];
            $cookieValue['paa_county']     = $cookieValue['county'];
            $cookieValue['slug']           = $cookieValue['postcode'];
            $cookieValue['location_text']  = $cookieValue['postcode'];
            $cookieValue['location_area']  = null;
            $cookieValue['lvl']  		   = null;
        } elseif ($locality) {
            $town = $container->get('fa.entity.cache.manager')->getEntityNameById('FaEntityBundle:Location', $locality['town_id']);

            $cookieValue['latitude']       = $locality['latitude'];
            $cookieValue['longitude']      = $locality['longitude'];
            $cookieValue['locality_id']    = $locality['locality_id'];
            $cookieValue['locality']       = $locality['locality'];
            $cookieValue['town_id']        = $locality['town_id'];
            $cookieValue['town']           = $town;
            $cookieValue['county']         = null;
            $cookieValue['postcode']       = null;
            $cookieValue['location']       = $cookieValue['locality_id'].','.$locality['town_id'];
            $cookieValue['paa_county']     = null;
            $cookieValue['slug']           = $locality['slug'];
            $cookieValue['location_text']  = $cookieValue['locality'];
            $cookieValue['location_area']  = null;
            $cookieValue['lvl']  		   = null;
        } elseif ($town) {
            $cookieValue['latitude']       = $town['latitude'];
            $cookieValue['longitude']      = $town['longitude'];
            $cookieValue['locality_id']    = null;
            $cookieValue['locality']       = null;
            $cookieValue['town_id']        = $town['town_id'];
            $cookieValue['town']           = $town['town'];
            $cookieValue['county']         = null;
            $cookieValue['postcode']       = null;
            $cookieValue['location']       = $cookieValue['town_id'];
            $cookieValue['paa_county']     = $town['county'];
            $cookieValue['slug']           = $town['slug'];
            $cookieValue['location_text']  = $cookieValue['town'];
            $cookieValue['location_area']  = null;
            $cookieValue['lvl']  		   = $town['lvl'];
        } elseif ($county) {
            $cookieValue['latitude']       = $county['latitude'];
            $cookieValue['longitude']      = $county['longitude'];
            $cookieValue['locality_id']    = null;
            $cookieValue['locality']       = null;
            $cookieValue['town_id']        = null;
            $cookieValue['town']           = null;
            $cookieValue['county']         = $county['county'];
            $cookieValue['postcode']       = null;
            $cookieValue['location']       = $county['county'];
            $cookieValue['paa_county']     = null;
            $cookieValue['slug']           = $county['slug'];
            $cookieValue['location_text']  = $cookieValue['county'];
            $cookieValue['location_area']  = null;
            $cookieValue['lvl']  		   = null;
        }

        return $cookieValue;
    }
    
    public function getCookieValueForBanner($location, $container, $slugFlag = false, $locationArea = null)
    {
        $postCode      = $this->_em->getRepository('FaEntityBundle:Postcode')->getPostCodInfoArrayByLocation($location, $container);
        $town          = null;
        $county        = null;
        $locality      = null;
        $cookieValue   = array();
        $slugFlagValue = 'url';
        
        if (!$slugFlag) {
            $slugFlagValue = 'name';
        }
        
        if ($locationArea != null) {
            $location = $locationArea;
        }
        
        if (!$postCode || (isset($postCode['town_id']) && ($postCode['town_id'] == null || $postCode['town_id'] == 0))) {
            if (preg_match('/^\d+$/', $location)) {
                $town = $this->getTownInfoArrayById($location, $container);
            } elseif (preg_match('/^([\d]+,[\d]+)$/', $location)) {
                $localityTown = explode(',', $location);
                $localityId = $localityTown[0];
                $townId     = $localityTown[1];
                if ($localityId && $townId) {
                    $locality  = $this->_em->getRepository('FaEntityBundle:Locality')->getLocalityInfoArrayById($localityId, $container);
                    $town = $this->getTownInfoArrayById($townId, $container);
                }
            } else {
                $town = $this->getTownInfoArrayById($location, $container, $slugFlagValue);
            }
        }
        
        if (!$town) {
            $county = $this->getCountyInfoArrayById($location, $container, $slugFlagValue);
            
            if (!$county) {
                $localityObj = $this->_em->getRepository('FaEntityBundle:Locality')->findOneBy(array($slugFlagValue => $location));
                if ($localityObj) {
                    $locality  = $this->_em->getRepository('FaEntityBundle:Locality')->getLocalityInfoArrayById($localityObj->getId(), $container);
                    $town      = $this->getTownInfoArrayById($locality['town_id'], $container);
                }
            }
        }
        
        // FFR-1076
        // Replace postcode with town in all URLs
        if ($postCode) {
            if (isset($postCode['locality_id']) && $postCode['locality_id'] > 0) {
                $locality = $this->_em->getRepository('FaEntityBundle:Locality')->getLocalityInfoArrayById($postCode['locality_id'], $container);
            } else {
                $town = $this->getTownInfoArrayById($postCode['town_id'], $container);
            }
            $postCode = null;
        }
        
        if ($postCode) {
            $town     = $container->get('fa.entity.cache.manager')->getEntityNameById('FaEntityBundle:Location', $postCode['town_id']);
            $county   = $container->get('fa.entity.cache.manager')->getEntityNameById('FaEntityBundle:Location', $postCode['county_id']);
            $locality = $container->get('fa.entity.cache.manager')->getEntityNameById('FaEntityBundle:Locality', $postCode['locality_id']);
            
            $cookieValue['latitude']       = $postCode['latitude'];
            $cookieValue['longitude']      = $postCode['longitude'];
            $cookieValue['locality_id']    = $postCode['locality_id'];
            $cookieValue['locality']       = $locality;
            $cookieValue['town_id']        = $postCode['town_id'];
            $cookieValue['town']           = $town;
            $cookieValue['county']         = $county;
            $cookieValue['postcode']       = strtolower($postCode['postcode_c']);
            $cookieValue['location']       = $cookieValue['postcode'];
            $cookieValue['paa_county']     = $cookieValue['county'];
            $cookieValue['slug']           = $cookieValue['postcode'];
            $cookieValue['location_text']  = $cookieValue['postcode'];
            $cookieValue['location_area']  = null;
            $cookieValue['lvl']  		   = null;
        } elseif ($locality) {
            $town = $container->get('fa.entity.cache.manager')->getEntityNameById('FaEntityBundle:Location', $locality['town_id']);
            $county = $container->get('fa.entity.cache.manager')->getEntityNameById('FaEntityBundle:Location', $locality['county_id']); 
            
            $cookieValue['latitude']       = $locality['latitude'];
            $cookieValue['longitude']      = $locality['longitude'];
            $cookieValue['locality_id']    = $locality['locality_id'];
            $cookieValue['locality']       = $locality['locality'];
            $cookieValue['town_id']        = $locality['town_id'];
            $cookieValue['town']           = $town;
            $cookieValue['county']         = $county;
            $cookieValue['postcode']       = null;
            $cookieValue['location']       = $cookieValue['locality_id'].','.$locality['town_id'];
            $cookieValue['paa_county']     = null;
            $cookieValue['slug']           = $locality['slug'];
            $cookieValue['location_text']  = $cookieValue['locality'];
            $cookieValue['location_area']  = null;
            $cookieValue['lvl']  		   = null;
        } elseif ($town) {
            $cookieValue['latitude']       = $town['latitude'];
            $cookieValue['longitude']      = $town['longitude'];
            $cookieValue['locality_id']    = null;
            $cookieValue['locality']       = null;
            $cookieValue['town_id']        = $town['town_id'];
            $cookieValue['town']           = $town['town'];
            $cookieValue['county']         = null;
            $cookieValue['postcode']       = null;
            $cookieValue['location']       = $cookieValue['town_id'];
            $cookieValue['paa_county']     = $town['county'];
            $cookieValue['slug']           = $town['slug'];
            $cookieValue['location_text']  = $cookieValue['town'];
            $cookieValue['location_area']  = null;
            $cookieValue['lvl']  		   = $town['lvl'];
        } elseif ($county) {
            $cookieValue['latitude']       = $county['latitude'];
            $cookieValue['longitude']      = $county['longitude'];
            $cookieValue['locality_id']    = null;
            $cookieValue['locality']       = null;
            $cookieValue['town_id']        = null;
            $cookieValue['town']           = null;
            $cookieValue['county']         = $county['county'];
            $cookieValue['postcode']       = null;
            $cookieValue['location']       = $county['county'];
            $cookieValue['paa_county']     = null;
            $cookieValue['slug']           = $county['slug'];
            $cookieValue['location_text']  = $cookieValue['county'];
            $cookieValue['location_area']  = null;
            $cookieValue['lvl']  		   = null;
        }
        
        return $cookieValue;
    }

    /**
     * Get top town ids.
     *
     * @param object $container Container identifier.
     *
     * @return array
     */
    public function getTopTownIdsForLocation($container)
    {
        $topTowns = array(
            'Aberdeen',
            'Armagh',
            'Bath',
            'Belfast',
            'Birmingham',
            'Bradford',
            'Brighton',
            'Bristol',
            'Cambridge',
            'Canterbury',
            'Cardiff',
            'Carlisle',
            'Chelmsford',
            'Chester',
            'Chichester',
            'Coventry',
            'Derby',
            'Dundee',
            'Durham',
            'Edinburgh',
            'Ely',
            'Exeter',
            'Glasgow',
            'Gloucester',
            'Hereford',
            'Hull',
            'Inverness',
            'Lancaster',
            'Leeds',
            'Leicester',
            'Lichfield',
            'Lincoln',
            'Lisburn',
            'Liverpool',
            'London',
            'Londonderry',
            'Manchester',
            'Newcastle Upon Tyne',
            'Newry',
            'Norwich',
            'Nottingham',
            'Oxford',
            'Perth',
            'Peterborough',
            'Plymouth',
            'Portsmouth',
            'Preston',
            'Ripon',
            'Salford',
            'Salisbury',
            'Sheffield',
            'Southampton',
            'St. Albans',
            'Stirling',
            'Stoke-On-Trent',
            'Sunderland',
            'Swansea',
            'Truro',
            'Wakefield',
            'Wells',
            'Westminster',
            'Winchester',
            'Wolverhampton',
            'Worcester',
            'York'
        );

        $topTownIds = array();
        $query      = $this->createQueryBuilder(self::ALIAS)
            ->where(self::ALIAS.'.name IN (:topTowns)')
            ->setParameter('topTowns', $topTowns);

        $topTowns = $query->getQuery()->getResult();

        $topTownIds[] = 1533; // for Newport.
        $topTownIds[] = 1385; // for Gwynedd.

        foreach ($topTowns as $topTown) {
            $topTownIds[] = $topTown->getId();
        }

        // get top 150 town ids.
        $solrFieldName = AdSolrFieldMapping::TOWN_ID;
        $data['query_filters']['item']['status_id'] = EntityRepository::AD_STATUS_LIVE_ID;
        $data['static_filters']                     = ' AND -'.AdSolrFieldMapping::TOWN_ID.':'.implode(' OR -'.AdSolrFieldMapping::TOWN_ID.':', $topTownIds);

        $data['facet_fields'][$solrFieldName] = array('limit' => 150, 'min_count' => 1);
        // initialize solr search manager service and fetch data based of above prepared search options
        $container->get('fa.solrsearch.manager')->init('ad', '', $data);
        $solrResponse = $container->get('fa.solrsearch.manager')->getSolrResponse();
        $facetResult  = $container->get('fa.solrsearch.manager')->getSolrResponseFacetFields($solrResponse);

        $facetArray = array();
        if (isset($facetResult[$solrFieldName]) && !empty($facetResult[$solrFieldName])) {
            $facetArray = get_object_vars($facetResult[$solrFieldName]);
            foreach (array_keys($facetArray) as $topTownId) {
                array_push($topTownIds, $topTownId);
            }
        }

        return $topTownIds;
    }

    /**
     * Get conties key value array by term.
     *
     * @param string $term Search term.
     *
     * @return array
     */
    public function getCountiesArrayByTerm($term)
    {
        $counties = $this->getBaseQueryBuilder()
                            ->andWhere(self::ALIAS.'.lvl = 2')
                            ->andWhere(self::ALIAS.'.name LIKE :term')
                            ->setParameter('term', $term.'%')
                            ->orderBy(self::ALIAS.'.name', 'asc')
                            ->getQuery()->getResult();

        $countyArray = array();
        foreach ($counties as $county) {
            $countyArray[] = array('id'=> $county->getId(), 'text' => $county->getName());
        }

        return $countyArray;
    }

    /**
     * Set location for home page in cookie.
     *
     * @param Request $request  Request object.
     * @param object $container Container identifier.
     *
     * @throws NotFoundHttpException
     */
    public function setLocationInCookie($request, $container = null)
    {
        $location = $request->get('location', null);
        if ($location != null) {
            $locationId = $this->getEntityManager()->getRepository('FaEntityBundle:Location')->getIdBySlug($location, $container);

            if (!$locationId) {
                $locationId = $this->getEntityManager()->getRepository('FaEntityBundle:Locality')->getColumnBySlug('id', $location, $container);
            }

            if (!$locationId) {
                throw new NotFoundHttpException('Invalid location.');
            }

            $cookieLocationDetails = json_decode($request->cookies->get('location'), true);
            if (!$cookieLocationDetails) {
                $cookieLocationDetails = array();
            }

            // clear cookie if slug is of uk else change location
            if ($locationId == self::COUNTY_ID) {
                $response = new Response();
                $response->headers->clearCookie('location');
                $response->sendHeaders();

                return json_encode(array(
                    'location' => $locationId,
                    'slug'     => 'uk',
                    'location_text' => 'United Kingdom',
                ));
            } elseif ((!isset($cookieLocationDetails['slug']) || $cookieLocationDetails['slug'] != $location)) {
                $cookieValue = $this->getCookieValue($location, $container, true);

                if (count($cookieValue) && count($cookieValue) !== count(array_intersect($cookieValue, $cookieLocationDetails))) {
                    $response = new Response();
                    $cookieValue = json_encode($cookieValue);

                    $response->headers->clearCookie('location');
                    $response->headers->setCookie(new Cookie('location', $cookieValue, time() + (365*24*60*60*1000), '/', null, false, false));
                    $response->sendHeaders();

                    return $cookieValue;
                }
            }
        }

        return null;
    }

    /**
     * Check whether same town name exists in another county.
     *
     * @param string $location  Name of locality.
     * @param object $container Container interface.
     *
     * @return string
     */
    public function isDuplicateName($name, $container = null)
    {
        if ($container) {
            $culture     = CommonManager::getCurrentCulture($container);
            $cacheKey    = $this->getTableName().'|'.__FUNCTION__.'|'.str_replace(' ', '', $name).'_'.$culture;
            $cachedValue = CommonManager::getCacheVersion($container, $cacheKey);

            if ($cachedValue !== false) {
                return $cachedValue;
            }
        }

        $qb = $this->createQueryBuilder(self::ALIAS)
                   ->select('COUNT('.self::ALIAS.'.id)')
                   ->andWhere(self::ALIAS.'.name =:name')
                   ->setParameter('name', $name)
                   ->andWhere(self::ALIAS.'.lvl = 3 or '.self::ALIAS.'.lvl = 4')
                   ->groupBy(self::ALIAS.'.name');

        $townResult = $qb->getQuery()->getResult();
        $townCount = count($townResult);

        //$townCount = $qb->getQuery()->getSingleScalarResult();

        $isDuplicateName = false;
        if ($townCount > 1) {
            $isDuplicateName = true;
        }

        if ($container) {
            CommonManager::setCacheVersion($container, $cacheKey, $isDuplicateName);
        }

        return $isDuplicateName;
    }
    /**
     * Get name by id.
     *
     * @param integer $id
     * @param string  $container
     *
     * @return string
     */
    public function getNameById($id, $container = null)
    {
        $location = $this->find($id);

        if ($location) {
            return $location->getName();
        }
    }
    /**
     * Get locations array by level.
     *
     * @param integet $level     Level of category.
     * @param object  $container Container identifier.
     *
     * @return array
     */
    public function getLocationByLevelArray($level = 1, $container = null)
    {
        if ($container) {
            $culture     = CommonManager::getCurrentCulture($container);
            $tableName   = $this->getEntityTableName();
            $cacheKey    = $tableName.'|'.__FUNCTION__.'|'.$level.'_'.$culture;
            $cachedValue = CommonManager::getCacheVersion($container, $cacheKey);

            if ($cachedValue !== false) {
                return $cachedValue;
            }
        }

        $locationArray = array();
        $locations    = $this->getLocationByLevel($level);

        foreach ($locations as $location) {
            $locationArray[$location->getId()] = $location->getName();
        }

        if ($container) {
            CommonManager::setCacheVersion($container, $cacheKey, $locationArray);
        }

        return $locationArray;
    }
    /**
     * Get town array by id.
     *
     * @param integet $level     Level of category.
     * @param object  $container Container identifier.
     *
     * @return array
     */
    public function getTownByIdArray($id, $container = null)
    {
        if ($container) {
            $culture     = CommonManager::getCurrentCulture($container);
            $tableName   = $this->getEntityTableName();
            $cacheKey    = $tableName.'|'.__FUNCTION__.'|'.$level.'_'.$culture;
            $cachedValue = CommonManager::getCacheVersion($container, $cacheKey);

            if ($cachedValue !== false) {
                return $cachedValue;
            }
        }

        $locationArray = array();
        $locations = $this->getBaseQueryBuilder()
            ->andWhere(self::ALIAS.'.lvl = 3')
            ->andWhere(self::ALIAS.'.parent = :parent_id')
            ->setParameter('parent_id', $id)
            ->orderBy(self::ALIAS.'.name', 'ASC')
            ->getQuery()
            ->getResult();

        foreach ($locations as $location) {
            $locationArray[$location->getId()] = $location->getName();
        }

        if ($container) {
            CommonManager::setCacheVersion($container, $cacheKey, $locationArray);
        }

        return $locationArray;
    }
    
    /**
     * Get nearest post area by post code.
     *
     * @param string  $postCode Search term.
     *
     * @return object
     */
    public function getNearestAreaByPostLatLong($postCodeStr = null, $townId = null)
    {
        if ($postCodeStr) {
            $nearAreaObj = null;
            $postCode = $this->_em->getRepository('FaEntityBundle:Postcode')->findOneBy(array('post_code' => $postCodeStr, 'town_id' => $townId));
            if (!empty($postCode)) {
                $sql = 'SELECT  ( 3959 * acos( cos( radians('.$postCode->getLatitude().') ) * cos( radians( latitude ) ) * cos( radians( longitude ) - radians('.$postCode->getLongitude().') ) + sin( radians('.$postCode->getLatitude().') ) * sin( radians( latitude ) ) ) ) AS distance, id FROM fridayad_prod.location where lvl=4 HAVING distance < 5 ORDER BY distance LIMIT 0 , 1;';
                
                $stmt = $this->_em->getConnection()->prepare($sql);
                $stmt->execute();
                
                $nearArea = $stmt->fetch();
                if (!empty($nearArea)) {
                    $nearAreaObj = $this->find($nearArea['id']);
                }
            }
            return $nearAreaObj;
        }
    }
    
    /**
     * get Town name for seo either it belongs to area or special area.
     *
     * @param string $location  Name of town.
     * @param object $container Container interface.
     *
     * @return string
     */
    public function getTownLocationNameForSeo($name, $container = null)
    {
        if ($container) {
            $culture     = CommonManager::getCurrentCulture($container);
            $cacheKey    = $this->getTableName().'|'.__FUNCTION__.'|'.str_replace(' ', '', $name).'_'.$culture;
            $cachedValue = CommonManager::getCacheVersion($container, $cacheKey);
            
            if ($cachedValue !== false) {
                return $cachedValue;
            }
        }
        
        $locationName = null;
        $qb = $this->createQueryBuilder(self::ALIAS)
        ->select(self::ALIAS)
        ->andWhere(self::ALIAS.'.name =:name')
        ->setParameter('name', $name)
        ->andWhere(self::ALIAS.'.lvl = 3 or '.self::ALIAS.'.lvl = 4')
        ->setMaxResults(1)
        ;
        $townResult = $qb->getQuery()->getOneOrNullResult();
        
        if (!empty($townResult) &&  !$townResult->getIsSpecialArea() && $townResult->getLvl() == '4') {
            $locationName = $townResult->getName().", ".$townResult->getParent()->getName();
        } else {
            $locationName = $name;
        }
        
        if ($container) {
            CommonManager::setCacheVersion($container, $cacheKey, $locationName);
        }
        
        return $locationName;
    }
    
    /**
     * check location is area.
     *
     * @param string  $location name
     * @param object  $container
     *
     * @return boolean
     */
    public function checkLocationIsArea($location = null, $area = null, $container = null)
    {
        $isArea = false;
        
        if ($location != '' && !preg_match('/^([\d]+,[\d]+)$/', $location) && $area == '') {
            //check town is area
            $isArea = $this->getIslocationArea($location, 'town');
            if (!$isArea) {
                //check postcode belongs to location area
                $postCode = $this->_em->getRepository('FaEntityBundle:Postcode')->getPostCodByLocation($location);
                
                if (!empty($postCode)) {
                    $isArea = $this->getIslocationArea($postCode->getTownId(), 'postcode');
                }
            }
        }
        
        return $isArea;
    }
    
    /**
     * Check whether the location belongs to area or not
     *
     * @param string $location  Name of location or Id.     *
     * @return boolean
     */
    private function getIslocationArea($location = null, $type = '')
    {
        $area = false;
        $town = $this->getBaseQueryBuilder()
        ->where(self::ALIAS.'.name = :name')
        ->setParameter('name', $location)
        ->orWhere(self::ALIAS.'.id = :id')
        ->setParameter('id', $location)
        ->setMaxResults(1)
        ->getQuery()->getOneOrNullResult();
        
        if (!empty($town)) {
            if ($type == 'postcode' && ($town->getId() == self::LONDON_TOWN_ID || $town->getParent()->getId() == self::LONDON_TOWN_ID)) {
                $area = true;
            } elseif ($type == 'town' && $town->getLvl() != 4 && ($town->getId() == self::LONDON_TOWN_ID || $town->getParent()->getId() == self::LONDON_TOWN_ID)) {
                $area = true;
            }
        }
        return $area;
    }
    
    /**
     * Get towns and area based on county location.
     *
     * @param integer $location  Id of location.
     * @param object $container Container interface.
     *
     * @return string
     */
    public function getTownByCounty($location, $container = null)
    {
        $locationText = null;
        $getSolrAdLocationIds = $this->getAdLocationFromSolr($location, $container);
        $q = $this->getBaseQueryBuilder()
        ->where(self::ALIAS.'.id IN (' . implode(', ', $getSolrAdLocationIds) . ')');
        $q->orderBy(self::ALIAS.'.name', 'asc');
        $result = $q->getQuery()->getResult();
        
        return $result;
    }
    
    /**
     * Get towns and area based on county location from Solr.
     *
     * @param integer $location  Id of location.
     * @param object $container Container interface.
     *
     * @return string
     */
    private function getAdLocationFromSolr($locationId = null, $container = null)
    {
        $data = array();
        $solrFieldName = AdSolrFieldMapping::DOMICILE_ID;
        $data['query_filters']['item']['status_id'] = EntityRepository::AD_STATUS_LIVE_ID;
        $data['static_filters']                     = ' AND '.AdSolrFieldMapping::DOMICILE_ID.':'.$locationId;
        $data['facet_fields'] = array('a_l_main_town_id_i' => array('limit' => '5000', 'min_count' => 1),'a_l_area_id_txt' => array('limit' => '5000', 'min_count' => 1));
        // initialize solr search manager service and fetch data based of above prepared search options
        $container->get('fa.solrsearch.manager')->init('ad', '', $data);
        $solrResponse = $container->get('fa.solrsearch.manager')->getSolrResponse();
        
        // fetch result set from solr
        $result = $container->get('fa.solrsearch.manager')->getSolrResponseFacetFields($solrResponse);
        $townArray = array();
        
        if (isset($result['a_l_main_town_id_i'])) {
            $townArray = array_merge($townArray, array_keys(get_object_vars($result['a_l_main_town_id_i'])));
        }
        if (isset($result['a_l_area_id_txt'])) {
            $townArray = array_merge($townArray, array_keys(get_object_vars($result['a_l_area_id_txt'])));
        }
        
        return $townArray;
    }
}
