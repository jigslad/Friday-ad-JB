<?php

/**
 * This file is part of the fa bundle.
 *
 * @copyright Copyright (c) 2014, FMG
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Fa\Bundle\EntityBundle\Repository;

use Doctrine\ORM\EntityRepository as BaseEntityRepository;
use Symfony\Component\DependencyInjection\Alias;
use Symfony\Component\VarDumper\VarDumper;

/**
 This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 *
 * @author Amit Limbadia <amitl@aspl.in>
 * @copyright 2014 Friday Media Group Ltd
 * @version v1.0
 */
class LocationGroupLocationRepository extends BaseEntityRepository
{
    const ALIAS = 'lgl';

    /**
     * Remove location group location based on location group.
     *
     * @param integer $locationGroupId Location group id.
     *
     * @return mixed
     */
    public function removeRecordsByLocationGroupId($locationGroupId)
    {
        $this->createQueryBuilder(self::ALIAS)
        ->delete()
        ->andWhere(sprintf('%s.location_group = %d', self::ALIAS, $locationGroupId))
        ->getQuery()
        ->execute();
    }

    /**
     * Get domicile town array by location group id.
     *
     * @param integer $locationGroupId Location group id.
     *
     * @return array
     */
    public function getDomicileTownArrayByLocationGroupId($locationGroupId)
    {
        $domicileTownIds = array();
        $locations = $this->createQueryBuilder(self::ALIAS)
            ->andWhere(sprintf('%s.location_group = %d', self::ALIAS, $locationGroupId))
            ->getQuery()
            ->getResult();
        $domicileIds = array();
        $townIds = array();
        foreach ($locations as $location) {
            if ($location->getLocationTown()) {
                $townIds[] = $location->getLocationTown()->getId();
            } elseif ($location->getLocationDomicile()) {
                $domicileIds[] = $location->getLocationDomicile()->getId();
            }
        }
        array_unique($domicileIds);
        array_unique($townIds);
        $domicileTownIds = array_merge($townIds, $domicileIds);

        return $this->_em->getRepository('FaEntityBundle:Location')->getLocationKeyValueArrayByIds($domicileTownIds);
    }

    /**
     * Check duplicate town domicile.
     *
     * @param integer $locationGroupId   Location group id.
     * @param array   $domicileTownArray Array of selected domicile, town.
     * @param integer $locationGroupType Location group type id.
     *
     * @return array
     */
    public function checkDuplicateDomicileTownByLocationGroupId($locationGroupId = null, $domicileTownArray = array(), $locationGroupType = null)
    {
        $domicileIdArray = array();
        $townIdArray = array();
        foreach ($domicileTownArray as $selectedId) {
            $explodeResult = explode('_', $selectedId);
            if (count($explodeResult) > 1) {
                $townIdArray[] = $explodeResult[1];
            } else {
                $domicileIdArray[] = $selectedId;
            }
        }

        array_unique($domicileIdArray);
        array_unique($townIdArray);

        $domicileTownIds = array();
        $query = $this->createQueryBuilder(self::ALIAS)
            ->andWhere(self::ALIAS.'.location_group <> '.LocationGroupRepository::NON_PRINT_LOCATION_GROUP_ID);
        if ($locationGroupId) {
            $query->andWhere(sprintf('%s.location_group <> %d', self::ALIAS, $locationGroupId));
        }

        if ($locationGroupType) {
            $query->innerJoin(self::ALIAS.'.location_group', LocationGroupRepository::ALIAS);
            $query->andWhere(sprintf('%s.type = %d', LocationGroupRepository::ALIAS, $locationGroupType));
        }
        $query->andWhere(self::ALIAS.'.location_domicile IN(:domicileIds) OR '.self::ALIAS.'.location_town IN(:townIds)')
            ->setParameter('domicileIds', $domicileIdArray)
            ->setParameter('townIds', $townIdArray);

        $locations = $query->getQuery()
            ->getResult();
        $domicileIds = array();
        $townIds = array();
        foreach ($locations as $location) {
            if ($location->getLocationTown()) {
                $townIds[] = $location->getLocationTown()->getId();
            } elseif ($location->getLocationDomicile()) {
                $domicileIds[] = $location->getLocationDomicile()->getId();
            }
        }

        array_unique($domicileIds);
        array_unique($townIds);
        $domicileTownIds = array_merge($townIds, $domicileIds);

        return $this->_em->getRepository('FaEntityBundle:Location')->getLocationKeyValueArrayByIds($domicileTownIds);
    }

    /**
     * Get town array by location group id.
     *
     * @param integer $locationGroupType Location group type id.
     *
     * @return array
     */
    public function getTownArrayByLocationGroupType($locationGroupType = null)
    {
        $query = $this->createQueryBuilder(self::ALIAS);
        if ($locationGroupType) {
            $query->innerJoin(self::ALIAS.'.location_group', LocationGroupRepository::ALIAS);
            $query->andWhere(sprintf('%s.type = %d', LocationGroupRepository::ALIAS, $locationGroupType))
                ->andWhere(self::ALIAS.'.location_group <> '.LocationGroupRepository::NON_PRINT_LOCATION_GROUP_ID);
        }
        $locations = $query->getQuery()->getResult();
        $townIds = array();
        foreach ($locations as $location) {
            if ($location->getLocationTown()) {
                $townIds[] = $location->getLocationTown()->getId();
            }
        }

        return array_unique($townIds);
    }

    /**
     * Get domicile array by location group id.
     *
     * @param integer $locationGroupId   Location group id.
     * @param integer $locationGroupType Location group type id.
     *
     * @return array
     */
    public function getDomicileArrayByLocationGroupId($locationGroupId = null, $locationGroupType = null)
    {
        $query = $this->createQueryBuilder(self::ALIAS);
        if ($locationGroupId) {
            $query->andWhere(sprintf('%s.location_group <> %d', self::ALIAS, $locationGroupId));
        }
        if ($locationGroupType) {
            $query->innerJoin(self::ALIAS.'.location_group', LocationGroupRepository::ALIAS);
            $query->andWhere(sprintf('%s.type = %d', LocationGroupRepository::ALIAS, $locationGroupType));
        }
        $locations = $query->getQuery()->getResult();
        $domicileIds = array();
        foreach ($locations as $location) {
            if (!$location->getLocationTown() && $location->getLocationDomicile()) {
                $domicileIds[] = $location->getLocationDomicile()->getId();
            }
        }

        return array_unique($domicileIds);
    }
    
    public function getDomicilesTownsOrArrayByLocationGroupId($locationGroupIds = null,$locationGroupType = null) {
        $query = $this->createQueryBuilder(self::ALIAS);
        if ($locationGroupIds) {
            $query->andWhere(self::ALIAS.'.location_group IN(:locationGroupIds)');
            $query->setParameter('locationGroupIds', $locationGroupIds);
        }       
        $locations = $query->getQuery()->getResult();

        $retArray = array();
        foreach ($locations as $location) {
            if ($location->getLocationDomicile() && $locationGroupType=='domicile') {
                $retArray[$location->getLocationDomicile()->getId()] = $location->getLocationDomicile()->getName();
            }
            if ($location->getLocationTown() && $locationGroupType=='town') {
                $retArray[$location->getLocationTown()->getId()] = $location->getLocationTown()->getName();
            }
        }
        return array_unique($retArray);
    }
    
    public function getTownsByLocationGroupDomicileId($locationGroupIds = null,$locationDomiciles = null) {
        $query = $this->createQueryBuilder(self::ALIAS);
        if ($locationGroupIds) {
            $query->andWhere(self::ALIAS.'.location_group IN(:locationGroupIds)');
            $query->andWhere(self::ALIAS.'.location_domicile IN(:locationDomiciles)');
            $query->setParameter('locationGroupIds', $locationGroupIds);
            $query->setParameter('locationDomiciles', $locationDomiciles);
        }
        $locations = $query->getQuery()->getResult();
        
        $retArray = array();
        foreach ($locations as $location) {
            $retArray[$location->getLocationTown()->getId()] = $location->getLocationTown()->getName();           
        }
        return array_unique($retArray);
    }

    /**
     * Get location group id by town id.
     *
     * @param array $townId Array of town ids.
     *
     * @return array
     */
    public function getLocationGroupIdByTownDomicile(array $townId)
    {
        $townId               = array_unique($townId);
        $locationGroupIdArray = array();
        if (count($townId)) {
            $query = $this->createQueryBuilder(self::ALIAS)
                ->select(self::ALIAS.'.id', LocationGroupRepository::ALIAS.'.id as location_group_id')
                ->innerJoin(self::ALIAS.'.location_group', LocationGroupRepository::ALIAS)
                ->andWhere(self::ALIAS.'.location_town IN (:townId)')
                ->setParameter('townId', $townId);

            $locationGroups = $query->getQuery()->getResult();

            if ($locationGroups) {
                foreach ($locationGroups as $locationGroup) {
                    $locationGroupIdArray[] = $locationGroup['location_group_id'];
                }
            }
        }

        return array_unique($locationGroupIdArray);
    }

    /**
     * Get count for location group id.
     *
     * @param array $locationGroupIds Location group id array.
     *
     * @return array
     */
    public function getLocationGroupIdsCountArray($locationGroupIds)
    {
        $locationGroupIdArray = array();
        $query = $this->createQueryBuilder(self::ALIAS)
            ->select('COUNT('.self::ALIAS.'.id) as total', 'IDENTITY('.self::ALIAS.'.location_group) as location_group_id')
            ->andWhere(self::ALIAS.'.location_group IN (:locationGroupIds)')
            ->setParameter('locationGroupIds', $locationGroupIds)
            ->groupBy(self::ALIAS.'.location_group');

        $locationGroups = $query->getQuery()->getResult();

        if ($locationGroups) {
            foreach ($locationGroups as $locationGroup) {
                $locationGroupIdArray[$locationGroup['location_group_id']] = $locationGroup['total'];
            }
        }

        return $locationGroupIdArray;
    }

    /**
     * @return array|\Doctrine\ORM\QueryBuilder
     * @author Akash M. Pai <akash.pai@fridaymediagroup.com>
     */
    public function getPrintLocationGroupLocations()
    {
        try {
            $queryBuilder = $this->createQueryBuilder(self::ALIAS)
                ->where(self::ALIAS . '.location_group != ' . LocationGroupRepository::NON_PRINT_LOCATION_GROUP_ID);
            return $queryBuilder->getQuery()->getResult();
        } catch (\Exception $e) {
            return [];
        }
    }

    /**
     * @return array
     * @author Akash M. Pai <akash.pai@fridaymediagroup.com>
     */
    public function getPrintLocationTownIds()
    {
        $townIds = [];
        if (!empty($resLocationGroupLocations = $this->getPrintLocationGroupLocations())) {
            foreach ($resLocationGroupLocations as $valLocation) {
                $townIds[] = $valLocation->getLocationTown()->getId();
            }
        }
        return $townIds;
    }
    
    public function getChildrenIdsByIds($locationGroupIds)
    {
        $query = $this->createQueryBuilder(self::ALIAS);
        $query->select('IDENTITY('.self::ALIAS.'.location_town) as town_id');
        $query->where(self::ALIAS.'.location_group IN (:locationGroupIds)');
        $query->setParameter('locationGroupIds', $locationGroupIds);
        $childrens = $query->getQuery()->getArrayResult();
        $childrenArray = array();
        
        foreach ($childrens as $children) {
            $childrenArray[] = $children['town_id'];
        }
        
        return $childrenArray;
    }
    
    public function checkIsNurseryGroup($locationId)
    {
        $locationGroupIds = array('14');
        $locationIds = array($locationId);
        $resCount = array();
        
        $query = $this->createQueryBuilder(self::ALIAS);
        $query->select('COUNT('.self::ALIAS.'.id) as total');
        $query->where(self::ALIAS.'.location_group IN (:locationGroupIds)');
        $query->setParameter('locationGroupIds', $locationGroupIds);
        $query->andWhere(self::ALIAS.'.location_town IN (:locationId)');
        $query->setParameter('locationId', $locationIds);
        $resCount = $query->getQuery()->getSingleResult();
        return $resCount['total'];
    }

    /**
     * Get location group id by town ID or domicile ID.
     *
     * @param integer $Id id of town or domicile.
     *
     * @return array
     */
    public function getLocationGroupIdByTownOrDomicileId($Id)
    {
        $query = $this->createQueryBuilder(self::ALIAS)
            ->select(self::ALIAS.'.id', LocationGroupRepository::ALIAS.'.id as location_group_id')
            ->innerJoin(self::ALIAS.'.location_group', LocationGroupRepository::ALIAS)
            ->andWhere(self::ALIAS.'.location_town = (:id)')
            ->setParameter('id', $Id);

        $locationGroups = $query->getQuery()->getResult();
        if ($locationGroups) {
            return $locationGroups[0]['location_group_id'];
        }
        return null;
    }

}
