<?php

/**
 * This file is part of the fa bundle.
 *
 * @copyright Copyright (c) 2014, FMG
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Fa\Bundle\EntityBundle\Repository;

use Gedmo\Tree\Entity\Repository\NestedTreeRepository;
use Symfony\Component\Validator\Constraints\Collection;
use Fa\Bundle\PromotionBundle\Repository\UpsellRepository;
use Fa\Bundle\CoreBundle\Manager\CommonManager;
// use Symfony\Component\Form\Extension\Core\ChoiceList\ObjectChoiceList;
use Fa\Bundle\AdBundle\Solr\AdSolrFieldMapping;
use Gedmo\Sluggable\Util\Urlizer as Urlizer;
use Doctrine\ORM\QueryBuilder;
use Doctrine\ORM\Query;
use Fa\Bundle\EntityBundle\Walker\UseIndexWalker;
use Fa\Bundle\EntityBundle\Repository\LocationRepository;

/**
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 *
 * @author Amit Limbadia <amitl@aspl.in>
 * @copyright 2014 Friday Media Group Ltd
 * @version v1.0
 */
class CategoryRepository extends NestedTreeRepository
{
    use \Fa\Bundle\CoreBundle\Search\Search;

    const ALIAS = 'c';
    const CACHE_TTL = 86400;

    const FOR_SALE_ID  = 2;
    const MOTORS_ID    = 444;
    const JOBS_ID      = 500;
    const SERVICES_ID  = 585;
    const PROPERTY_ID  = 678;
    const ANIMALS_ID   = 725;
    const COMMUNITY_ID = 783;
    const ADULT_ID     = 3411;

    const SHOES_ID = 131;

    const BOATS_ID                   = 445;
    const CARS_ID                    = 456;
    const COMMERCIALVEHICLES_ID      = 457;
    const FARM_ID                    = 458;
    const MOTORBIKES_ID              = 470;
    const MOTORHOMES_AND_CARAVANS_ID = 474;
    const HORSEBOXES_AND_TRAILERS_ID = 467;
    const MOTORS_SERVICES_ID         = 479;
    const PARTS_AND_ACCESSORIES_ID   = 484;

    const MOTORBIKES_MOTORBIKES_ID   = 471;
    const MOTORBIKES_QUAD_BIKES_ID   = 472;
    const MOTORBIKES_MOTOR_SCOOTERS_ID = 473;

    const MOTORHOMES_ID = 475;

    const MOTORHOMES_AND_CARAVANS_CARAVANS_ID = 477;
    const MOTORHOMES_AND_CARAVANS_STATIC_CARAVANS_ID = 478;

    const MOTORS_FARM_TRACTORS_ID = 459;

    const WHATS_ON_ID                  = 784;
    const CLASSES_AND_TUTION_ID        = 803;
    const CLUBS_SOCIETIES_AND_TEAMS_ID = 818;
    const IN_YOUR_AREA_ID              = 821;
    const FRIENDSHIP_AND_DATING_ID     = 824;

    const PROPERTY_FOR_RENT_ID = 679;
    const PROPERTY_FOR_SALE_ID = 698;
    const PROPERTY_SHARE_ID    = 717;

    const FAMILY_AND_CARE_SERVICES_ID   = 586;
    const PROPERTY_AND_HOME_SERVICES_ID = 592;
    const HEALTH_AND_BEAUTY_SERVICES_ID = 646;
    const CELEBRATIONS_AND_SPECIAL_OCCASIONS_ID = 651;

    const BABY_AND_KIDS_ID = 8;
    const CLOTHES_ID = 12;

    const HOME_AND_GARDEN_FURNITURE_ID = 159;

    const FOR_SALE_FASHION                   = 103;
    const FOR_SALE_HOME_AND_GARDEN           = 158;
    const FOR_SALE_LEISURE                   = 361;
    const FOR_SALE_ELECTRONICS               = 56;
    const FOR_SALE_BUSINESS_AND_OFFICE       = 18;
    const FOR_SALE_AGRICULTURAL              = 3;
    const FOR_SALE_BIZARRE_BAZAAR            = 827;
    const FOR_SALE_ANTIQUES_AND_COLLECTABLES = 39;

    const PETS                           = 726;
    const BIRDS                          = 727;
    const CATS_AND_KITTENS               = 728;
    const DOGS_AND_PUPPIES               = 729;
    const EXOTIC_PETS                    = 730;
    const FISH_AND_AQUATICS              = 731;
    const GUINEA_PIGS_AND_SMALL_FURRIES  = 735;
    const INSECTS_AND_SPIDERS            = 741;
    const RABBITS                        = 742;
    const REPTILES_AND_AMPHIBIANS        = 743;
    const OTHER_PETS                     = 748;
    const PET_ACCESSORIES                = 749;
    const PET_SUPPLIES                   = 756;
    const HORSES                         = 758;
    const HORSE_SUPPLIES_AND_ACCESSORIES = 759;
    const HORSE_LIVERY_AND_STABLES       = 764;
    const HORSE_SCHOOLS                  = 765;
    const LIVESTOCK                      = 766;
    const OTHER_LIVESTOCKS               = 777;
    const LIVESTOCK_SUPPLIES             = 778;

    const ADULT_MASSAGE_ID = 4285;
    const ESCORT_SERVICES_ID = 3413;
    const FETISH_AND_ROLE_PLAY_ID = 4286;
    const PHONE_AND_CAM_CHAT_ID = 4287;
    const ADULT_TOP_LOCATION_AT_DETAIL_BY_DISTANCE = 50;
    const GAY_MALE_ESCORT_NAME = 'Gay Male Escorts';
    const ADULT_CONTACTS_ID = 3412;
    const GAY_MALE_ESCORT_ID = 4521;
    const ADULT_INDUSTRY_JOBS_ID = 4522;
    
    //For Distance
    const MOTORS_DISTANCE = 30;
    const OTHERS_DISTANCE = 15;
    const AREA_DISTANCE_DIVISION = 3;
    const MAX_DISTANCE = 200;
    const LONDON_DISTANCE = 30;

    const KEYWORD_DEFAULT = 5;
    const KEYWORD_EXTENDED = 15;

    private $categoryCountArray = array();

    /**
     * Prepare query builder.
     *
     * @param array $data Array of data.
     *
     * @return Doctrine\ORM\QueryBuilder The query builder
     */
    public function getBaseQueryBuilder()
    {
        return $this->createQueryBuilder(self::ALIAS);
    }

    /**
     * Get children by id.
     *
     * @param string $id
     * @param string $orderBy
     *
     * @return Object
     */
    public function getChildrenById($id = null, $orderBy = null)
    {
        $query = $this->createQueryBuilder(self::ALIAS);

        if (!$id) {
            $query->where(self::ALIAS.'.parent IS NULL OR '.self::ALIAS.'.parent = 0 AND '.self::ALIAS.'.status = 1');
        } else {
            $query->where(self::ALIAS.'.parent = '.$id.' AND '.self::ALIAS.'.status = 1');
        }

        if (empty($orderBy)) {
            $query->addOrderBy(self::ALIAS.'.name');
        } else {
            $query->addOrderBy(self::ALIAS. '.' .$orderBy);
        }

        $objResources = $query->getQuery()->getArrayResult();

        return $objResources;
    }

    /**
     * Get categories by level.
     *
     * @param integet $level Level of category
     *
     * @return Collection
     */
    public function getCategoryByLevel($level = 1)
    {
        $query = $this->createQueryBuilder(self::ALIAS)
            ->where(self::ALIAS.'.lvl = '.$level);

        $objResources = $query->getQuery()->getResult();

        return $objResources;
    }

    /**
     * Get categories array by level.
     *
     * @param integet $level     Level of category.
     * @param object  $container Container identifier.
     *
     * @return array
     */
    public function getCategoryByLevelArray($level = 1, $container = null)
    {
        if ($container) {
            $culture     = CommonManager::getCurrentCulture($container);
            $tableName   = $this->getCategoryTableName();
            $cacheKey    = $tableName.'|'.__FUNCTION__.'|'.$level.'_'.$culture;
            $cachedValue = CommonManager::getCacheVersion($container, $cacheKey);

            if ($cachedValue !== false) {
                return $cachedValue;
            }
        }

        $categoryArray = array();
        $categories    = $this->getCategoryByLevel($level);

        foreach ($categories as $category) {
            $categoryArray[$category->getId()] = $category->getName();
        }

        if ($container) {
            CommonManager::setCacheVersion($container, $cacheKey, $categoryArray);
        }

        return $categoryArray;
    }

    /**
     * Get categories by upsell ids.
     *
     * @param array $upsellIds Array of upsell ids.
     *
     * @return Collection
     */
    public function getCategoryByUpsellIds($upsellIds)
    {
        $query = $this->createQueryBuilder(self::ALIAS)
        ->innerJoin(self::ALIAS.'.upsells', UpsellRepository::ALIAS)
        ->where(UpsellRepository::ALIAS.'.id IN (:upsellIds)')
        ->setParameter('upsellIds', $upsellIds);

        $objResources = $query->getQuery()->getResult();

        return $objResources;
    }

    /**
     * Get upsell by category and type.
     *
     * @param array   $categories Array of category ids.
     * @param integer $type       Upsell type.
     * @param integer $upsellId   Upsell id.
     *
     * @return Collection
     */
    public function getUpsellByCategoryAndType($categories, $type, $upsellId = null)
    {
        $query = $this->getBaseQueryBuilder()
            ->innerJoin(self::ALIAS.'.upsells', UpsellRepository::ALIAS)
            ->andWhere(UpsellRepository::ALIAS.'.type = '.$type)
            ->andWhere(self::ALIAS.'.id in(:categories)')
            ->setParameter('categories', $categories)
            ->addGroupBy(self::ALIAS.'.id');

        if ($upsellId) {
            $query->andWhere(UpsellRepository::ALIAS.'.id <> '.$upsellId);
        }
        return $query
            ->getQuery()
            ->getArrayResult();
    }

    /**
     * Get category array by text.
     *
     * @param string $term
     *
     * @return multitype:multitype:string NULL
     */
    public function getCategoryArrayByText($term)
    {
        $categories = $this->createQueryBuilder(self::ALIAS)
        ->andWhere(self::ALIAS.'.name LIKE :term')
        ->andWhere(self::ALIAS.'.lvl > :level')
        ->andWhere(self::ALIAS.'.status = 1')
        ->setParameter('term', $term.'%')
        ->setParameter('level', 0)
        ->getQuery()->getResult();

        $catArray = array();
        foreach ($categories as $cat) {
            if ($cat->getLvl() == 1) {
                $catArray[] = array('id'=> $cat->getId(), 'text' => $cat->getName());
            } else {
                $catArray[] = array('id'=> $cat->getId(), 'text' => $cat->getName()." (".$cat->getParent()->getName().($cat->getParent()->getParent()?', '.$cat->getParent()->getParent()->getName():'').')');
            }
        }
        return $catArray;
    }/**
     * Get category array by id for landing page.
     *
     * @param integer $id
     *
     * @return multitype:multitype:string NULL
     */
    public function getCategoryArraySimpleById($id)
    {
        $categories = $this->createQueryBuilder(self::ALIAS)
        ->andWhere(self::ALIAS.'.parent = :id')
        ->andWhere(self::ALIAS.'.status = 1')
        ->setParameter('id', $id.'%')
        ->getQuery()->getResult();


        $catArray = array($id => 'Categories');
        foreach ($categories as $cat) {
            $catArray[$cat->getId()] = $cat->getName();
        }
        return $catArray;
    }

    /**
     * Get category table name.
     *
     * @return Ambigous <string, multitype:>
     */
    private function getCategoryTableName()
    {
        return $this->_em->getClassMetadata('FaEntityBundle:Category')->getTableName();
    }

    /**
     * Get entity type array.
     *
     * @param integet $categoryId Category id.
     * @param boolean $rootFlag   Get root node flaf.
     * @param object  $container  Container identifier.
     *
     * @return array
     */
    public function getCategoryPathArrayById($categoryId, $rootFlag = false, $container = null)
    {
        if ($container) {
            $culture     = CommonManager::getCurrentCulture($container);
            $tableName   = $this->getCategoryTableName();
            $cacheKey    = $tableName.'|'.__FUNCTION__.'|'.$categoryId.'_'.$rootFlag.'_'.$culture;
            $cachedValue = CommonManager::getCacheVersion($container, $cacheKey);

            if ($cachedValue !== false) {
                return $cachedValue;
            }
        }

        $categoryPathArray = array();

        if ($categoryId) {
            $categoryObj = $this->find($categoryId);

            if ($categoryObj) {
                $categories = $this->getPath($categoryObj);

                foreach ($categories as $category) {
                    if ($rootFlag && $category->getStatus() ==1) {
                        $categoryPathArray[$category->getId()] = $category->getName();
                    } else {
                        if ($category->getLvl() > 0 && $category->getStatus() ==1) {
                            $categoryPathArray[$category->getId()] = $category->getName();
                        }
                    }
                }
            }
        }

        if ($container) {
            CommonManager::setCacheVersion($container, $cacheKey, $categoryPathArray);
        }

        return $categoryPathArray;
    }

    /**
     * Get entity type array.
     *
     * @param integet $categoryId Category id.
     *
     * @return array
     */
    public function getCategoryPathArrayById1($categoryId)
    {
        $categoryPathArray = array();

        if ($categoryId) {
            $categoryObj = $this->find($categoryId);

            if ($categoryObj) {
                $categories = $this->getPath($categoryObj);

                foreach ($categories as $category) {
                    if ($category->getLvl() > 0 && $category->getStatus() ==1) {
                        $categoryPathArray[$category->getId()] = $category->getName();
                    }
                }
            }
        }

        return $categoryPathArray;
    }
    
    /**
     * Get request query string.
     *
     * @param string $queryString.
     *
     * @return boolean
     */
    public function getCategoryNoFollowLink($queryString='', $withoutPhoto=false)
    {
        $followlinkDisplay = false;
        if ($queryString!='') {
            $postData = explode('&', $queryString);
        }
        if (!empty($postData)) {
            foreach ($postData as $key=>$val) {
                if ($withoutPhoto==true && (preg_match('/^item_motors__(.*)/', $val) || preg_match('/^item_animals__(.*)/', $val))) {
                    $followlinkDisplay = true;
                    return $followlinkDisplay;
                } elseif ($withoutPhoto==false && (preg_match('/^item_motors__(.*)/', $val) || preg_match('/^item_animals__(.*)/', $val) || preg_match('/^(.*)items_with_photo/', $val))) {
                    $followlinkDisplay = true;
                    return $followlinkDisplay;
                }
            }
        }
        return $followlinkDisplay;
    }

    /**
     * Get categories childrens array by parent id.
     *
     * @param integet $id parent Category id.
     * @param object  $container Container identifier.
     *
     * @return array
     */
    public function getChildrenKeyValueArrayByParentId($id = null, $container = null)
    {
        if ($container) {
            $culture     = CommonManager::getCurrentCulture($container);
            $tableName   = $this->getCategoryTableName();
            $cacheKey    = $tableName.'|'.__FUNCTION__.'|'.$id.'_'.$culture;
            $cachedValue = CommonManager::getCacheVersion($container, $cacheKey);

            if ($cachedValue !== false) {
                return $cachedValue;
            }
        }

        $childrenArray      = array();
        $otherCategoryArray = array();
        if ($id) {
            $childrens = $this->getBaseQueryBuilder(self::ALIAS)
                         ->where(self::ALIAS.'.parent = '.$id)
                         ->andWhere(self::ALIAS.'.status = 1')
                         ->orderBy(self::ALIAS.'.name', 'asc')
                         ->getQuery()->getArrayResult();

            foreach ($childrens as $children) {
                if (preg_match('/^other/i', $children['name'])) {
                    $otherCategoryArray[$children['id']] = $children['name'];
                } else {
                    $childrenArray[$children['id']] = $children['name'];
                }
            }
        }

        $childrenArray = $childrenArray + $otherCategoryArray;

        if ($container) {
            CommonManager::setCacheVersion($container, $cacheKey, $childrenArray);
        }

        return $childrenArray;
    }

    /**
     * Get nested childrens array by category id.
     *
     * @param integet $categoryId     Parent category id.
     * @param object  $container      Container identifier.
     * @param boolean $withLevelAsKey Level as array key flag.
     *
     * @return array
     */
    public function getNestedChildrenIdsByCategoryId($categoryId, $container = null, $withLevelAsKey = false)
    {
        if ($container) {
            $culture     = CommonManager::getCurrentCulture($container);
            $tableName   = $this->getCategoryTableName();
            $cacheKey    = $tableName.'|'.__FUNCTION__.'|'.$categoryId.'_'.$withLevelAsKey.'_'.$culture;
            $cachedValue = CommonManager::getCacheVersion($container, $cacheKey);

            if ($cachedValue !== false) {
                return $cachedValue;
            }
        }

        $nestedChilrenIds = array();
        $categories = $this->_em->createQuery(
            'SELECT node.id,node.lvl
                FROM '.$this->_entityName.' AS node,
                    '.$this->_entityName.' AS parent
                WHERE node.lft
                BETWEEN parent.lft
                AND parent.rgt
                AND parent.id = '.$categoryId
        )->getResult();

        if (count($categories)) {
            foreach ($categories as $category) {
                if ($withLevelAsKey) {
                    $nestedChilrenIds[] = array('id' => $category['id'], 'level' => $category['lvl']);
                } else {
                    $nestedChilrenIds[] = $category['id'];
                }
            }
        }

        if ($container) {
            CommonManager::setCacheVersion($container, $cacheKey, $nestedChilrenIds);
        }

        return $nestedChilrenIds;
    }

    /**
     * Get nested leaf childrens array by category id.
     *
     * @param integet $categoryId Parent category id.
     * @param object  $container  Container identifier.
     *
     * @return array
     */
    public function getNestedLeafChildrenIdsByCategoryId($categoryId, $container = null)
    {
        if ($container) {
            $culture     = CommonManager::getCurrentCulture($container);
            $tableName   = $this->getCategoryTableName();
            $cacheKey    = $tableName.'|'.__FUNCTION__.'|'.$categoryId.'_'.$culture;
            $cachedValue = CommonManager::getCacheVersion($container, $cacheKey);

            if ($cachedValue !== false) {
                return $cachedValue;
            }
        }

        $nestedChilrenIds = array();
        $categories = $this->_em->createQuery(
            'SELECT node.id
                FROM '.$this->_entityName.' AS node,
                    '.$this->_entityName.' AS parent
                WHERE node.lft
                BETWEEN parent.lft
                AND parent.rgt
                AND parent.id = '.$categoryId.'
                AND node.rgt - node.lft = 1
                AND node.id != '.$categoryId
        )->getResult();

        if (count($categories)) {
            foreach ($categories as $category) {
                $nestedChilrenIds[] = $category['id'];
            }
        }

        if ($container) {
            CommonManager::setCacheVersion($container, $cacheKey, $nestedChilrenIds);
        }

        return $nestedChilrenIds;
    }

    /**
     * Get categories childrens array by parent group.
     *
     * @param integet $id Parent category id.
     *
     * @return array
     */
    public function getNestedChildrenKeyValueArrayByParentId($id = null)
    {
        $childrenArray = array();
        if ($id) {
            $parentNode  = $this->find($id);
            $parentLevel = $parentNode->getLvl();
            $childrens = $this->getNodesHierarchyQuery($parentNode)->getArrayResult();

            foreach ($childrens as $children) {
                $levelDiff    = ($children['lvl'] - $parentLevel);
                $levelSpitter = '';
                if ($levelDiff > 1) {
                    $levelSpitter = str_repeat('&nbsp;', (($levelDiff -1) * 6));
                }
                if ($children['status']==1) {
                    $childrenArray[$children['id']] = html_entity_decode($levelSpitter.$children['name']);
                }
            }
        }

        return $childrenArray;
    }

    /**
     * Get category array.
     *
     * @param array $arr Ad & category id array.
     * @param $rootFlags
     * @param $container
    *
     * @return array
     */
    public function getDisplayCategoryArrayByAdCategoryId($arr = array(), $rootFlag = false, $container = null)
    {
        $displayCategoryArray = array();

        foreach ($arr as $aId => $cId) {
            if ($cId) {
                $displayCategoryArray[$aId] = $this->getCategoryPathArrayById($cId, $rootFlag, $container);
            }
        }

        return $displayCategoryArray;
    }

    /**
     * Get top root node for given category.
     *
     * @param mixed $category category id or categoy object
     *
     * @return array
     */
    public function getRootNodeByCategory($category = null)
    {
        if (!is_object($category)) {
            $category = $this->find($category);
        }

        $root = $category;
        if ($category) {
            $level = $category->getLvl();

            while ($level > 1) {
                $root = $root->getParent();
                $level--;
            }
        }

        return $root;
    }

    /**
     * Move node.
     *
     * @param integer $id
     * @param integer $parentId
     * @param integer $position
     *
     * @return boolean
     */
    public function moveNode($id, $parentId, $position)
    {
        $node = $this->find($id);
        $parent = $this->find($parentId);

        if ($node && $parent) {
            $node->setParent($parent);
            $this->_em->persist($node);
            $this->_em->flush();
            return true;
        }

        return false;
    }

    /**
     * Get categories based on search term.
     *
     * @param string $term      Term.
     * @param object $container Container identifier.
     *
     * @return array
     */
    public function getPostadCategoryArrayByText($term, $container = null)
    {
        $categoryArray      = array();
        $categoryFinalArray = array();
        $limit              = 9;
        $term               = preg_replace('/[^A-Za-z0-9\s]/', '', trim($term));
        $keywords           = explode(' ', strtolower($term));
        
        if (count($keywords)) {
            $keywords                 = array_slice($keywords, 0, 5);
            $bottomLevelCategoryArray = array();
            $parentLevelCategoryArray = array();
            $keywordString            = implode('|', $keywords);
            $keywordsPattern          = '^('.$keywordString.').*$|^.*[[:space:]]('.$keywordString.').*$';
            
            $categories = $this->getBaseQueryBuilder()
            ->andWhere("regexp(".self::ALIAS.".name, '".$keywordsPattern."') != false or regexp(".self::ALIAS.".synonyms_keywords, '".$keywordsPattern."') != false")
            ->andWhere(self::ALIAS.'.lvl > :level')
            ->setParameter('level', 1)
            ->orderBy(self::ALIAS.'.lvl', 'asc')
            ->getQuery()->getResult();
            
            if (count($categories)) {
                foreach ($categories as $category) {
                    $showTwoParentName    = false;
                    $secondRootCategoryId = $this->getSecondRootCategoryId($category->getId(), $container);
                    if ($secondRootCategoryId && in_array($secondRootCategoryId, array(self::CARS_ID, self::COMMERCIALVEHICLES_ID))) {
                        $showTwoParentName = true;
                    }
                    $nestedChildren = $this->getNestedChildrenArrayByParentId($category->getId(), $container, false, $showTwoParentName);
                    if (count($nestedChildren)) {
                        $parentLevelCategoryArray = $parentLevelCategoryArray + $nestedChildren;
                    } else {
                        $parentName = $category->getParent()->getName();
                        if ($showTwoParentName && $category->getParent()->getParent()) {
                            $parentName .= ' ('.$category->getParent()->getParent()->getName().')';
                        }
                        $selfCategoryArray[$category->getId()] = array('name' => $category->getName(), 'parent_name' => $parentName);
                        $bottomLevelCategoryArray = $bottomLevelCategoryArray + $selfCategoryArray;
                    }
                }
                
                // First : check for bottom level categories
                $bottomLevelCategoryIds = array();
                if (count($bottomLevelCategoryArray)) {
                    $bottomLevelCategoryIds = $this->getAdCountSortedCategoryIdsByCategoryArray($bottomLevelCategoryArray, $container);
                    $bottomLevelCategoryIds = array_unique($bottomLevelCategoryIds);
                    
                    // Get categories as per limit
                    $bottomLevelCategoryIds = array_slice($bottomLevelCategoryIds, 0, $limit);
                    
                    $index = 1;
                    foreach ($bottomLevelCategoryIds as $categoryId) {
                        if (isset($bottomLevelCategoryArray[$categoryId])) {
                            $category = $bottomLevelCategoryArray[$categoryId];
                            $categoryArray[] = array('id'=> $categoryId, 'text' => $category['name'], 'text2' => $category['parent_name'], 'index' => $index);
                            $index++;
                        }
                    }
                }
                
                // Second : check for parent level categories if categories found less than limit
                $parentLevelCategoryIds = array();
                if (count($categoryArray) < $limit) {
                    $remainLimit            = ($limit - count($categoryArray));
                    $parentLevelCategoryIds = $this->getAdCountSortedCategoryIdsByCategoryArray($parentLevelCategoryArray, $container);
                    $parentLevelCategoryIds = array_unique($parentLevelCategoryIds);
                    $parentLevelCategoryIds = array_diff($parentLevelCategoryIds, $bottomLevelCategoryIds);
                    
                    // Get parent categories as per remaining limit
                    $parentLevelCategoryIds = array_slice($parentLevelCategoryIds, 0, $remainLimit);
                    
                    $index = 1;
                    foreach ($parentLevelCategoryIds as $categoryId) {
                        if (isset($parentLevelCategoryArray[$categoryId])) {
                            $category = $parentLevelCategoryArray[$categoryId];
                            $categoryArray[] = array('id'=> $categoryId, 'text' => $category['name'], 'text2' => $category['parent_name'], 'index' => $index);
                            $index++;
                        }
                    }
                }
            }
        }
        
        //Remove categories which is disabled to show in paa search category drop down.
        if ($categoryArray && count($categoryArray)) {
            $paaDisabledCategories = $this->getPaaDisabledCategoryIds($container);
            if ($paaDisabledCategories && count($paaDisabledCategories)) {
                foreach ($categoryArray as $key => $value) {
                    if (!in_array($value['id'], $paaDisabledCategories)) {
                        $categoryFinalArray[] = $categoryArray[$key];
                    }
                }
            } else {
                $categoryFinalArray = $categoryArray;
            }
        }
        
        return $categoryFinalArray;
    }

    /**
     * Get category ids based on passed bottom level categories or parent level categories.
     *
     * @param array  $categories Bottom level categories or parent level categories.
     * @param object $container  Container identifier.
     *
     * @return array
     */
    public function getAdCountSortedCategoryIdsByCategoryArray(array $categories, $container)
    {
        $finalCategoryIds = array();
        $categoryIds      = array_keys($categories);

        // Get categories with ad count from cache
        $categoryCountArray = CommonManager::getCacheVersion($container, $this->getCategoryTableName().'|adCount|adPost');

        if ($categoryCountArray && is_array($categoryCountArray) && count($categoryCountArray) < 0) {
            $categoryIds = array_fill_keys($categoryIds, 'dummy');

            // Filter categories which have ads
            $finalCategoryIds = array_intersect_key($categoryCountArray, $categoryIds);

            // Sort categories by higher ad count first
            arsort($finalCategoryIds, true);

            // Get final category ids
            $finalCategoryIds = array_keys($finalCategoryIds);

            // Append (category ids with No ads) to (category ids with ads)
            $finalCategoryIds = $finalCategoryIds + array_keys($categoryIds);
        } else {
            $finalCategoryIds = $categoryIds;
        }

        return $finalCategoryIds;
    }

    /**
     * Get footer categories.
     *
     * @param object $container container identifier
     *
     * @return array
     */
    public function getFooterCategories($container = null, $locationDetails = array())
    {
        $em = $container->get('doctrine')->getManager();
        if ($container) {
            $locationSlug = null;
            if (count($locationDetails) && isset($locationDetails['slug'])) {
                $locationSlug = $locationDetails['slug'];
            }
            if (!$locationSlug) {
                $locationSlug = $em->getRepository('FaEntityBundle:Location')->getSlugById(LocationRepository::COUNTY_ID, $container);
            }
            $culture     = CommonManager::getCurrentCulture($container);
            $tableName   = $this->getCategoryTableName();
            $cacheKey    = $tableName.'|'.__FUNCTION__.'|'.$locationSlug.'|'.$culture;
            $cachedValue = CommonManager::getCacheVersion($container, $cacheKey);

            if ($cachedValue !== false) {
                return $cachedValue;
            }
        }

        $leafLevelCategoryCount = array();

        $locationId = $em->getRepository('FaEntityBundle:Location')->getIdBySlug($locationSlug, $container);

        if (!$locationId) {
            $locationId = $em->getRepository('FaEntityBundle:Locality')->getColumnBySlug('id', $locationSlug, $container);
        }
        $data                 = array();
        if ($locationId && $locationId != LocationRepository::COUNTY_ID) {
            $data['query_filters']['item']['location'] = $locationId.'|15';
        }
        if (count($locationDetails)) {
            if (isset($locationDetails['latitude']) && isset($locationDetails['longitude'])) {
                if ($locationId && $locationId != LocationRepository::COUNTY_ID) {
                    $geoDistParams = array('sfield' => 'store', 'pt' => $locationDetails['latitude'] . ',' . $locationDetails['longitude'], 'd' => 15);
                } else {
                    $geoDistParams = array('sfield' => 'store', 'pt' => $locationDetails['latitude'] . ',' . $locationDetails['longitude']);
                }
                $container->get('fa.solrsearch.manager')->setGeoDistQuery($geoDistParams);
            }
        }

        $data['query_filters']['item']['status_id'] = EntityRepository::AD_STATUS_LIVE_ID;
        $data['facet_fields'] = array('a_category_id_i' => array('limit' => '5000'), 'a_parent_category_lvl_1_id_i' => array('limit' => '5000'), 'a_parent_category_lvl_2_id_i' => array('limit' => '5000'), 'a_parent_category_lvl_3_id_i' => array('limit' => '5000'), 'a_parent_category_lvl_4_id_i' => array('limit' => '5000'), 'a_parent_category_lvl_5_id_i' => array('limit' => '5000'), 'a_parent_category_lvl_6_id_i' => array('limit' => '5000'));

        // initialize solr search manager service and fetch data based of above prepared search options
        $container->get('fa.solrsearch.manager')->init('ad', '', $data);
        $solrResponse = $container->get('fa.solrsearch.manager')->getSolrResponse();

        // fetch result set from solr
        $result = $container->get('fa.solrsearch.manager')->getSolrResponseFacetFields($solrResponse);
        $categoryCountArray = $container->get('fa.solrsearch.manager')->getSolrResponseDocsCount($solrResponse);
        //$categoryCountArray = get_object_vars($result['a_parent_category_lvl_1_id_i']) + get_object_vars($result['a_parent_category_lvl_2_id_i']) + get_object_vars($result['a_parent_category_lvl_3_id_i']) + get_object_vars($result['a_parent_category_lvl_4_id_i']) + get_object_vars($result['a_parent_category_lvl_5_id_i']) + get_object_vars($result['a_parent_category_lvl_6_id_i']);
        $leafLevelCategoryCount = get_object_vars($result['a_category_id_i']);

        $this->categoryCountArray = $categoryCountArray;

        $footerCategoryArray = array();

        $query = $this->_em->createQuery(
            'SELECT parent.id,parent.name,parent.lvl,parent.slug,parent.full_slug,parent.display_on_footer
                FROM '.$this->_entityName.' AS node,
                    '.$this->_entityName.' AS parent
                WHERE node.lft BETWEEN parent.lft AND parent.rgt
                    AND node.display_on_footer = 1
                    AND parent.lvl <> 0
                    AND parent.status = 1
                ORDER BY node.lft, parent.lvl'
        );
        
        $query->setHint(Query::HINT_CUSTOM_OUTPUT_WALKER, 'Fa\Bundle\EntityBundle\Walker\UseIndexWalker');
        $query->setHint(UseIndexWalker::HINT_USE_INDEX, 'idx_lft,idx_status');
        
        $categories = $query->getResult();

        $rootCategoryId     = null;
        $rootCategorySlug   = null;
        $otherCategoryArray = array();
        if (count($categories)) {
            foreach ($categories as $index => $category) {
                $count = (isset($categoryCountArray[$category['id']]) ? $categoryCountArray[$category['id']] : 0);

                if ($count < 1) {
                    $count = (isset($leafLevelCategoryCount[$category['id']]) ? $leafLevelCategoryCount[$category['id']] : 0);
                    if ($count < 1) {
                        continue;
                    }
                }

                if ($category['lvl'] == 1 && !array_key_exists($category['id'], $footerCategoryArray)) {
                    if (isset($categoryArray) && count($categoryArray)) {
                        $footerCategoryArray[$rootCategoryId]['children'][$index] = $this->getCategorySlugByParentArray($categoryArray, $rootCategorySlug);
                        $categoryArray = array();
                    }

                    $rootCategoryId   = $category['id'];
                    $rootCategorySlug = $category['slug'];
                    
                    $footerCategoryArray[$rootCategoryId]['category_id']        = $category['id'];
                    $footerCategoryArray[$rootCategoryId]['category_name']      = $category['name'];
                    $footerCategoryArray[$rootCategoryId]['category_slug']      = $rootCategorySlug;
                    $footerCategoryArray[$rootCategoryId]['category_full_slug'] = $category['full_slug'];
                    $footerCategoryArray[$rootCategoryId]['count']              = $count;
                    $footerCategoryArray[$rootCategoryId]['root_category_id']   = $rootCategoryId;
                } elseif ($category['lvl'] == 1 && array_key_exists($category['id'], $footerCategoryArray)) {
                    if (isset($categoryArray) && count($categoryArray)) {
                        $footerCategoryArray[$rootCategoryId]['children'][$index] = $this->getCategorySlugByParentArray($categoryArray, $rootCategorySlug);
                        $categoryArray = array();
                    }
                } elseif ($category['display_on_footer']) {
                    if (preg_match('/^other/i', $category['name'])) {
                        $otherCategoryArray[$rootCategoryId]['children'][$index] = array('id' => $category['id'], 'category_name' => $category['name'], 'category_slug' => $category['slug'], 'category_full_slug' => $category['full_slug'], 'count' => $count);
                        continue;
                    }

                    $categoryArray[] = array('id' => $category['id'], 'category_name' => $category['name'], 'category_slug' => $category['slug'], 'category_full_slug' => $category['full_slug'], 'count' => $count);
                    if ($index == (count($categories) -1)) {
                        $footerCategoryArray[$rootCategoryId]['children'][$index] = $this->getCategorySlugByParentArray($categoryArray, $rootCategorySlug);
                        $categoryArray = array();
                    }
                }
            }
        }

        if (count($footerCategoryArray)) {
            foreach ($footerCategoryArray as $categoryId => $footerCategory) {
                if (isset($footerCategory['children']) && count($footerCategory['children'])) {
                    usort(
                        $footerCategory['children'],
                        function ($a, $b) {
                            return strcmp($a["category_name"], $b["category_name"]);
                        }
                    );
                    if (isset($otherCategoryArray[$categoryId]['children'])) {
                        $footerCategoryArray[$categoryId]['children'] = array_merge($footerCategory['children'], $otherCategoryArray[$categoryId]['children']);
                    } else {
                        $footerCategoryArray[$categoryId]['children'] = $footerCategory['children'];
                    }
                }
            }
        }

        //check for all main categories
        $mainCategories = $this->getCategoryByLevel(1);
        foreach ($mainCategories as $mainCategoryObj) {
            if ($mainCategoryObj->getDisplayOnFooter() && !isset($footerCategoryArray[$mainCategoryObj->getId()])) {
                $footerCategoryArray[$mainCategoryObj->getId()]['category_id'] = $mainCategoryObj->getId();
                $footerCategoryArray[$mainCategoryObj->getId()]['category_name'] = $mainCategoryObj->getName();
                $footerCategoryArray[$mainCategoryObj->getId()]['children'] = array();
                $footerCategoryArray[$mainCategoryObj->getId()]['category_slug'] = $this->getSlugById($mainCategoryObj->getId(), $container);
                $footerCategoryArray[$mainCategoryObj->getId()]['category_full_slug'] = $this->getFullSlugById($mainCategoryObj->getId(), $container);
                $footerCategoryArray[$mainCategoryObj->getId()]['root_category_id']   = $mainCategoryObj->getId();
            }
        }

        usort($footerCategoryArray, array($this, "compareByName"));

        if ($container) {
            CommonManager::setCacheVersion($container, $cacheKey, $footerCategoryArray, self::CACHE_TTL);
        }

        return $footerCategoryArray;
    }

    /**
     * Compare by name.
     *
     * @param integer $a Array element.
     * @param integer $b Array element.
     *
     * @return number
     */
    private function compareByName($a, $b)
    {
        return strcmp($a["category_name"], $b["category_name"]);
    }
    /**
     * Get category slug by parent array.
     *
     * @param array  $categoryArray
     * @param string $rootCategorySlug
     *
     * @return array
     */
    private function getCategorySlugByParentArray($categoryArray, $rootCategorySlug)
    {
        $slug = '';
        foreach ($categoryArray as $categoryValue) {
            $slug .= $categoryValue['category_slug'].'/';
        }
        $lastElement = end($categoryArray);
        $lastElement['category_slug'] = $rootCategorySlug.'/'.trim($slug, '/');

        return $lastElement;
    }

    /**
     * Get max category level.
     *
     * @param object $container container identifier
     *
     * @return integer
     */
    public function getMaxLevel($container = null)
    {
        if ($container) {
            $tableName   = $this->getCategoryTableName();
            $cacheKey    = $tableName.'|'.__FUNCTION__;
            $cachedValue = CommonManager::getCacheVersion($container, $cacheKey);

            if ($cachedValue !== false) {
                return $cachedValue;
            }
        }

        $maxLevel = $this->getBaseQueryBuilder()->select('MAX('.self::ALIAS.'.lvl)')->getQuery()->getSingleScalarResult();

        if ($container) {
            CommonManager::setCacheVersion($container, $cacheKey, $maxLevel);
        }

        return $maxLevel;
    }

    /**
     * Has children.
     *
     * @param string $categoryId Category id
     * @param object $container  Container identifier.
     *
     * @return boolean
     */
    public function hasChildren($categoryId = null, $container = null)
    {
        $children = $this->getChildrenKeyValueArrayByParentId($categoryId, $container);

        if (count($children)) {
            return true;
        }

        return false;
    }

    /**
     * Get footer categories.
     *
     * @param object $container container identifier
     *
     * @return array
     */
    public function getHeaderCategories($container = null, $locationDetails = array())
    {
        $em = $container->get('doctrine')->getManager();
        if ($container) {
            $locationSlug = null;
            if (!empty($locationDetails) && isset($locationDetails['slug'])) {
                $locationSlug = $locationDetails['slug'];
            }
            if (!$locationSlug) {
                $locationSlug = $em->getRepository('FaEntityBundle:Location')->getSlugById(LocationRepository::COUNTY_ID, $container);
            }
            $culture     = CommonManager::getCurrentCulture($container);
            $tableName   = $this->getCategoryTableName();
            $cacheKey    = $tableName.'|'.__FUNCTION__.'|'.$locationSlug.'|'.$culture;
            $cachedValue = CommonManager::getCacheVersion($container, $cacheKey);

            if ($cachedValue !== false) {
                return $cachedValue;
            }
        }

        $leafLevelCategoryCount = array();
        if (is_array($this->categoryCountArray) && count($this->categoryCountArray)) {
            $categoryCountArray = $this->categoryCountArray;
        } else {
            $locationId = $em->getRepository('FaEntityBundle:Location')->getIdBySlug($locationSlug, $container);

            if (!$locationId) {
                $locationId = $em->getRepository('FaEntityBundle:Locality')->getColumnBySlug('id', $locationSlug, $container);
            }
            $data                 = array();
            $data['query_filters']['item']['status_id'] = EntityRepository::AD_STATUS_LIVE_ID;
            if ($locationId && $locationId != LocationRepository::COUNTY_ID) {
                $data['query_filters']['item']['location'] = $locationId.'|15';
            }
            if (!empty($locationDetails)) {
                if (isset($locationDetails['latitude']) && isset($locationDetails['longitude'])) {
                    if ($locationId && $locationId != LocationRepository::COUNTY_ID) {
                        $geoDistParams = array('sfield' => 'store', 'pt' => $locationDetails['latitude'].','.$locationDetails['longitude'], 'd' => 15);
                    } else {
                        $geoDistParams = array('sfield' => 'store', 'pt' => $locationDetails['latitude'].','.$locationDetails['longitude']);
                    }
                    $container->get('fa.solrsearch.manager')->setGeoDistQuery($geoDistParams);
                }
            }
            $data['facet_fields'] = array('a_category_id_i' => array('limit' => '5000'),'a_parent_category_lvl_1_id_i' => array('limit' => '5000'), 'a_parent_category_lvl_2_id_i' => array('limit' => '5000'), 'a_parent_category_lvl_3_id_i' => array('limit' => '5000'), 'a_parent_category_lvl_4_id_i' => array('limit' => '5000'), 'a_parent_category_lvl_5_id_i' => array('limit' => '5000'), 'a_parent_category_lvl_6_id_i' => array('limit' => '5000'));

            // initialize solr search manager service and fetch data based of above prepared search options
            $container->get('fa.solrsearch.manager')->init('ad', '', $data);
            $solrResponse = $container->get('fa.solrsearch.manager')->getSolrResponse();

            // fetch result set from solr
            $result = $container->get('fa.solrsearch.manager')->getSolrResponseFacetFields($solrResponse);
            $categoryCountArray = $container->get('fa.solrsearch.manager')->getSolrResponseDocsCount($solrResponse);
            //$categoryCountArray = get_object_vars($result['a_parent_category_lvl_1_id_i']) + get_object_vars($result['a_parent_category_lvl_2_id_i']) + get_object_vars($result['a_parent_category_lvl_3_id_i']) + get_object_vars($result['a_parent_category_lvl_4_id_i']) + get_object_vars($result['a_parent_category_lvl_5_id_i']) + get_object_vars($result['a_parent_category_lvl_6_id_i']);
            $leafLevelCategoryCount = get_object_vars($result['a_category_id_i']);

            $this->categoryCountArray = $categoryCountArray;
        }

        $tableName = $this->_em->getClassMetadata('FaEntityBundle:Category')->getTableName();
        $headerCategoryArray = array();
        $query = 'SELECT parent.id,parent.name,parent.lvl,parent.slug,parent.parent_id,parent.full_slug,node.include_as_main_category_in_header,parent.is_children_header_sortable,node.header_sort_order
                FROM '.$tableName.' AS node,
                    '.$tableName.' AS parent FORCE INDEX (idx_lft,idx_status)
                WHERE node.lft BETWEEN parent.lft AND parent.rgt
                    AND parent.lvl <> 0
                    AND parent.status = 1
                ORDER BY node.lft, parent.lvl';
        $stmt = $this->_em->getConnection()->prepare($query);
        $stmt->execute();
        $categories         = $stmt->fetchAll();
        $categoryClassArray = $this->getHeaderCategoryClassArray();

        if (count($categories)) {
            foreach ($categories as $index => $category) {
                $count = (isset($categoryCountArray[$category['id']]) ? $categoryCountArray[$category['id']] : 0);

                if ($count < 1) {
                    $count = (isset($leafLevelCategoryCount[$category['id']]) ? $leafLevelCategoryCount[$category['id']] : 0);
                    if ($count < 1) {
                        continue;
                    }
                }

                $categoryArray = array('name' => $category['name'], 'id' => $category['id'], 'slug' => $category['slug'], 'count' => $count, 'full_slug' => $category['full_slug'], 'children' => array(),'header_sortable'=>$category['is_children_header_sortable'],'sort_ord'=> $category['header_sort_order'] );

                if ($category['lvl'] == 1 && !array_key_exists($category['id'], $headerCategoryArray)) {
                    if (isset($categoryClassArray[$category['id']])) {
                        $categoryArray['class'] = $categoryClassArray[$category['id']];
                    }
                    $headerCategoryArray[$category['id']] = $categoryArray;
                    $categoryId1 = $category['id'];
                } elseif (($category['lvl'] == 2 || ($category['lvl'] == 3 && $category['include_as_main_category_in_header'] == 1)) && !array_key_exists($category['id'], $headerCategoryArray[$categoryId1]['children'])) {
                    $headerCategoryArray[$categoryId1]['children'][$category['id']] = $categoryArray;
                    $categoryId2 = $category['id'];
                } elseif ($category['lvl'] == 3 && !array_key_exists($category['id'], $headerCategoryArray[$categoryId1]['children'][$categoryId2]['children'])) {
                    $headerCategoryArray[$categoryId1]['children'][$categoryId2]['children'][$category['id']] = $categoryArray;
                    $categoryId3 = $category['id'];
                    asort($headerCategoryArray[$categoryId1]['children'][$categoryId2]['children']);
                } elseif ($category['lvl'] == 4 && !array_key_exists($category['id'], $headerCategoryArray[$categoryId1]['children'][$categoryId2]['children'][$categoryId3]['children'])) {
                    $headerCategoryArray[$categoryId1]['children'][$categoryId2]['children'][$categoryId3]['children'][$category['id']] = $categoryArray;
                    $categoryId4 = $category['id'];
                    asort($headerCategoryArray[$categoryId1]['children'][$categoryId2]['children'][$categoryId3]['children']);
                } elseif ($category['lvl'] == 5 && !array_key_exists($category['id'], $headerCategoryArray[$categoryId1]['children'][$categoryId2]['children'][$categoryId3]['children'][$categoryId4]['children'])) {
                    $headerCategoryArray[$categoryId1]['children'][$categoryId2]['children'][$categoryId3]['children'][$categoryId4]['children'][$category['id']] = $categoryArray;
                    $categoryId5 = $category['id'];
                    asort($headerCategoryArray[$categoryId1]['children'][$categoryId2]['children'][$categoryId3]['children'][$categoryId4]['children']);
                } elseif ($category['lvl'] == 6 && !array_key_exists($category['id'], $headerCategoryArray[$categoryId1]['children'][$categoryId2]['children'][$categoryId3]['children'][$categoryId4]['children'][$categoryId5]['children'])) {
                    $headerCategoryArray[$categoryId1]['children'][$categoryId2]['children'][$categoryId3]['children'][$categoryId4]['children'][$categoryId5]['children'][$category['id']] = $categoryArray;
                    $categoryId6 = $category['id'];
                    asort($headerCategoryArray[$categoryId1]['children'][$categoryId2]['children'][$categoryId3]['children'][$categoryId4]['children'][$categoryId5]['children']);
                }
            }
        }

        // Put cars category at first in motors
        if (count($headerCategoryArray)) {
            if (isset($headerCategoryArray[self::MOTORS_ID]) && isset($headerCategoryArray[self::MOTORS_ID]['children'])) {
                $carsCategoryArray   = array();
                $motorsCategoryArray = array();
                foreach ($headerCategoryArray[self::MOTORS_ID]['children'] as $categoryId => $motorsChildCategoriesArray) {
                    if ($categoryId == self::CARS_ID) {
                        $carsCategoryArray[$categoryId] = $motorsChildCategoriesArray;
                    } else {
                        $motorsCategoryArray[$categoryId] = $motorsChildCategoriesArray;
                    }
                }

                $headerCategoryArray[self::MOTORS_ID]['children'] = ($carsCategoryArray + $motorsCategoryArray);
            }

            if (isset($headerCategoryArray[self::ANIMALS_ID]['header_sortable']) && $headerCategoryArray[self::ANIMALS_ID]['header_sortable']==1) {
                $headerCategoryArray[self::ANIMALS_ID]['children'] = CommonManager::msort($headerCategoryArray[self::ANIMALS_ID]['children'], 'sort_ord');
            }
        }

        //check for all main categories
        $mainCategories = $this->getCategoryByLevelArray(1, $container);
        foreach ($mainCategories as $mainCategoryId => $mainCategoryName) {
            if (!isset($headerCategoryArray[$mainCategoryId])) {
                $headerCategoryArray[$mainCategoryId]['name'] = $mainCategoryName;
                $headerCategoryArray[$mainCategoryId]['children'] = array();
                $headerCategoryArray[$mainCategoryId]['id'] = $mainCategoryId;
                $headerCategoryArray[$mainCategoryId]['slug'] = $this->getSlugById($mainCategoryId, $container);
                $headerCategoryArray[$mainCategoryId]['full_slug'] = $this->getFullSlugById($mainCategoryId, $container);
            }
        }

        ksort($headerCategoryArray);

        if ($container) {
            CommonManager::setCacheVersion($container, $cacheKey, $headerCategoryArray, self::CACHE_TTL);
        }

        return $headerCategoryArray;
    }

    /**
     * Get header category class array.
     *
     * @return multitype:string
     */
    public function getHeaderCategoryClassArray()
    {
        $categoryClassArray = array();
        $categoryClassArray[self::FOR_SALE_ID]  = 'mob-forsale';
        $categoryClassArray[self::MOTORS_ID]    = 'mob-motors';
        $categoryClassArray[self::JOBS_ID]      = 'mob-jobs';
        $categoryClassArray[self::SERVICES_ID]  = 'mob-services';
        $categoryClassArray[self::PROPERTY_ID]  = 'mob-property';
        $categoryClassArray[self::ANIMALS_ID]   = 'mob-animals';
        $categoryClassArray[self::COMMUNITY_ID] = 'mob-community';
        $categoryClassArray[self::ADULT_ID]     = 'mob-adult';

        return $categoryClassArray;
    }
    
    public function getHeaderAdultCategoryClassArray()
    {
        $categoryClassArray = array();
        $categoryClassArray[self::ADULT_ID]     = 'mob-adult';
        $categoryClassArray[self::ADULT_MASSAGE_ID]     = 'mob-adul-massage';
        $categoryClassArray[self::ESCORT_SERVICES_ID]     = 'mob-adul-escorts';
        $categoryClassArray[self::FETISH_AND_ROLE_PLAY_ID]     = 'mob-adul-fetish-role';
        $categoryClassArray[self::GAY_MALE_ESCORT_ID]     = 'mob-adul-gay-male';
        $categoryClassArray[self::ADULT_INDUSTRY_JOBS_ID]     = 'mob-adul-industry-jobs';
        $categoryClassArray[self::ADULT_CONTACTS_ID]     = 'mob-adul-contacts';
        return $categoryClassArray;
    }

    /**
     * Get categories childrens array by parent id.
     *
     * @param integer $categoryId        Parent category id.
     * @param object  $container         Container identifier.
     * @param boolean $generate          Flag for generate cache forcefully or not.
     * @param boolean $showTwoParentName Flag for show two parent names in list.
     *
     * @return array
     */
    public function getNestedChildrenArrayByParentId($categoryId = null, $container = null, $generate = false, $showTwoParentName = false)
    {
        if ($container) {
            $culture     = $generate === true ? $container->getParameter('locale') : CommonManager::getCurrentCulture($container);
            $tableName   = $this->getCategoryTableName();
            $cacheKey    = $tableName.'|'.__FUNCTION__.'|'.$categoryId.'_'.$showTwoParentName.'_'.$culture;
            $cachedValue = CommonManager::getCacheVersion($container, $cacheKey);

            if ($cachedValue !== false && $generate !== true) {
                return $cachedValue;
            }
        }

        $childrenArray         = array();
        $nestedLeafChildrenIds = $this->getNestedLeafChildrenIdsByCategoryId($categoryId, $container);
        if (count($nestedLeafChildrenIds)) {
            $children = $this->createQueryBuilder(self::ALIAS)
                             ->where(self::ALIAS.'.id IN (:category_ids)')
                             ->setParameter('category_ids', $nestedLeafChildrenIds)
                             ->getQuery()->getResult();

            foreach ($children as $child) {
                $parentName = $child->getParent()->getName();
                if ($showTwoParentName && $child->getParent()->getParent()) {
                    $parentName .= ' ('.$child->getParent()->getParent()->getName().')';
                }

                $childrenArray[$child->getId()] = array('name' => $child->getName(), 'parent_name' => $parentName);
            }
        }

        if ($container) {
            CommonManager::setCacheVersion($container, $cacheKey, $childrenArray);
        }

        return $childrenArray;
    }

    /**
     * Add user id filter to existing query object
     *
     * @param integer $id User id.
     */
    protected function addIdFilter($id = null)
    {
        if ($id) {
            if (!is_array($id)) {
                $id = array($id);
            }

            $id = array_filter($id);
            if (count($id)) {
                $categoryNestedArray = array();
                foreach ($id as $categoryId) {
                    $nestedChildren = $this->getNestedChildrenIdsByCategoryId($categoryId);
                    if (count($nestedChildren)) {
                        $categoryNestedArray = $categoryNestedArray + $nestedChildren;
                    }
                }

                $id = $categoryNestedArray;
                $this->queryBuilder->andWhere($this->getRepositoryAlias().'.id IN (:'.$this->getRepositoryAlias().'_id'.')');
                $this->queryBuilder->setParameter($this->getRepositoryAlias().'_id', $id);
            }
        }
    }

    /**
     * Get categories by level.
     *
     * @param string  $slug      Full slug.
     * @param object  $container Container identifier.
     * @param boolean $generate  Flag for generate cache forcefully or not.
     *
     * @return array
     */
    public function getCategoryByFullSlug($slug, $container = null, $generate = false)
    {
        if ($slug) {
            if ($container) {
                $tableName   = $this->getCategoryTableName();
                $cacheKey    = $tableName.'|'.__FUNCTION__.'|'.$slug;
                $cachedValue = CommonManager::getCacheVersion($container, $cacheKey);

                if ($cachedValue !== false && $generate !== true) {
                    return $cachedValue;
                }
            }

            $query = $this->createQueryBuilder(self::ALIAS)
            ->where(self::ALIAS.'.full_slug = :full_slug')
            ->setParameter('full_slug', $slug);

            $objResources = $query->getQuery()->getArrayResult();

            if ($objResources) {
                if ($container) {
                    CommonManager::setCacheVersion($container, $cacheKey, $objResources[0]);
                }

                return $objResources[0];
            }

            return null;
        }
    }

    /**
     * Get category's full slug by slug.
     *
     * @param string  $slug      Full slug.
     * @param object  $container Container identifier.
     * @param boolean $generate  Flag for generate cache forcefully or not.
     *
     * @return array
     */
    public function getCategoryByFullSlugBySlug($slug, $container = null)
    {
        if ($slug) {
            if ($container) {
                $tableName   = $this->getCategoryTableName();
                $cacheKey    = $tableName.'|'.__FUNCTION__.'|'.$slug;
                $cachedValue = CommonManager::getCacheVersion($container, $cacheKey);

                if ($cachedValue !== false) {
                    return $cachedValue;
                }
            }

            $query = $this->createQueryBuilder(self::ALIAS)
            ->where(self::ALIAS.'.slug = :slug')
            ->setParameter('slug', $slug)
            ->setMaxResults(1);

            $objResources = $query->getQuery()->getArrayResult();

            if ($objResources) {
                if ($container) {
                    CommonManager::setCacheVersion($container, $cacheKey, $objResources[0]['full_slug']);
                }

                return $objResources[0]['full_slug'];
            }

            return null;
        }
    }

    /**
     * Get categories by level.
     *
     * @param string $slug      Full slug.
     * @param object $container Container identifier.
     *
     * @return Collection
     */
    public function getCategoryArrayById($id, $container = null)
    {
        if ($container) {
            $tableName   = $this->getCategoryTableName();
            $cacheKey    = $tableName.'|'.__FUNCTION__.'|'.$id;
            $cachedValue = CommonManager::getCacheVersion($container, $cacheKey);

            if ($cachedValue !== false) {
                return $cachedValue;
            }
        }

        $query = $this->createQueryBuilder(self::ALIAS)
        ->where(self::ALIAS.'.id = :id')
        ->setParameter('id', $id);

        $objResources = $query->getQuery()->getArrayResult();

        if ($objResources) {
            if ($container) {
                CommonManager::setCacheVersion($container, $cacheKey, $objResources[0]);
            }

            return $objResources[0];
        }
    }

    /**
     * Get name of root category.
     *
     * @param integet $categoryId  Category id.
     * @param object  $container   Container identifier.
     * @param boolean $isCamelCase Flag for get category name in camel case.
     *
     * @return mixed
     */
    public function getRootCategoryName($categoryId, $container = null, $isCamelCase = false)
    {
        if ($container) {
            $tableName   = $this->getCategoryTableName();
            $cacheKey    = $tableName.'|'.__FUNCTION__.'|'.$categoryId . '|' . $isCamelCase;
            $cachedValue = CommonManager::getCacheVersion($container, $cacheKey);

            if ($cachedValue !== false) {
                return $cachedValue;
            }
        }

        $categoryPath = $this->getCategoryPathArrayById($categoryId, false, $container);
        $categories   = array_keys($categoryPath);

        if (isset($categories[0]) && $categories[0]) {
            $name = CommonManager::getCategoryClassNameById($categories[0], $isCamelCase);

            if ($container) {
                CommonManager::setCacheVersion($container, $cacheKey, $name);
            }
            return $name;
        }

        return null;
    }

    /**
     * Get id of root category.
     *
     * @param integet $categoryId Category id.
     * @param object  $container  Container identifier.
     *
     * @return mixed
     */
    public function getRootCategoryId($categoryId, $container = null)
    {
        $categoryPath = $this->getCategoryPathArrayById($categoryId, false, $container);
        $categories   = array_keys($categoryPath);

        if (isset($categories[0]) && $categories[0]) {
            return $categories[0];
        }

        return null;
    }

    /**
     * Get id of second root category.
     *
     * @param integet $categoryId Category id.
     * @param object  $container  Container identifier.
     *
     * @return mixed
     */
    public function getSecondRootCategoryId($categoryId, $container = null)
    {
        $categoryPath = $this->getCategoryPathArrayById($categoryId, false, $container);
        $categories   = array_keys($categoryPath);

        if (isset($categories[1]) && $categories[1]) {
            return $categories[1];
        }

        return null;
    }

    /**
     * Get id of root category.
     *
     * @param integer $categoryId Category id.
     * @param string  $level
     * @param object  $container  Container identifier.
     *
     * @return mixed
     */
    public function getCategoryIdByLevel($categoryId, $level, $container = null)
    {
        $categoryPath = $this->getCategoryPathArrayById($categoryId, false, $container);
        $categories   = array_keys($categoryPath);

        if (isset($categories[$level]) && $categories[$level]) {
            return $categories[$level];
        }

        return null;
    }

    /**
     * Get slug by id.
     *
     * @param integer $id        Category id.
     * @param object  $container Container identifier.
     *
     * @return string
     */
    public function getFullSlugById($id, $container = null)
    {
        if ($container) {
            $cacheKey = 'EntityCacheManager'.'|'.'getEntitySlugById'.'|'.'FaEntityBundle:Category'.'_'.$id;
            $cachedValue = CommonManager::getCacheVersion($container, $cacheKey);

            if ($cachedValue !== false) {
                return $cachedValue;
            }
        }

        $category = $this->find($id);

        if ($category) {
            if ($container) {
                CommonManager::setCacheVersion($container, $cacheKey, $category->getFullSlug());
            }

            return $category->getFullSlug();
        }
    }

    /**
     * Get slug by id.
     *
     * @param integer $id        Category id.
     * @param object  $container Container identifier.
     *
     * @return string
     */
    public function getSlugById($id, $container = null)
    {
        if ($container) {
            $tableName   = $this->getCategoryTableName();
            $cacheKey    = $tableName.'|'.__FUNCTION__.'|'.$id;
            $cachedValue = CommonManager::getCacheVersion($container, $cacheKey);

            if ($cachedValue !== false) {
                return $cachedValue;
            }
        }

        $category = $this->find($id);

        if ($category) {
            if ($container) {
                CommonManager::setCacheVersion($container, $cacheKey, $category->getSlug());
            }

            return $category->getSlug();
        }
    }

    /**
     * Get id by slug.
     *
     * @param integer $slug      Category slug.
     * @param object  $container Container identifier.
     *
     * @return integer
     */
    public function getIdBySlug($slug, $container = null)
    {
        if ($container) {
            $tableName   = $this->getCategoryTableName();
            $cacheKey    = $tableName.'|'.__FUNCTION__.'|'.$slug;
            $cachedValue = CommonManager::getCacheVersion($container, $cacheKey);

            if ($cachedValue !== false) {
                return $cachedValue;
            }
        }

        $category = $this->findOneBy(array('slug' => $slug));

        if ($category) {
            if ($container) {
                CommonManager::setCacheVersion($container, $cacheKey, $category->getId());
            }

            return $category->getId();
        }
    }

    /**
     * Get id by name.
     *
     * @param string $name      Category slug.
     * @param object  $container Container identifier.
     *
     * @return integer
     */
    public function getIdByName($name, $container = null)
    {
        if ($container) {
            $tableName   = $this->getCategoryTableName();
            $cacheKey    = $tableName.'|'.__FUNCTION__.'|'.$name;
            $cachedValue = CommonManager::getCacheVersion($container, $cacheKey);

            if ($cachedValue !== false) {
                return $cachedValue;
            }
        }

        $category = $this->findOneBy(array('name' => $name));

        if ($category) {
            if ($container) {
                CommonManager::setCacheVersion($container, $cacheKey, $category->getId());
            }

            return $category->getId();
        }
    }

    /**
     * Get subtitle categories.
     *
     * @return array
     */
    public function getSubtitleCategories()
    {
        return array(
            self::FOR_SALE_ID => 'for_sale',
            self::MOTORS_ID => 'motors',
            self::JOBS_ID => 'jobs',
            self::SERVICES_ID => 'services',
            self::PROPERTY_ID => 'property',
            self::WHATS_ON_ID => 'whats_on',
            self::CLASSES_AND_TUTION_ID => 'classes_and_tuition',
            self::CLUBS_SOCIETIES_AND_TEAMS_ID => 'clubs_societies_and_teams',
            self::FRIENDSHIP_AND_DATING_ID => 'friendship_and_dating',
            self::IN_YOUR_AREA_ID => 'in_your_are',
            self::ANIMALS_ID  => 'animals',
            self::ADULT_ID => 'adult',
            self::COMMUNITY_ID => 'community',
        );
    }

    /**
     * Get subtitle class name by category id.
     *
     * @param integer $category_id Category id.
     * @param object  $container   Container identifier.
     *
     * @return integer
     */
    public function getSubtitleClassname($categoryId, $container = null)
    {
        $className = '';

        if ($container) {
            $tableName   = $this->getCategoryTableName();
            $cacheKey    = $tableName.'|'.__FUNCTION__.'|'.$categoryId;
            $cachedValue = CommonManager::getCacheVersion($container, $cacheKey);

            if ($cachedValue !== false) {
                return $cachedValue;
            }
        }

        $subTitleCategories = $this->getSubtitleCategories();

        $categoryPathArray = $this->getCategoryPathArrayById($categoryId, false, $container);
        $categoryPathArray = array_reverse($categoryPathArray, true);
        foreach ($categoryPathArray as $key => $value) {
            if (array_key_exists($key, $subTitleCategories)) {
                $className = $subTitleCategories[$key].'-subtitle';
                break;
            }
        }

        if ($container) {
            CommonManager::setCacheVersion($container, $cacheKey, $className);
        }

        return $className;
    }

    /**
     * get category array by name and full slug pattern
     *
     * @param string $name      name
     * @param string $full_slug full slug
     *
     * @return array
     */
    public function getIdByNameAndFullSlugPattern($name, $full_slug, $container = null, $clean_name = false, $appendUrl = null)
    {
        if ($container) {
            $tableName   = $this->getCategoryTableName();
            $cacheKey    = $tableName.'|'.__FUNCTION__.'|'.$name.'_'.$full_slug.'_'.$clean_name.'_'.$appendUrl;
            $cachedValue = CommonManager::getCacheVersion($container, $cacheKey);

            if ($cachedValue !== false) {
                return $cachedValue;
            }
        }

        $full_slug_str = $appendUrl != '' ? $full_slug.$appendUrl : $full_slug;

        $query = $this->createQueryBuilder(self::ALIAS)
        ->andWhere(self::ALIAS.'.full_slug LIKE :full_slug')
        ->setParameter('full_slug', $full_slug_str.'%');

        if ($clean_name) {
            $query->andWhere(self::ALIAS.'.clean_name = :name')
            ->setParameter('name', $name);
        } else {
            $query->andWhere(self::ALIAS.'.name = :name')
            ->setParameter('name', $name);
        }

        $categoryArray = $query->getQuery()->getArrayResult();

        if ($categoryArray) {
            if ($container) {
                CommonManager::setCacheVersion($container, $cacheKey, $categoryArray);
            }

            return $categoryArray;
        } elseif (!$clean_name) {
            $name = str_replace(array(' ', '-', '/', '.'), '|', $name);
            $names = explode('|', $name);
            foreach ($names as $name) {
                $nameUrl  = Urlizer::urlize($name);
                $parent_cat= $this->getIdByNameAndFullSlugPattern($name, $full_slug, $container, true, $nameUrl);
                if ($parent_cat) {
                    return $parent_cat;
                }
            }
        }
    }

    /**
     * Get category by category name and parent id.
     *
     * @param string  $name      Category name.
     * @param integer $parentId  Parent category Id.
     * @param object  $container Container identifier.
     *
     * @return integer
     */
    public function getCategoryByNameAndParentId($name, $parentId, $container = null, $clean_name = false)
    {
        if ($container) {
            $tableName   = $this->getCategoryTableName();
            $cacheKey    = $tableName.'|'.__FUNCTION__.'|'.$name.'_'.$parentId.' '.$clean_name;
            $cachedValue = CommonManager::getCacheVersion($container, $cacheKey);

            if ($cachedValue !== false) {
                return $cachedValue;
            }
        }

        $categoryArray = array();
        $qb   = $this->getBaseQueryBuilder()
                        ->andWhere(self::ALIAS.'.parent = :parentId')
                        ->setParameter('parentId', $parentId);

        if ($clean_name) {
            $qb->andWhere(self::ALIAS.'.clean_name = :catName')
            ->setParameter('catName', $name);
        } else {
            $qb->andWhere(self::ALIAS.'.name = :catName')
            ->setParameter('catName', $name);
        }
        
        $categories = $qb->getQuery()->getResult();

        if ($categories && count($categories)) {
            foreach ($categories as $category) {
                $categoryArray['id'] = $category->getId();
                $categoryArray['name'] = $category->getName();
            }
        }

        if ($container) {
            CommonManager::setCacheVersion($container, $cacheKey, $categoryArray);
        }

        return $categoryArray;
    }

    /**
     * Get entity type array.
     *
     * @param integet $categoryId Category id.
     * @param boolean $rootFlag   Get root node flaf.
     * @param object  $container  Container identifier.
     *
     * @return array
     */
    public function getCategoryPathDetailArrayById($categoryId, $rootFlag = false, $container = null)
    {
        if ($container) {
            $culture     = CommonManager::getCurrentCulture($container);
            $tableName   = $this->getCategoryTableName();
            $cacheKey    = $tableName.'|'.__FUNCTION__.'|'.$categoryId.'_'.$rootFlag.'_'.$culture;
            $cachedValue = CommonManager::getCacheVersion($container, $cacheKey);

            if ($cachedValue !== false) {
                return $cachedValue;
            }
        }

        $categoryPathArray = array();

        if ($categoryId) {
            $categoryObj = $this->find($categoryId);

            if ($categoryObj) {
                $categories = $this->getPath($categoryObj);

                foreach ($categories as $category) {
                    if ($rootFlag) {
                        $categoryPathArray[] = array('id' => $category->getId(), 'name' => $category->getName(), 'slug' => $category->getSlug());
                    } else {
                        if ($category->getLvl() > 0) {
                            $categoryPathArray[] = array('id' => $category->getId(), 'name' => $category->getName(), 'slug' => $category->getSlug());
                        }
                    }
                }
            }
        }

        if ($container) {
            CommonManager::setCacheVersion($container, $cacheKey, $categoryPathArray);
        }

        return $categoryPathArray;
    }

    /**
     * Get category badge class array.
     *
     * @return multitype:string
     */
    public function getCategoryBadgeClassArray()
    {
        $categoryBadgeClassArray = array();
        $categoryBadgeClassArray[self::FOR_SALE_ID]  = 'forsale-badge';
        $categoryBadgeClassArray[self::MOTORS_ID]    = 'motors-badge';
        $categoryBadgeClassArray[self::JOBS_ID]      = 'job-badge';
        $categoryBadgeClassArray[self::SERVICES_ID]  = 'services-badge';
        $categoryBadgeClassArray[self::PROPERTY_ID]  = 'property-badge';
        $categoryBadgeClassArray[self::ANIMALS_ID]   = 'animals-badge';
        $categoryBadgeClassArray[self::COMMUNITY_ID] = 'community-badge';

        return $categoryBadgeClassArray;
    }

    /**
     * Get pets circle class array.
     *
     * @return array
     */
    public function getLandingPagePetsCircleClassArray()
    {
        $orderedPetsCircleClass = array(
            self::DOGS_AND_PUPPIES              => 'dogs',
            self::CATS_AND_KITTENS              => 'cats',
            self::BIRDS                         => 'birds',
            self::RABBITS                       => 'rabbits',
            self::GUINEA_PIGS_AND_SMALL_FURRIES => 'guinea-pigs',
            self::REPTILES_AND_AMPHIBIANS       => 'reptiles',
            self::FISH_AND_AQUATICS             => 'fish',
            self::INSECTS_AND_SPIDERS           => 'insects',
            self::EXOTIC_PETS                   => 'exotic-pets',
            self::OTHER_PETS                    => 'other-pets',
            self::PET_ACCESSORIES               => 'pet-accessories',
            self::PET_SUPPLIES                  => 'pet-supplies'
        );

        return $orderedPetsCircleClass;
    }

    /**
     * Get indexed dimensions array by category ids.
     *
     * @param array  $searchParams Search parameters.
     * @param object $container    Container identifier.
     *
     * @return array
     */
    public function getCategoryFacetBySearchParams($searchParams, $container)
    {
        $keywords = null;
        if (isset($searchParams['keywords']) && $searchParams['keywords']) {
            $keywords = $searchParams['keywords'];
            unset($searchParams['keywords']);
        }

        $searchData['search'] = $searchParams;

        // initialize search filter manager service and prepare filter data for searching
        $container->get('fa.searchfilters.manager')->init($this->_em->getRepository('FaAdBundle:Ad'), $this->_em->getClassMetadata('FaAdBundle:Ad')->getTableName(), 'search', $searchData);
        $data = $container->get('fa.searchfilters.manager')->getFiltersData();

        // Active or expired ads
        if (isset($searchParams['expired_ads']) && $searchParams['expired_ads']) {
            $data['query_filters']['item']['status_id'] = EntityRepository::AD_STATUS_EXPIRED_ID;
        } else {
            $data['query_filters']['item']['status_id'] = EntityRepository::AD_STATUS_LIVE_ID;
        }

        $data['facet_fields'] = array(AdSolrFieldMapping::CATEGORY_ID => array('min_count' => 1));

        // ad location filter with distance
        if (isset($searchParams['item__location']) && $searchParams['item__location']) {
            $data['query_filters']['item']['location'] = $searchParams['item__location'].'|'. (isset($searchParams['item__distance']) ? $searchParams['item__distance'] : '');
        }

        // remove adult results when there is no category selected
        if (!isset($searchParams['item__category_id'])) {
            $data['static_filters'] = ' AND -'.AdSolrFieldMapping::ROOT_CATEGORY_ID.':'.CategoryRepository::ADULT_ID;
        }

        // initialize solr search manager service and fetch data based of above prepared search options
        $container->get('fa.solrsearch.manager')->init('ad', $keywords, $data, 1, 1, 0, true);
        $facetResult = $container->get('fa.solrsearch.manager')->getSolrResponseFacetFields();
        $facetResult = get_object_vars($facetResult);

        return $facetResult;
    }

    /**
     * Get categories childrens array by parent id.
     *
     * @param integet $id parent Category id.
     * @param object  $container Container identifier.
     *
     * @return array
     */
    public function getCategoriesByIds($ids)
    {
        $categoryArray      = array();
        $otherCategoryArray = array();
        if (count($ids)) {
            $childrens = $this->getBaseQueryBuilder(self::ALIAS)
            ->where(self::ALIAS.'.id IN (:ids)')
            ->setParameter('ids', $ids)
            ->orderBy(self::ALIAS.'.name', 'asc')
            ->getQuery()->getArrayResult();

            foreach ($childrens as $children) {
                if (preg_match('/^other/i', $children['name'])) {
                    $otherCategoryArray[$children['id']] = $children['name'];
                } else {
                    $categoryArray[$children['id']] = $children['name'];
                }
            }
        }

        $categoryArray = $categoryArray + $otherCategoryArray;

        return $categoryArray;
    }

    /**
     * Get nimber size options
     *
     * @return array
     */
    public function getNimberSizeOptions()
    {
        return array(
            '1' => 1,
            '2' => 2,
            '3' => 3,
            '4' => 4,
            '5' => 5,
        );
    }

    /**
     * Get nimber detail for category.
     *
     * @param integer $category_id Category id.
     * @param object  $container   Container identifier.
     *
     * @return integer
     */
    public function getNimberDetailForCategoryId($categoryId, $container = null)
    {
        if ($container) {
            $tableName   = $this->getCategoryTableName();
            $cacheKey    = $tableName.'|'.__FUNCTION__.'|'.$categoryId;
            $cachedValue = CommonManager::getCacheVersion($container, $cacheKey);

            if ($cachedValue !== false) {
                return $cachedValue;
            }
        }

        $nimberDetails = array();
        $categoryObj = $this->find($categoryId);

        if ($categoryObj) {
            $nimberDetails['is_nimber_enabled'] = $categoryObj->getIsNimberEnabled();
            $nimberDetails['nimber_size'] = $categoryObj->getNimberSize();
        }

        if ($container) {
            CommonManager::setCacheVersion($container, $cacheKey, $nimberDetails);
        }

        return $nimberDetails;
    }

    /**
     * Get paa disabled category ids
     *
     * @param object $container Container identifier.
     *
     * @return Collection
     */
    public function getPaaDisabledCategoryIds($container = null)
    {
        if ($container) {
            $tableName   = $this->getCategoryTableName();
            $cacheKey    = $tableName.'|'.__FUNCTION__;
            $cachedValue = CommonManager::getCacheVersion($container, $cacheKey);

            if ($cachedValue !== false) {
                return $cachedValue;
            }
        }

        $query = $this->createQueryBuilder(self::ALIAS)
        ->select(self::ALIAS.'.id')
        ->where(self::ALIAS.'.is_paa_disabled = :isPaaDisabled')
        ->setParameter('isPaaDisabled', 1);

        $objCategories = $query->getQuery()->getArrayResult();

        $paaDisabledCategories = array();
        if ($objCategories) {
            foreach ($objCategories as $value) {
                $paaDisabledCategories[] = $value['id'];
            }

            if ($container) {
                CommonManager::setCacheVersion($container, $cacheKey, $paaDisabledCategories);
            }

            return $paaDisabledCategories;
        }
    }

    /**
     * Show duplicate categories.
     *
     * @param array $choices
     *
     * @return array
     */
    public function showDuplicateCategoriesForSubscriber($choices)
    {
        $categoryOptions = $choices;
        $uniqueCategoryOptions = array_unique($categoryOptions);
        $duplicateCategoryOptions = array_diff_assoc($categoryOptions, $uniqueCategoryOptions);
        if (count($duplicateCategoryOptions)) {
            $duplicateCategoryCounter = 1;
            foreach ($duplicateCategoryOptions as $duplicateCategoryId => $duplicateCategoryName) {
                if (isset($choices[$duplicateCategoryId])) {
                    $choices[$duplicateCategoryId] = $choices[$duplicateCategoryId].str_repeat(' ', $duplicateCategoryCounter);
                }
                $duplicateCategoryCounter = $duplicateCategoryCounter + 1;
            }
        }

        return $choices;
    }

    /**
     * Get finance detail for category.
     *
     * @param integer $category_id Category id.
     * @param object  $container   Container identifier.
     *
     * @return integer
     */
    public function getFinanceDetailForCategoryId($categoryId, $container = null)
    {
        if ($container) {
            $tableName   = $this->getCategoryTableName();
            $cacheKey    = $tableName.'|'.__FUNCTION__.'|'.$categoryId;
            $cachedValue = CommonManager::getCacheVersion($container, $cacheKey);

            if ($cachedValue !== false) {
                return $cachedValue;
            }
        }

        $financeDetails = array();
        $financeDetails['is_finance_enabled'] = false;
        $financeDetails['finance_title']      = '';
        $financeDetails['finance_url']        = '';
        $categoryPath   = $this->getCategoryPathArrayById($categoryId, false, $container);
        if ($categoryPath && is_array($categoryPath)) {
            $categoryIds = array_reverse(array_keys($categoryPath));
            foreach ($categoryIds as $key => $catId) {
                $objCategory = $this->find($catId);
                if ($objCategory && $objCategory->getIsFinanceEnabled()) {
                    $financeDetails['is_finance_enabled'] = true;
                    $financeDetails['finance_title']      = $objCategory->getFinanceTitle();
                    $financeDetails['finance_url']        = $objCategory->getFinanceUrl();

                    if ($container) {
                        CommonManager::setCacheVersion($container, $cacheKey, $financeDetails);
                    }
                    return $financeDetails;
                }
            }
        }

        return $financeDetails;
    }

    /**
     * Get trusted logo class category wise
     *
     * @param string  $rootCategoryId Root category id.
     *
     * @return string
     */
    public function getTrustedLogoClassCategoryWise($rootCategoryId = null)
    {
        $className = '';
        if ($rootCategoryId) {
            switch ($rootCategoryId) {
                case CategoryRepository::FOR_SALE_ID:
                    $className = 'seller-badge';
                    break;
                case CategoryRepository::MOTORS_ID:
                    $className = 'dealer-badge';
                    break;
                case CategoryRepository::PROPERTY_ID:
                    $className = 'agency-badge';
                    break;
                case CategoryRepository::ANIMALS_ID:
                    $className = 'breeder-badge';
                    break;
                case CategoryRepository::COMMUNITY_ID:
                    $className = 'community-badge-logo';
                    break;
                case CategoryRepository::JOBS_ID:
                    $className = 'recruiter-badge';
                    break;
                case CategoryRepository::SERVICES_ID:
                     $className = 'service-badge';
                     break;
            }
        }

        return $className;
    }

    /**
     * Get finance detail for category.
     *
     * @param integer $category_id Category id.
     * @param object  $container   Container identifier.
     *
     * @return integer
     */
    public function getOneclickenqDetailForCategoryId($categoryId, $container = null)
    {
        if ($container) {
            $tableName   = $this->getCategoryTableName();
            $cacheKey    = $tableName.'|'.__FUNCTION__.'|'.$categoryId;
            $cachedValue = CommonManager::getCacheVersion($container, $cacheKey);

            if ($cachedValue !== false) {
                return $cachedValue;
            }
        }

        $oneclickenqDetails = array();
        $oneclickenqDetails['is_oneclickenq_enabled'] = false;
        $categoryPath   = $this->getCategoryPathArrayById($categoryId, false, $container);
        if ($categoryPath && is_array($categoryPath)) {
            $categoryIds = array_reverse(array_keys($categoryPath));
            foreach ($categoryIds as $key => $catId) {
                $objCategory = $this->find($catId);
                if ($objCategory && $objCategory->getIsOneclickenqEnabled()) {
                    $oneclickenqDetails['is_oneclickenq_enabled'] = true;

                    if ($container) {
                        CommonManager::setCacheVersion($container, $cacheKey, $oneclickenqDetails);
                    }
                    return $oneclickenqDetails;
                }
            }
        }

        return $oneclickenqDetails;
    }
    
    /**
     * Get category array by text.
     *
     * @param string $term
     *
     * @return multitype:multitype:string NULL
     */
    public function getCategorybyName($name = '')
    {
        $query = $this->createQueryBuilder(self::ALIAS)
        ->select(self::ALIAS.'.id,'.self::ALIAS.'.name')
            ->andWhere(self::ALIAS.'.name = :name')
            ->setParameter('name', $name)
            ->setMaxResults(1);
        
        $objResources = $query->getQuery()->getOneOrNullResult();
        return $objResources;
    }

    /**
     * get Default Radius By Category Id
     *
     * @param integer $categoryId Category id
     *
     * @return boolean|string
     */
    public function getDefaultRadiusByCategoryId($categoryId, $container = null)
    {
        $parentCategoryIds = array_keys($this->_em->getRepository('FaEntityBundle:Category')->getCategoryPathArrayById($categoryId, false, $container));
        $locationRadius = $this->_em->getRepository('FaAdBundle:LocationRadius')->getSingleLocationRadiusByCategoryIds($parentCategoryIds);
        if ($locationRadius) {
            return $locationRadius['defaultRadius'];
        } else {
            return null;
        }
    }

    /**
     * get Default Radius By searchParams
     *
     * @param integer $categoryId Category id
     *
     * @return boolean|string
     */
    public function getDefaultRadiusBySearchParams($searchParams, $container = null)
    {
        $setRadius = 1;
        $categoryId = 0;
        $getLocLvl = '';
        $cookieLocationDet = $cookieLocation  = array();
        
        $cookieLocation  = $container->get('request_stack')->getCurrentRequest()->cookies->get('location');
        
        if(!empty($cookieLocation)) {
            $cookieLocationDet = json_decode($cookieLocation);
        }
        
        $searchLocation = isset($searchParams['item__location'])?$searchParams['item__location']:((!empty($cookieLocationDet) && isset($cookieLocationDet->town_id))?$cookieLocationDet->town_id:2);

        if($searchLocation == LocationRepository::LONDON_TOWN_ID) {
            return self::LONDON_DISTANCE;
        /*} elseif((isset($searchParams['keywords']) && $searchParams['keywords']!='') && ($searchLocation != 2)) {
            return self::KEYWORD_DEFAULT;*/
        } else {
            if ($searchLocation != 2) {
                $selLocationArray = $this->_em->getRepository('FaEntityBundle:Location')->find($searchLocation);
                if (!empty($selLocationArray)) {
                    $getLocLvl = $selLocationArray->getLvl();
                }
            }

            if ((isset($searchParams['item__location']) && $searchParams['item__location'] == 2) || !isset($searchParams['item__location']) || $getLocLvl == 2) {
                $setRadius = 0;
            } elseif (isset($searchParams['item__distance']) && $searchParams['item__distance']) {
                $setRadius = 0;
            }

            if ($setRadius) {
                if (isset($searchParams['item__category_id']) && $searchParams['item__category_id']) {
                    $categoryId = $searchParams['item__category_id'];
                }

                if ($categoryId) {
                    $parentCategoryIds = array_keys($this->_em->getRepository('FaEntityBundle:Category')->getCategoryPathArrayById($categoryId, false, $container));
                    $locationRadius = $this->_em->getRepository('FaAdBundle:LocationRadius')->getSingleLocationRadiusByCategoryIds($parentCategoryIds);

                    if ($locationRadius) {
                        return $locationRadius['defaultRadius'];
                    } else {
                        $rootCategoryId = $this->_em->getRepository('FaEntityBundle:Category')->getRootCategoryId($categoryId, $container);
                        return ($rootCategoryId == CategoryRepository::MOTORS_ID) ? CategoryRepository::MOTORS_DISTANCE : CategoryRepository::OTHERS_DISTANCE;
                    }
                } else {
                    return null;
                }
            } else {
                return null;
            }
        }

    }
    
    public function getChildrenIdsFromParentIds($categoryIds) {
        $categories = $rescategories = $categoryPathArray = array();
        $res_child_categories = $res_parent_categories = $categoriesRes = array();
        $categoriesRes1 = array();
        
        $tableName = $this->_em->getClassMetadata('FaEntityBundle:Category')->getTableName();
       
        foreach($categoryIds as $categoryId) {
            $res_child_categories = $this->getNestedChildrenIdsByCategoryId($categoryId);
            
            if ($categoryId) {
                $categoryObj = $this->find($categoryId);
                
                if ($categoryObj) {
                    $categories = $this->getPath($categoryObj);
                    
                    foreach ($categories as $category) {
                        if ($category->getLvl() > 0 && $category->getStatus() ==1) {
                            $res_parent_categories[] = $category->getId();
                        }
                    }
                }
            }  
            $rescategories = array_merge($res_child_categories,$res_parent_categories);
                        
            if (!empty($rescategories)) {
                $categoriesRes = array_unique($rescategories);    
                $categoriesRes1 = array_merge($categoriesRes,$categoriesRes1);
            }
        }
        
        if(!empty($categoriesRes1)) {
            $categories = array_unique($categoriesRes1);
        }

        return $categories;
    }
    
    /**
     * Get entity type array.
     *
     * @param integet $categoryId Category id.
     *
     * @return array
     */
    public function getCategoryParentArrayById($categoryId)
    {
        $categoryPathArray = array();
        
        if ($categoryId) {
            $categoryObj = $this->find($categoryId);
            
            if ($categoryObj) {
                $categories = $this->getPath($categoryObj);
                
                foreach ($categories as $category) {
                    if ($category->getLvl() > 0 && $category->getStatus() ==1) {
                        $categoryPathArray[] = $category->getId();
                    }
                }
            }
        }
        
        return $categoryPathArray;
    }
    /**
     * Get adult categories.
     *
     * @param object $container container identifier
     *
     * @return array
     */
    public function getAdultHeaderCategories($container = null, $locationDetails = array(), $distance = null)
    {
        $em = $container->get('doctrine')->getManager();
        $locationSlug = null;
        if (!empty($locationDetails) && isset($locationDetails['slug'])) {
            $locationSlug = $locationDetails['slug'];
        }
        if (!$locationSlug) {
            $locationSlug = $em->getRepository('FaEntityBundle:Location')->getSlugById(LocationRepository::COUNTY_ID, $container);
        }
        if ($container) {
            $culture     = CommonManager::getCurrentCulture($container);
            $tableName   = $this->getCategoryTableName();
            $cacheKey    = $tableName.'|'.__FUNCTION__.'|'.$locationSlug.'|'.$culture;
            $cachedValue = CommonManager::getCacheVersion($container, $cacheKey);
            
            if ($cachedValue !== false) {
                //return $cachedValue;
            }
        }
        
        $leafLevelCategoryCount = array();
        if (is_array($this->categoryCountArray) && count($this->categoryCountArray)) {
            $categoryCountArray = $this->categoryCountArray;
        } else {
            $locationId = $em->getRepository('FaEntityBundle:Location')->getIdBySlug($locationSlug, $container);
            
            if (!$locationId) {
                $locationId = $em->getRepository('FaEntityBundle:Locality')->getColumnBySlug('id', $locationSlug, $container);
            }
            $data                 = array();
            $data['query_filters']['item']['status_id'] = EntityRepository::AD_STATUS_LIVE_ID;

            $radius = self::MAX_DISTANCE;

            if ($locationId && $locationId != LocationRepository::COUNTY_ID) {
                $location = $em->getRepository('FaEntityBundle:Location')->getCookieValue($locationId, $container);

                if ($distance) {
                    $radius = $distance;
                } else {
                    if ($locationId == LocationRepository::LONDON_TOWN_ID) {
                        $radius = self::LONDON_DISTANCE;
                        /*} elseif(isset($searchParams['keywords']) && $searchParams['keywords']) {
                            $radius = CategoryRepository::KEYWORD_DEFAULT;*/
                    } else {
                        $searchParams['item__location'] = $locationId;
                        $searchParams['item__category_id'] = CategoryRepository::ADULT_ID;

                        $getDefaultRadius = $em->getRepository('FaEntityBundle:Category')->getDefaultRadiusBySearchParams($searchParams, $this->container);
                        $radius = ($getDefaultRadius) ? $getDefaultRadius : '';
                    }
                }

                $data['query_filters']['item']['location'] = $locationId.'|'.$radius;
            }

            //$data['static_filters'] = ' AND ('.AdSolrFieldMapping::ROOT_CATEGORY_ID.':'.CategoryRepository::ADULT_ID.' OR '.AdSolrFieldMapping::CATEGORY_ID.':'.CategoryRepository::ADULT_ID.')';
            $data['static_filters'] = ' AND (category_ids:'.CategoryRepository::ADULT_ID.')';
            //$data['query_filters']['item']['category_id'] = self::ADULT_ID;
            if (!empty($locationDetails)) {
                if (isset($locationDetails['latitude']) && isset($locationDetails['longitude'])) {
                    if ($locationId && $locationId != LocationRepository::COUNTY_ID) {
                        $geoDistParams = array('sfield' => 'store', 'pt' => $locationDetails['latitude'] . ',' . $locationDetails['longitude'], 'd' => $radius);
                    } else {
                        $geoDistParams = array('sfield' => 'store', 'pt' => $locationDetails['latitude'] . ',' . $locationDetails['longitude']);
                    }
                    $container->get('fa.solrsearch.manager')->setGeoDistQuery($geoDistParams);
                }
            }
            //$data['facet_fields'] = array('a_category_id_i' => array('limit' => '5000'),'a_parent_category_lvl_1_id_i' => array('limit' => '5000'), 'a_parent_category_lvl_2_id_i' => array('limit' => '5000'), 'a_parent_category_lvl_3_id_i' => array('limit' => '5000'), 'a_parent_category_lvl_4_id_i' => array('limit' => '5000'), 'a_parent_category_lvl_5_id_i' => array('limit' => '5000'), 'a_parent_category_lvl_6_id_i' => array('limit' => '5000'));
            
            // initialize solr search manager service and fetch data based of above prepared search options
            $container->get('fa.solrsearch.manager')->init('ad.new', '', $data);
            $solrResponse = $container->get('fa.solrsearch.manager')->getSolrResponse();
            
            // fetch result set from solr
            $result = $container->get('fa.solrsearch.manager')->getSolrResponseFacetFields($solrResponse);
            $categoryCountArray = $container->get('fa.solrsearch.manager')->getSolrResponseDocsCount($solrResponse);
            //$categoryCountArray = get_object_vars($result['a_parent_category_lvl_1_id_i']) + get_object_vars($result['a_parent_category_lvl_2_id_i']) + get_object_vars($result['a_parent_category_lvl_3_id_i']) + get_object_vars($result['a_parent_category_lvl_4_id_i']) + get_object_vars($result['a_parent_category_lvl_5_id_i']) + get_object_vars($result['a_parent_category_lvl_6_id_i']);
            $leafLevelCategoryCount = get_object_vars($result['a_category_id_i']);
            
            $this->categoryCountArray = $categoryCountArray;
            $this->leafLevelCategoryCount = $leafLevelCategoryCount;
        }

        $tableName = $this->_em->getClassMetadata('FaEntityBundle:Category')->getTableName();
        $headerCategoryArray = array();
        $query = 'SELECT parent.id,parent.name,parent.lvl,parent.slug,parent.parent_id,parent.full_slug,node.include_as_main_category_in_header,parent.is_children_header_sortable,node.header_sort_order
                FROM '.$tableName.' AS node,
                    '.$tableName.' AS parent FORCE INDEX (idx_lft,idx_status)
                WHERE node.lft BETWEEN parent.lft AND parent.rgt
                    AND parent.lvl <> 0
                    AND parent.status = 1
                ORDER BY node.lft, parent.lvl';
        $stmt = $this->_em->getConnection()->prepare($query);
        $stmt->execute();
        $categories         = $stmt->fetchAll();
        $categoryClassArray = $this->getHeaderAdultCategoryClassArray();
        
        if (count($categories)) {
            
            foreach ($categories as $index => $category) {
                if ($category['parent_id'] == self::ADULT_ID || $category['id'] == self::ADULT_ID) {
                    $count = (isset($categoryCountArray[$category['id']]) ? $categoryCountArray[$category['id']] : 0);
                    $leafCatCount = (isset($leafLevelCategoryCount[$category['id']]) ? $leafLevelCategoryCount[$category['id']] : 0);
                    if ($count < 1) {
                        $count = (isset($leafLevelCategoryCount[$category['id']]) ? $leafLevelCategoryCount[$category['id']] : 0);
                        if ($count < 1) {
                            continue;
                        }
                    }
                    
                    $categoryArray = array(
                        'name' => $category['name'],
                        'id' => $category['id'],
                        'slug' => $category['slug'],
                        'count' => $count,
                        'full_slug' => $category['full_slug'],
                        'children' => array(),
                        'header_sortable'=>$category['is_children_header_sortable'],
                        'sort_ord'=> $category['header_sort_order'],
                        'list_url' => $container->get('fa_ad.manager.ad_routing')->getCategoryUrl($locationSlug, $category['full_slug'])
                    );

                    if ($category['lvl'] == 1 && !array_key_exists($category['id'], $headerCategoryArray)) {
                        if (isset($categoryClassArray[$category['id']])) {
                            $categoryArray['class'] = $categoryClassArray[$category['id']];
                        }
                        $headerCategoryArray[$category['id']] = $categoryArray;
                        $categoryId1 = $category['id'];
                    } elseif (($category['lvl'] == 2 || ($category['lvl'] == 3 && $category['include_as_main_category_in_header'] == 1)) && !array_key_exists($category['id'], $headerCategoryArray[$categoryId1]['children'])) {
                        if (isset($categoryClassArray[$category['id']])) {
                            $categoryArray['class'] = $categoryClassArray[$category['id']];
                        }
                        if($leafCatCount>1) {
                            $categoryArray['count'] = $leafCatCount;
                        }
                        $headerCategoryArray[$categoryId1]['children'][$category['id']] = $categoryArray;
                        $categoryId2 = $category['id'];
                    } elseif ($category['lvl'] == 3 && !array_key_exists($category['id'], $headerCategoryArray[$categoryId1]['children'][$categoryId2]['children'])) {
                        $headerCategoryArray[$categoryId1]['children'][$categoryId2]['children'][$category['id']] = $categoryArray;
                        $categoryId3 = $category['id'];
                        asort($headerCategoryArray[$categoryId1]['children'][$categoryId2]['children']);
                    } elseif ($category['lvl'] == 4 && !array_key_exists($category['id'], $headerCategoryArray[$categoryId1]['children'][$categoryId2]['children'][$categoryId3]['children'])) {
                        $headerCategoryArray[$categoryId1]['children'][$categoryId2]['children'][$categoryId3]['children'][$category['id']] = $categoryArray;
                        $categoryId4 = $category['id'];
                        asort($headerCategoryArray[$categoryId1]['children'][$categoryId2]['children'][$categoryId3]['children']);
                    } elseif ($category['lvl'] == 5 && !array_key_exists($category['id'], $headerCategoryArray[$categoryId1]['children'][$categoryId2]['children'][$categoryId3]['children'][$categoryId4]['children'])) {
                        $headerCategoryArray[$categoryId1]['children'][$categoryId2]['children'][$categoryId3]['children'][$categoryId4]['children'][$category['id']] = $categoryArray;
                        $categoryId5 = $category['id'];
                        asort($headerCategoryArray[$categoryId1]['children'][$categoryId2]['children'][$categoryId3]['children'][$categoryId4]['children']);
                    } elseif ($category['lvl'] == 6 && !array_key_exists($category['id'], $headerCategoryArray[$categoryId1]['children'][$categoryId2]['children'][$categoryId3]['children'][$categoryId4]['children'][$categoryId5]['children'])) {
                        $headerCategoryArray[$categoryId1]['children'][$categoryId2]['children'][$categoryId3]['children'][$categoryId4]['children'][$categoryId5]['children'][$category['id']] = $categoryArray;
                        $categoryId6 = $category['id'];
                        asort($headerCategoryArray[$categoryId1]['children'][$categoryId2]['children'][$categoryId3]['children'][$categoryId4]['children'][$categoryId5]['children']);
                    }
                }
            }
        }
        //echo '<pre>'; print_r($headerCategoryArray);die;
        //check for all main categories
        /*$mainCategories = $this->getCategoryByLevelArray(1, $container);
        foreach ($mainCategories as $mainCategoryId => $mainCategoryName) {
            if (!isset($headerCategoryArray[$mainCategoryId]) ) {
                $headerCategoryArray[$mainCategoryId]['name'] = $mainCategoryName;
                $headerCategoryArray[$mainCategoryId]['children'] = array();
                $headerCategoryArray[$mainCategoryId]['id'] = $mainCategoryId;
                $headerCategoryArray[$mainCategoryId]['slug'] = $this->getSlugById($mainCategoryId, $container);
                $headerCategoryArray[$mainCategoryId]['full_slug'] = $this->getFullSlugById($mainCategoryId, $container);
            }
        }*/
        
        ksort($headerCategoryArray);
        
        if ($container) {
            CommonManager::setCacheVersion($container, $cacheKey, $headerCategoryArray, self::CACHE_TTL);
        }
        
        return $headerCategoryArray;
     }

    /**
     * Get all categories.
     *
     * @param object $container container identifier
     *
     * @return array
     */
    public function getAllCategories($container = null)
    {
        if ($container) {
            $culture     = CommonManager::getCurrentCulture($container);
            $tableName   = $this->getCategoryTableName();
            $cacheKey    = $tableName.'|'.__FUNCTION__.'|'.$culture;
            $cachedValue = CommonManager::getCacheVersion($container, $cacheKey);

            if ($cachedValue !== false) {
                //return $cachedValue;
            }
        }

        $tableName = $this->_em->getClassMetadata('FaEntityBundle:Category')->getTableName();
        $headerCategoryArray = array();
        $query = 'SELECT id, name, slug, full_slug, parent_id 
                FROM '.$tableName.'
                ORDER BY lvl';
        $stmt = $this->_em->getConnection()->prepare($query);
        $stmt->execute();
        $categories         = $stmt->fetchAll();

        if (count($categories)) {
            foreach ($categories as $index => $category) {
                $headerCategoryArray[$category['id']]['name'] = $category['name'];
                $headerCategoryArray[$category['id']]['id'] = $category['id'];
                $headerCategoryArray[$category['id']]['slug'] = $category['slug'];
                $headerCategoryArray[$category['id']]['full_slug'] = $category['full_slug'];
                $headerCategoryArray[$category['id']]['parent_id'] = $category['parent_id'];
            }
        }

        ksort($headerCategoryArray);

        if ($container) {
            CommonManager::setCacheVersion($container, $cacheKey, $headerCategoryArray, self::CACHE_TTL);
        }

        return $headerCategoryArray;
    }

    /**
     * @param $container
     * @param $categoryId
     * @param bool $getParentCategories
     * @return array
     */
    public function getCachedCategoryById($container, $categoryId, $getParentCategories=false)
    {
        $categories = CommonManager::getCacheVersion($container, 'category|getAllCategories|en_GB');
        $returnCategories[] = $category = $categories[$categoryId];

        if ($getParentCategories) {
            while ($category['parent_id']) {
                $returnCategories[] = $category = $categories[$category['parent_id']];
            }
        }

        return $returnCategories;
    }

    public function getCategoryPathArrayDetById($categoryId, $rootFlag = false, $container = null)
    {
        if ($container) {
            $culture     = CommonManager::getCurrentCulture($container);
            $tableName   = $this->getCategoryTableName();
            $cacheKey    = $tableName.'|'.__FUNCTION__.'|'.$categoryId.'_'.$rootFlag.'_'.$culture;
            $cachedValue = CommonManager::getCacheVersion($container, $cacheKey);

            if ($cachedValue !== false) {
                return $cachedValue;
            }
        }

        $categoryPathArray = array();

        if ($categoryId) {
            $categoryObj = $this->find($categoryId);

            if ($categoryObj) {
                $categories = $this->getPath($categoryObj);

                foreach ($categories as $category) {
                    if ($rootFlag && $category->getStatus() ==1) {
                        $categoryPathArray[$category->getId()]['name'] = $category->getName();
                        $categoryPathArray[$category->getId()]['id'] = $category->getId();
                        $categoryPathArray[$category->getId()]['slug'] = $category->getSlug();
                        $categoryPathArray[$category->getId()]['full_slug'] = $category->getFullSlug();
                        $categoryPathArray[$category->getId()]['parent_id'] = $category->getParent()->getId();
                    } else {
                        if ($category->getLvl() > 0 && $category->getStatus() ==1) {
                            $categoryPathArray[$category->getId()]['name'] = $category->getName();
                            $categoryPathArray[$category->getId()]['id'] = $category->getId();
                            $categoryPathArray[$category->getId()]['slug'] = $category->getSlug();
                            $categoryPathArray[$category->getId()]['full_slug'] = $category->getFullSlug();
                            $categoryPathArray[$category->getId()]['parent_id'] = $category->getParent()->getId();
                        }
                    }
                }
            }
        }

        if ($container) {
            CommonManager::setCacheVersion($container, $cacheKey, $categoryPathArray);
        }

        return $categoryPathArray;
    }
}
