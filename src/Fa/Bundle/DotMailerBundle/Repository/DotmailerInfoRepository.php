<?php

/**
 * This file is part of the fa bundle.
 *
 * @copyright Copyright (c) 2014, FMG
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Fa\Bundle\DotMailerBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Fa\Bundle\CoreBundle\Manager\CommonManager;
use Fa\Bundle\DotMailerBundle\Entity\DotmailerInfo;
use Fa\Bundle\DotMailerBundle\Repository\DotmailerRepository;

/**
 * Dotmailer repository.
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 *
 * @author Sagar Lotiya <amitl@aspl.in>
 * @copyright 2014 Friday Media Group Ltd
 * @version 1.0
 */
class DotmailerInfoRepository extends EntityRepository
{
    use \Fa\Bundle\CoreBundle\Search\Search;

    const ALIAS = 'dti';

    /**
     * Prepare query builder.
     *
     * @param array $data Array of data.
     *
     * @return Doctrine\ORM\QueryBuilder The query builder
     */
    public function getBaseQueryBuilder()
    {
        return $this->createQueryBuilder(self::ALIAS);
    }

    /**
     * Add paa category filter to existing query object
     *
     * @param mixed $id Paa category id.
     */
    protected function addPaaCategoryIdFilter($id = null)
    {
        if ($id) {
            if (!is_array($id)) {
                $id = explode(',', $id);
            }

            $id = array_filter($id);
            if (count($id)) {
                $categoryNestedArray = array();
                foreach ($id as $categoryId) {
                    $nestedChildren = $this->getEntityManager()->getRepository('FaEntityBundle:Category')->getNestedChildrenIdsByCategoryId($categoryId);
                    if (count($nestedChildren)) {
                        $categoryNestedArray = $categoryNestedArray + $nestedChildren;
                    }
                }

                $id = $categoryNestedArray;
                $this->queryBuilder->andWhere($this->getRepositoryAlias().'.paa_category_id IN (:'.$this->getRepositoryAlias().'_paa_category_id'.')');
                $this->queryBuilder->setParameter($this->getRepositoryAlias().'_paa_category_id', $id);
            }
        }
    }

    /**
     * Add enquiry category filter to existing query object
     *
     * @param mixed $id Paa category id.
     */
    protected function addEnquiryCategoryIdFilter($id = null)
    {
        if ($id) {
            if (!is_array($id)) {
                $id = explode(',', $id);
            }

            $id = array_filter($id);
            if (count($id)) {
                $categoryNestedArray = array();
                foreach ($id as $categoryId) {
                    $nestedChildren = $this->getEntityManager()->getRepository('FaEntityBundle:Category')->getNestedChildrenIdsByCategoryId($categoryId);
                    if (count($nestedChildren)) {
                        $categoryNestedArray = $categoryNestedArray + $nestedChildren;
                    }
                }

                $id = $categoryNestedArray;
                $this->queryBuilder->andWhere($this->getRepositoryAlias().'.enquiry_category_id IN (:'.$this->getRepositoryAlias().'_enquiry_category_id'.')');
                $this->queryBuilder->setParameter($this->getRepositoryAlias().'_enquiry_category_id', $id);
            }
        }
    }

    /**
     * Add paa created at from to filter to existing query object
     *
     * @param string $fromTo from value | to value (pipe saperated)
     *
     * @return void
     */
    protected function addPaaCreatedAtFromToFilter($fromTo = null)
    {
        list($from, $to) = explode('|', $fromTo);

        if (!is_numeric($from)) {
            $from = CommonManager::getTimeStampFromStartDate($from);
        }

        if (!is_numeric($to)) {
            $to   = CommonManager::getTimeStampFromEndDate($to);
        }

        $this->addFromToFilter('paa_created_at', $from, $to);
    }

    /**
     * Add enquiry created at from to filter to existing query object
     *
     * @param string $fromTo from value | to value (pipe saperated)
     *
     * @return void
     */
    protected function addEnquiryCreatedAtFromToFilter($fromTo = null)
    {
        list($from, $to) = explode('|', $fromTo);

        if (!is_numeric($from)) {
            $from = CommonManager::getTimeStampFromStartDate($from);
        }

        if (!is_numeric($to)) {
            $to   = CommonManager::getTimeStampFromEndDate($to);
        }

        $this->addFromToFilter('enquiry_created_at', $from, $to);
    }

    /**
     * Touch point entry in dotmailer from front side.
     *
     * @param integer $dotmailerId
     * @param integer $userId
     * @param string  $touchPoint
     */
    public function doTouchPointEntry($dotmailerId, $adId, $touchPoint)
    {
        $dotMailerInfo = $this->findOneBy(array('dotmailer' => $dotmailerId, 'ad_id' => $adId, 'segment' => $touchPoint));
        if (!$dotMailerInfo) {
            $dotMailerInfo = new DotmailerInfo();

            $ad = $this->getEntityManager()->getRepository('FaAdBundle:Ad')->findOneBy(array('id' => $adId));
            $dotMailerInfo->setSegment($touchPoint);
            $dotMailerInfo->setAdId($adId);
            $dotMailerInfo->setDotmailer($this->getEntityManager()->getReference('FaDotMailerBundle:Dotmailer', $dotmailerId));
            if ($touchPoint == DotmailerRepository::TOUCH_POINT_PAA) {
                $dotMailerInfo->setPaaCategoryId($ad->getCategory()->getId());
                $dotMailerInfo->setPaaCreatedAt(time());
            } else if ($touchPoint == DotmailerRepository::TOUCH_POINT_ENQUIRY) {
                $dotMailerInfo->setEnquiryCategoryId($ad->getCategory()->getId());
                $dotMailerInfo->setEnquiryCreatedAt(time());
            }

            $this->getEntityManager()->persist($dotMailerInfo);
            $this->getEntityManager()->flush($dotMailerInfo);
        }
    }
}
