<?php

/**
 * This file is part of the fa bundle.
 *
 * @copyright Copyright (c) 2014, FMG
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Fa\Bundle\DotMailerBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * Dotmailer repository.
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 *
 * @author Samir Amrutya<amitl@aspl.in>
 * @copyright 2014 Friday Media Group Ltd
 * @version 1.0
 */
class DotmailerFilterRepository extends EntityRepository
{
    use \Fa\Bundle\CoreBundle\Search\Search;

    const ALIAS = 'dtf';

    const STATUS_PENDING = 0;

    const STATUS_SUCCESS = 1;

    const STATUS_APPROVED = 2;

    const STATUS_FAILED = 3;

    const STATUS_SENT = 4;

    /**
     * Prepare query builder.
     *
     * @param array $data Array of data.
     *
     * @return Doctrine\ORM\QueryBuilder The query builder
     */
    public function getBaseQueryBuilder()
    {
        return $this->createQueryBuilder(self::ALIAS);
    }

    /**
     * Add message status filter to existing query object.
     *
     * @param mixed $status Moderation status.
     */
    protected function addStatusFilter($status = null)
    {
        if ($status !== null) {
            if (!is_array($status)) {
                $status = array($status);
            }

            if (count($status)) {
                $this->queryBuilder->andWhere($this->getRepositoryAlias().'.status IN (:status)');
                $this->queryBuilder->setParameter('status', $status);
            }
        }
    }

    /**
     * Add message status filter to existing query object.
     *
     * @param mixed $status Moderation status.
     */
    protected function addIs24hLoopFilter($is24hLoop = null)
    {
        if ($is24hLoop !== null) {
            if (!is_array($is24hLoop)) {
                $is24hLoop = array($is24hLoop);
            }

            if (count($is24hLoop)) {
                $this->queryBuilder->andWhere($this->getRepositoryAlias().'.is_24h_loop IN (:is24hLoop)');
                $this->queryBuilder->setParameter('is24hLoop', $is24hLoop);
            }
        }
    }

    /**
     * Get status array
     *
     * @return array
     */
    public static function getStatusArray()
    {
        return array(
            self::STATUS_PENDING  => 'Pending',
            self::STATUS_APPROVED => 'Approved',
            self::STATUS_SENT     => 'In progress',
            self::STATUS_FAILED   => 'Failed',
            self::STATUS_SUCCESS  => 'Completed',
        );
    }

    /**
     * Update response.
     *
     * @param integer $httpcode
     * @param string  $response
     * @param object  $dotmailerFilter
     */
    public function updateResponse($httpcode, $response, $dotmailerFilter)
    {
        $value = json_decode($dotmailerFilter->getValue(), true);
        $response = json_decode($response, true);
        if (!isset($response['id']) && isset($value['id'])) {
            $response['id'] = $value['id'];
        }

        $dotmailerFilter->setHttpcode($httpcode);
        $dotmailerFilter->setValue(json_encode($response));
        if ($httpcode == '202') {
            $dotmailerFilter->setStatus(self::STATUS_SENT);
        } else {
            $dotmailerFilter->setStatus(self::STATUS_FAILED);
        }
        $this->_em->persist($dotmailerFilter);
        $this->_em->flush($dotmailerFilter);
    }

    /**
     * Add dotmailer filter name filter to existing query object.
     *
     * @param string $name dotmailer filter name.
     */
    protected function addNameFilter($name = null)
    {
        $this->queryBuilder->andWhere(sprintf('%s.name LIKE \'%%%s%%\'', $this->getRepositoryAlias(), $name));
    }

    /**
     * Add dotmailer filter created by filter to existing query object.
     *
     * @param string $createdBy dotmailer filter created by.
     */
    protected function addCreatedByFilter($createdBy = null)
    {
        $this->queryBuilder->andWhere(sprintf('%s.created_by = \'%s\'', $this->getRepositoryAlias(), $createdBy));
    }
}
