<?php

/**
 * This file is part of the fa bundle.
 *
 * @copyright Copyright (c) 2014, FMG
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Fa\Bundle\EmailBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Fa\Bundle\EmailBundle\Entity\EmailQueue;

/**
 * This class was generated by the Doctrine ORM.
 * Add your own custom repository methods below.
 *
 * @author Amit Limbadia <amitl@aspl.in>
 * @copyright 2014 Friday Media Group Ltd
 * @version 1.0
 */
class EmailQueueRepository extends EntityRepository
{
    use \Fa\Bundle\CoreBundle\Search\Search;

    const ALIAS = 'eq';

    /**
     * Prepare query builder.
     *
     * @return Doctrine\ORM\QueryBuilder The query builder
     */
    public function getBaseQueryBuilder()
    {
        return $this->createQueryBuilder(self::ALIAS);
    }

    /**
     * Add identifier filter.
     *
     * @param string $identifier Identifier.
     */
    protected function addIdentifierFilter($identifier = null)
    {
        if ($identifier) {
            $this->queryBuilder->andWhere($this->getRepositoryAlias().'.identifier = :identifier');
            $this->queryBuilder->setParameter('identifier', $identifier);
        }
    }

    /**
     * Add email to queue.
     *
     * @param string $emailIdentifier
     * @param object $user
     * @param object $ad
     * @param object $container
     */
    public function addEmailToQueue($emailIdentifier, $user, $ad = null, $container, $value = array())
    {
        $emailTemplateObj = $this->_em->getRepository('FaEmailBundle:EmailTemplate')->findOneBy(array('identifier' => $emailIdentifier, 'status' => 1));
        if ($emailTemplateObj) {
            $emailQueue = new EmailQueue();
            $emailQueue->setIdentifier($emailIdentifier);
            $emailQueue->setAd($ad);
            $emailQueue->setUser($user);
            if (count($value)) {
                $emailQueue->setValue(serialize($value));
            }
            $this->_em->persist($emailQueue);
            $this->_em->flush($emailQueue);
        }
    }

    /**
     * Remove email from queue.
     *
     * @param string $emailIdentifier
     * @param object $user
     */
    public function removeFromEmailQueue($emailIdentifier, $user, $emailQueueIds)
    {
        $records = $this->createQueryBuilder(self::ALIAS)
        ->andWhere(self::ALIAS.'.identifier = :identifier')
        ->setParameter('identifier', $emailIdentifier)
        ->andWhere(self::ALIAS.'.id IN (:emailQueueIds)')
        ->setParameter('emailQueueIds', $emailQueueIds)
        ->getQuery()
        ->getResult();

        if ($records) {
            foreach ($records as $record) {
                $this->_em->remove($record);
            }
            $this->_em->flush();
        }
    }
}
