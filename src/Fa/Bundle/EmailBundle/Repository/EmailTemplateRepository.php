<?php

/**
 * This file is part of the fa bundle.
 *
 * @copyright Copyright (c) 2014, FMG
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Fa\Bundle\EmailBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * This class was generated by the Doctrine ORM.
 * Add your own custom repository methods below.
 *
 * @author Amit Limbadia <amitl@aspl.in>
 * @copyright 2014 Friday Media Group Ltd
 * @version 1.0
 */
class EmailTemplateRepository extends EntityRepository
{
    use \Fa\Bundle\CoreBundle\Search\Search;

    const ALIAS = 'et';

    const PACKAGE_TYPE_ID = 1;

    /**
     * Prepare query builder.
     *
     * @return Doctrine\ORM\QueryBuilder The query builder
     */
    public function getBaseQueryBuilder()
    {
        return $this->createQueryBuilder(self::ALIAS);
    }

    /**
     * Find one by identifier and locale.
     *
     * @param string $identifier
     * @param string $locale
     *
     * @return string
     */
    public function findOneByIdentifierAndLocale($identifier, $locale)
    {
        $query = $this->createQueryBuilder(self::ALIAS)
        ->andWhere(sprintf('%s.identifier = \'%s\'', self::ALIAS, $identifier))
        ->andWhere(sprintf('%s.status = %d', self::ALIAS, '1'))
        ->getQuery();

        $query->setHint(
            \Gedmo\Translatable\TranslatableListener::HINT_TRANSLATABLE_LOCALE,
            $locale // take locale from session or request etc.
        );

        $query->setHint(
            \Gedmo\Translatable\TranslatableListener::HINT_FALLBACK,
            true // fallback to default values in case if record is not translated
        );

        $query->setHint(\Gedmo\Translatable\TranslatableListener::HINT_INNER_JOIN, true);

        $query->setHint(\Doctrine\ORM\Query::HINT_CUSTOM_OUTPUT_WALKER, 'Gedmo\Translatable\Query\TreeWalker\TranslationWalker');

        $result = $query->getResult();

        if (count($result) && isset($result[0])) {
            return $result[0];
        }
    }

    /**
     * get schedual parameter array
     *
     * @param string $identifier
     * @param string $locale
     *
     * @return array
     */
    public function getSchedualParameterArray($identifier, $locale)
    {
        $emailTemplateParams = $this->findOneByIdentifierAndLocale($identifier, $locale);
        $parameters = array();

        if ($emailTemplateParams && $emailTemplateParams->getSchedual()) {
            $parameters = array_combine(explode('|', $emailTemplateParams->getParams()), explode('|', $emailTemplateParams->getParamsValue()));
        }

        return $parameters;
    }

    /**
     * Add email template subject filter to existing query object.
     *
     * @param string $subject Email template subject.
     */
    protected function addSubjectFilter($subject = null)
    {
        $this->queryBuilder->andWhere(sprintf('%s.subject LIKE \'%%%s%%\'', $this->getRepositoryAlias(), $subject));
    }

    /**
     * Add email template status filter to existing query object.
     *
     * @param integer $status Status.
     */
    protected function addStatusFilter($status = null)
    {
        $this->queryBuilder->andWhere($this->getRepositoryAlias().'.status = '.$status);
    }

    /**
     * Get all email template identifiers.
     *
     * @return array
     */
    public function getAllEmailTemplateIdentifierArray()
    {
        $identifiersArray = array();
        $identifiers = $this->createQueryBuilder(self::ALIAS)
        ->orderBy(self::ALIAS.'.name', 'ASC')
        ->getQuery()->getResult();

        foreach ($identifiers as $identifier) {
            $identifiersArray[$identifier->getIdentifier()] = $identifier->getName();
        }

        return $identifiersArray;
    }
}
