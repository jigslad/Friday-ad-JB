<?php

/**
 * This file is part of the fa bundle.
 *
 * @copyright Copyright (c) 2014, FMG
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Fa\Bundle\UserBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Fa\Bundle\UserBundle\Entity\UserAddressBook;
use Fa\Bundle\EntityBundle\Repository\LocationRepository;
use Fa\Bundle\CoreBundle\Manager\CommonManager;
use Fa\Bundle\PaymentBundle\Repository\DeliveryMethodOptionRepository;

/**
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 *
 * @author Samir Amrutya <samiram@aspl.in>
 * @copyright 2014 Friday Media Group Ltd
 * @version v1.0
 */
class UserAddressBookRepository extends EntityRepository
{
    const ALIAS = 'uab';

    /**
     * Get query builder.
     *
     * @return Doctrine\ORM\QueryBuilder The query builder.
     */
    public function getBaseQueryBuilder()
    {
        return $this->createQueryBuilder(self::ALIAS);
    }

    /**
     * Add address to user's address book.
     *
     * @param object $userObject      User object.
     * @param array  $userAddressInfo User address information array.
     */
    public function addUserAddress($userObject, array $userAddressInfo)
    {
        $stateName     = isset($userAddressInfo['state']) ? $userAddressInfo['state'] : (isset($userAddressInfo['domicile_name']) ? $userAddressInfo['domicile_name'] : null);
        $townName      = (isset($userAddressInfo['city']) ? $userAddressInfo['city'] : (isset($userAddressInfo['town_name']) ? $userAddressInfo['town_name'] : null));
        $address       = isset($userAddressInfo['street_address']) ? $userAddressInfo['street_address'] : null;
        $address2      = isset($userAddressInfo['street_address_2']) ? $userAddressInfo['street_address_2'] : null;
        $zip           = isset($userAddressInfo['postalCode']) ? $userAddressInfo['postalCode'] : (isset($userAddressInfo['zip']) ? $userAddressInfo['zip'] : null);
        $countryObject = $this->_em->getRepository('FaEntityBundle:Location')->find(LocationRepository::COUNTY_ID);
        $stateName     = trim($stateName);
        $townName      = trim($townName);
        $address       = trim($address);
        $address2      = trim($address2);
        $zip           = trim($zip);

        $query = $this->getBaseQueryBuilder();

        if ($stateName) {
            $query->andWhere(self::ALIAS.'.county = :county')
            ->setParameter('county', $stateName);
        }

        if ($townName) {
            $query->andWhere(self::ALIAS.'.town = :town')
            ->setParameter('town', $townName);
        }

        if ($address) {
            $query->andWhere(self::ALIAS.'.street_address = :address')
            ->setParameter('address', $address);
        }

        if ($address2) {
            $query->andWhere(self::ALIAS.'.street_address_2 = :address2')
            ->setParameter('address2', $address2);
        }

        if ($zip) {
            $query->andWhere("replace(".self::ALIAS.".zip, ' ', '') = replace(:zip,' ','') ")
            ->setParameter('zip', $zip);
        }

        if ($userObject) {
            $query->andWhere(self::ALIAS.'.user = '.$userObject->getId());
        }

        $userAddress = $query
            ->addOrderBy(self::ALIAS.'.id', 'DESC')
            ->setMaxResults(1)
            ->getQuery()
            ->getOneOrNullResult();

        if (!$userAddress) {
            $userAddresses = $this->_em->getRepository('FaUserBundle:UserAddressBook')->findOneBy(array('user' => $userObject->getId()));

            $userAddressBook = new UserAddressBook();
            $userAddressBook->setFirstName($userObject->getFullName());
            $userAddressBook->setUser($userObject);
            $userAddressBook->setCountry($countryObject->getName());
            $userAddressBook->setTown($townName);
            $userAddressBook->setStreetAddress($address);
            $userAddressBook->setStreetAddress2($address2);
            $userAddressBook->setZip($zip);
            $userAddressBook->setCounty($stateName);

            if (!$userAddresses) {
                $userAddressBook->setIsInvoiceAddress(1);
            }

            $this->_em->persist($userAddressBook);
            $this->_em->flush($userAddressBook);
        }
    }

    /**
     * Get user address using post code.
     *
     * @param integer $userId   User id.
     * @param string  $postCode Post code.
     *
     * @return mixed
     */
    public function getAddressByPostCodeForUser($userId, $postCode)
    {
        return $this->getBaseQueryBuilder()
            ->select(self::ALIAS.'.street_address', self::ALIAS.'.street_address_2', self::ALIAS.'.zip', self::ALIAS.'.county as domicile_name', self::ALIAS.'.town as town_name')
            ->andWhere(self::ALIAS.'.user = '.$userId)
            ->andWhere("replace(".self::ALIAS.".zip, ' ', '') = replace(:zip,' ','') ")
            ->setParameter('zip', $postCode)
            ->addOrderBy(self::ALIAS.'.id', 'DESC')
            ->setMaxResults(1)
            ->getQuery()->getOneOrNullResult();
    }


    /**
     * Get all user address.
     *
     * @param integer $userId                    User id.
     * @param integer $userAddressBookId         User address book id.
     * @param boolean $withIsInvoiceAddressField With invoice address field flag.
     * @param boolean $isInvoiceAddressFlag      Is invoice address flag.
     *
     * @return array
     */
    public function getAddressByUser($userId, $userAddressBookId = null, $withIsInvoiceAddressField = false, $isInvoiceAddressFlag = false)
    {
        $addressesArray = array();

        $qb = $this->getBaseQueryBuilder()
            ->select(self::ALIAS.'.id', self::ALIAS.'.first_name', self::ALIAS.'.street_address', self::ALIAS.'.street_address_2', self::ALIAS.'.zip', self::ALIAS.'.county as domicile_name', self::ALIAS.'.town as town_name', self::ALIAS.'.country as country_name', self::ALIAS.'.is_invoice_address')
            ->andWhere(self::ALIAS.'.user = '.$userId)
            ->addOrderBy(self::ALIAS.'.id', 'DESC');

        if ($isInvoiceAddressFlag) {
            $qb->andWhere(self::ALIAS.'.is_invoice_address = 1');
        }
        if ($userAddressBookId) {
            $qb->andWhere(self::ALIAS.'.id = '.$userAddressBookId);
        }

        $addresses = $qb->getQuery()
            ->getResult();

        foreach ($addresses as $address) {
            $addressesArray[$address['id']] = array(
                                                'first_name' => $address['first_name'],
                                                'street_address' => trim($address['street_address'].' '.$address['street_address_2']),
                                                'domicile_name' => $address['domicile_name'],
                                                'town_name' => $address['town_name'],
                                                'zip' => $address['zip'],
                                                'country_name' => $address['country_name'],
                                            );
            if ($withIsInvoiceAddressField) {
                $addressesArray[$address['id']]['is_invoice_address'] = $address['is_invoice_address'];
            }
        }

        return ($isInvoiceAddressFlag ? array_shift($addressesArray) : $addressesArray);
    }

    /**
     * Get user address options.
     *
     * @param integer $userId           User id.
     * @param integer $deliveryMethodId Delivery method id.
     * @param object  $container        Container identifier.
     *
     * @return array
     */
    public function getUserAddressOptions($userId, $deliveryMethodId, $container)
    {
        $translator = CommonManager::getTranslator($container);
        $addresses  = $this->getAddressByUser($userId);

        if ($deliveryMethodId == DeliveryMethodOptionRepository::POSTED_OR_COLLECT_ID) {
            $options['-1'] = $translator->trans('I will collect the item', array(), 'frontend-buy-now');
        }
        if (count($addresses)) {
            foreach ($addresses as $addressId => $address) {
                $options[$addressId] = $translator->trans('Post to', array(), 'frontend-buy-now');
            }
        }
        $options[0] = $translator->trans('Add new delivery address', array(), 'frontend-buy-now');

        return $options;
    }

    /**
     * Check is valid user address.
     *
     * @param integer $userId
     * @param integer $userAddressId
     *
     * @return mixed
     */
    public function isValidUserAddress($userId, $userAddressId)
    {
        $query = $this->getBaseQueryBuilder()
        ->where(self::ALIAS.'.id = '.$userAddressId);
        $address = $query->getQuery()->getOneOrNullResult();

        if ($address && $address->getUser()->getId() == $userId) {
            return $address;
        } else {
            return false;
        }
    }

    /**
     * Set latest address as invoice address.
     *
     * @param integer $userId User id.
     */
    public function setLatestAddressAsInvoiceAddress($userId)
    {
        //set all address's is_invoice_address to 0
        $this->createQueryBuilder(self::ALIAS)
            ->update()
            ->set(self::ALIAS.'.is_invoice_address', '0')
            ->andWhere(self::ALIAS.'.user = :userId')
            ->setParameter('userId', $userId)
            ->getQuery()
            ->execute();

        //get latest address id.
        $latestAddressObj = $this->findOneBy(array('user' => $userId), array('id' => 'DESC'));

        if ($latestAddressObj) {
            $this->createQueryBuilder(self::ALIAS)
                ->update()
                ->set(self::ALIAS.'.is_invoice_address', '1')
                ->andWhere(self::ALIAS.'.user = :userId')
                ->setParameter('userId', $userId)
                ->andWhere(self::ALIAS.'.id = :Id')
                ->setParameter('Id', $latestAddressObj->getId())
                ->getQuery()
                ->execute();
        }
    }

    /**
     * Set latest address as invoice address.
     *
     * @param integer $userAddressId User address id.
     * @param integer $userId        User id.
     */
    public function setAddressAsInvoiceAddress($userAddressId, $userId)
    {
        //set all address's is_invoice_address to 0
        $this->createQueryBuilder(self::ALIAS)
        ->update()
        ->set(self::ALIAS.'.is_invoice_address', '0')
        ->andWhere(self::ALIAS.'.user = :userId')
        ->setParameter('userId', $userId)
        ->getQuery()
        ->execute();

        $this->createQueryBuilder(self::ALIAS)
            ->update()
            ->set(self::ALIAS.'.is_invoice_address', '1')
            ->andWhere(self::ALIAS.'.user = :userId')
            ->setParameter('userId', $userId)
            ->andWhere(self::ALIAS.'.id = :Id')
            ->setParameter('Id', $userAddressId)
            ->getQuery()
            ->execute();
    }
}
