<?php

/**
 * This file is part of the fa bundle.
 *
 * @copyright Copyright (c) 2014, FMG
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Fa\Bundle\UserBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Fa\Bundle\UserBundle\Entity\RoleResourcePermission;

/**
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 *
 * @author Piyush Parmar <piyush@aspl.in>
 * @copyright 2014 Friday Media Group Ltd
 * @version v1.0
 */
class RoleResourcePermissionRepository extends EntityRepository
{
    const ALIAS = 'rrp';

    /**
     * Remove record by role id.
     *
     * @param integer $roleId Role id.
     */
    public function removeRecordsByRoleId($roleId)
    {
        $this->createQueryBuilder(self::ALIAS)
            ->delete()
            ->andWhere(sprintf('%s.role = %d', self::ALIAS, $roleId))
            ->getQuery()
            ->execute();
    }

    /**
     * Get selected record by role id.
     *
     * @param integer $roleId Role id.
     *
     * @return array
     */
    public function getSelectedRecordsByRoleId($roleId)
    {
        $results = $this->createQueryBuilder(self::ALIAS)
              ->where(self::ALIAS.'.role = :roleId')
              ->setParameter('roleId', $roleId)
              ->getQuery()
              ->getResult();

        return $results;
    }

    /**
     * Save role resource & permission.
     *
     * @param Request $request A Request object.
     */
    public function saveRoleResourcePermission($request)
    {
        $entity     = new RoleResourcePermission();
        $postedData = $request->get('fa_bundle_userbundle_roleresourcepermission');
        $this->removeRecordsByRoleId($postedData['role']);
        if ($postedData && isset($postedData['role']) && isset($postedData['resource'])) {
            $checkedResourcesStr   = trim($postedData['resource'], ',');
            $checkedResourcesArray = explode(',', $checkedResourcesStr);
            $objRole               = $this->_em->getRepository('FaUserBundle:Role')->find($postedData['role']);
            $objResources          = $this->_em->getRepository('FaUserBundle:Resource')->getResourcesByIds($checkedResourcesArray);

            if ($objResources) {
                foreach ($objResources as $objResource) {
                    $childResourcesArray = $this->_em->getRepository('FaUserBundle:Resource')->getHiddenChildResources($objResource->getId());
                    if ($childResourcesArray) {
                        foreach ($childResourcesArray as $childResource) {
                            $objChildResource = $this->_em->getRepository('FaUserBundle:Resource')->findOneById($childResource['id']);
                            $entity           = new RoleResourcePermission();
                            $entity->setRole($objRole);
                            $entity->setResource($objChildResource);
                            $this->_em->persist($entity);
                            $this->_em->flush();
                        }//foreach
                    }//endif
                    $entity = new RoleResourcePermission();
                    $entity->setRole($objRole);
                    $entity->setResource($objResource);
                    $this->_em->persist($entity);
                    $this->_em->flush();
                }//foreach
            }//end if
        }//endif
    }
}
