<?php

/**
 * This file is part of the fa bundle.
 *
 * @copyright Copyright (c) 2014, FMG
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Fa\Bundle\UserBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\QueryBuilder;
use Fa\Bundle\CoreBundle\Manager\CommonManager;
use Fa\Bundle\EntityBundle\Repository\EntityRepository as BaseEntityRepository;
use Fa\Bundle\AdBundle\Repository\AdRepository;
use Symfony\Component\HttpKernel\Bundle\Bundle;
use Fa\Bundle\UserBundle\Repository\UserStatisticsRepository;
use Fa\Bundle\UserBundle\Solr\UserSolrFieldMapping;
use Fa\Bundle\EntityBundle\Repository\LocationRepository;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Security\Core\User\UserProviderInterface;
use Symfony\Component\Security\Core\User\UserInterface;
use Symfony\Component\Security\Core\Exception\UsernameNotFoundException;
use Symfony\Component\Security\Core\Exception\UnsupportedUserException;
use Doctrine\ORM\NoResultException;
use Fa\Bundle\UserBundle\Manager\UserImageManager;
use Gedmo\Sluggable\Util as Sluggable;
use Fa\Bundle\EntityBundle\Repository\CategoryRepository;
use Gedmo\Sluggable\Util\Urlizer as Urlizer;
use Fa\Bundle\PromotionBundle\Repository\UpsellRepository;
use Fa\Bundle\UserBundle\Entity\UserSite;
use Fa\Bundle\UserBundle\Repository\UserCreditRepository;
use Fa\Bundle\UserBundle\Repository\UserCreditUsedRepository;
use Fa\Bundle\CoreBundle\DQL\MatchAgainst;
use Fa\Bundle\PaymentBundle\Repository\PaymentTokenizationRepository;
use Fa\Bundle\PaymentBundle\Entity\PaymentTokenization;
use Symfony\Component\HttpFoundation\Cookie;

/**
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 *
 * @author Piyush Parmar <piyush@aspl.in>
 * @copyright 2014 Friday Media Group Ltd
 * @version v1.0
 */
class UserRepository extends EntityRepository implements UserProviderInterface
{
    use \Fa\Bundle\CoreBundle\Search\Search;

    const ALIAS = 'u';
    const ALIAS_R = 'u_rec';
    const ALIAS_S = 'u_sen';
    const ALIAS_REVIEWER = 'u_reviewer';
    const CACHE_TTL = 21600;
    const YAC_PRIACY_NUM_PREFIX = '070';

    /**
     * Get query builder.
     *
     * @return Doctrine\ORM\QueryBuilder The query builder.
     */
    public function getBaseQueryBuilder()
    {
        return $this->createQueryBuilder(self::ALIAS);
    }

    /**
     * Get user roles.
     *
     * @param object $user Array of data.
     *
     * @return array
     */
    public function getUserRolesArray($user)
    {
        $userRolesArray = array();

        foreach ($user->getRoles() as $userRole) {
            $userRolesArray[] = $userRole->getName();
        }
        return $userRolesArray;
    }

    /**
     * Add user name filter to existing query object.
     *
     * @param string $customerName User name.
     */
    protected function addCustomerNameFilter($customerName = null)
    {
        $this->queryBuilder->andWhere(sprintf('%s.first_name LIKE \'%%%s%%\' or %s.last_name LIKE \'%%%s%%\'', $this->getRepositoryAlias(), $customerName, $this->getRepositoryAlias(), $customerName));
    }

    /**
     * Add user email address ilter to existing query object.
     *
     * @param string $email User email.
     */
    protected function addEmailFilter($email = null)
    {
        $this->queryBuilder->andWhere(sprintf('%s.email LIKE \'%%%s%%\'', $this->getRepositoryAlias(), $email));
    }

    /**
     * Add user email address ilter to existing query object.
     *
     * @param string $email User email.
     */
    protected function addPhoneFilter($phone = null)
    {
        $this->queryBuilder->andWhere(sprintf('%s.phone LIKE \'%%%s%%\'', $this->getRepositoryAlias(), $phone));
    }

    /**
     * Add user email address ilter to existing query object.
     *
     * @param string $email User email.
     */
    protected function addPaypalEmailFilter($paypalEmail = null)
    {
        $this->queryBuilder->andWhere(sprintf('%s.paypal_email LIKE \'%%%s%%\'', $this->getRepositoryAlias(), $paypalEmail));
    }

    /**
     * Add username filter to existing query object.
     *
     * @param string $username Username.
     */
    protected function addUsernameFilter($username = null)
    {
        $this->queryBuilder->andWhere(sprintf('%s.username LIKE \'%%%s%%\'', $this->getRepositoryAlias(), $username));
    }

    /**
     * Add firstname filter to existing query object.
     *
     * @param string $firstName FirstName.
     */
    protected function addFirstNameFilter($firstName = null)
    {
        if ($firstName) {
            if (in_array(strtolower($firstName), CommonManager::getMySqlStopWords())) {
                $this->queryBuilder->andWhere(self::ALIAS.'.first_name LIKE :firstName');
                $this->queryBuilder->setParameter('firstName', $firstName.'%');
            } else {
                $this->queryBuilder->andWhere('MATCH_AGAINST ('.self::ALIAS.'.first_name, :firstName) > 0.0');
                $this->queryBuilder->setParameter('firstName', $firstName);
            }
        }
    }

    /**
     * Add lastname filter to existing query object.
     *
     * @param string $lastName LastName.
     */
    protected function addLastNameFilter($lastName = null)
    {
        if ($lastName) {
            if (in_array(strtolower($lastName), CommonManager::getMySqlStopWords())) {
                $this->queryBuilder->andWhere(self::ALIAS.'.last_name LIKE :lastName');
                $this->queryBuilder->setParameter('lastName', $lastName.'%');
            } else {
                $this->queryBuilder->andWhere('MATCH_AGAINST ('.self::ALIAS.'.last_name, :lastName) > 0.0');
                $this->queryBuilder->setParameter('lastName', $lastName);
            }
        }
    }

    /**
     * Add business name filter to existing query object.
     *
     * @param string $businessName BusinessName.
     */
    protected function addBusinessNameFilter($businessName = null)
    {
        $this->queryBuilder->andWhere(self::ALIAS.'.business_name LIKE :business_name');
        $this->queryBuilder->setParameter('business_name', '%'.$businessName.'%');
    }

    /**
     * Add username filter to existing query object.
     *
     * @param string $username Username.
     */
    protected function addRoleFilter($role = null)
    {
        if ($role) {
            if (!is_array($role)) {
                $role = array($role);
            }

            $role = array_filter($role);

            if (count($role)) {
                $this->queryBuilder->andWhere($this->getRepositoryAlias().'.role IN (:role)');
                $this->queryBuilder->setParameter('role', $role);
            }
        }
    }

    /**
     * Add status filter to existing query object.
     *
     * @param string $status Status.
     */
    protected function addStatusFilter($status = null)
    {
        $this->addWhereInFilter('status', $status);
    }

    /**
     * Add domicile filter to existing query object.
     *
     * @param string $domicileId domicile id.
     */
    protected function addLocationDomicileFilter($domicileId = null)
    {
        $this->addWhereInFilter('location_domicile', $domicileId);
    }

    /**
     * Add town filter to existing query object.
     *
     * @param string $townId town id.
     */
    protected function addLocationTownFilter($townId = null)
    {
        $this->addWhereInFilter('location_town', $townId);
    }

    /**
     * Add credit filter.
     *
     * @param string $customerName User name.
     */
    protected function addCreditFilter($credit = null)
    {
        if ($credit) {
            if ($credit == 'A') {
                $this->queryBuilder->innerJoin('FaUserBundle:UserCredit', UserCreditRepository::ALIAS, 'WITH', UserCreditRepository::ALIAS.'.user = '.self::ALIAS.'.id')
                    ->andWhere(UserCreditRepository::ALIAS.'.status = 1')
                    ->andWhere(UserCreditRepository::ALIAS.'.credit > 0');
            } elseif ($credit == 'U') {
                $this->queryBuilder->innerJoin('FaUserBundle:UserCreditUsed', UserCreditUsedRepository::ALIAS, 'WITH', UserCreditUsedRepository::ALIAS.'.user = '.self::ALIAS.'.id');
            }
        }
    }

    /**
     * Get status id from user id.
     *
     * @param array $userId User id array.
     *
     * @return array
     */
    public function getStatusIdArrayByUserId($userId = array())
    {
        $qb = $this->createQueryBuilder(self::ALIAS)
        ->select(self::ALIAS.'.id', 'IDENTITY('.self::ALIAS.'.status) as eid');

        if (!is_array($userId)) {
            $userId = array($userId);
        }

        if (count($userId)) {
            $qb->andWhere(self::ALIAS.'.id IN (:userId)');
            $qb->setParameter('userId', $userId);
        }

        $objResources = $qb->getQuery()->getArrayResult();
        $arr = array();
        if (count($objResources)) {
            for ($i=0; $i<count($objResources); $i++) {
                $arr[$objResources[$i]['id']] = $objResources[$i]['eid'];
            }
        }

        return $arr;
    }

    /**
     * Get created at ad array of most recent ad.
     *
     * @param array $userId User id array.
     *
     * @return array
     */
    public function getCreatedAtAdArrayByUserId($userId = array())
    {
        $qb = $this->createQueryBuilder(self::ALIAS)
        ->select(self::ALIAS.'.id', AdRepository::ALIAS.'.created_at')
        ->innerJoin('Fa\Bundle\AdBundle\Entity\Ad', AdRepository::ALIAS, 'WITH', self::ALIAS.'.id = '.AdRepository::ALIAS.'.user');

        if (!is_array($userId)) {
            $userId = array($userId);
        }

        if (count($userId)) {
            $qb->andWhere(self::ALIAS.'.id IN (:userId)');
            $qb->setParameter('userId', $userId);
            $qb->addGroupBy(self::ALIAS.'.id');
            $qb->addOrderBy(AdRepository::ALIAS.'.created_at');
        }

        $objResources = $qb->getQuery()->getArrayResult();

        $arr = array();
        if (count($objResources)) {
            for ($i=0; $i<count($objResources); $i++) {
                $arr[$objResources[$i]['id']] = $objResources[$i]['created_at'];
            }
        }

        return $arr;
    }

    /**
     * Get expires at ad array of most recent ad.
     *
     * @param array $userId User id array.
     *
     * @return array
     */
    public function getExpiresAtAdArrayByUserId($userId = array())
    {
        $qb = $this->createQueryBuilder(self::ALIAS)
        ->select(self::ALIAS.'.id', AdRepository::ALIAS.'.expires_at')
        ->innerJoin('Fa\Bundle\AdBundle\Entity\Ad', AdRepository::ALIAS, 'WITH', self::ALIAS.'.id = '.AdRepository::ALIAS.'.user');

        if (!is_array($userId)) {
            $userId = array($userId);
        }

        if (count($userId)) {
            $qb->andWhere(self::ALIAS.'.id IN (:userId)');
            $qb->setParameter('userId', $userId);
            $qb->addGroupBy(self::ALIAS.'.id');
            $qb->addOrderBy(AdRepository::ALIAS.'.expires_at');
        }

        $objResources = $qb->getQuery()->getArrayResult();

        $arr = array();
        if (count($objResources)) {
            for ($i=0; $i<count($objResources); $i++) {
                $arr[$objResources[$i]['id']] = $objResources[$i]['expires_at'];
            }
        }

        return $arr;
    }

    /**
     * Get number of ads for each user.
     *
     * @param array $userId User id array.
     *
     * @return array
     */
    public function getTotalAdArrayByUserId($userId = array())
    {
        $qb = $this->createQueryBuilder(self::ALIAS)
        ->select(self::ALIAS.'.id', self::ALIAS.'.total_ad');

        if (!is_array($userId)) {
            $userId = array($userId);
        }

        if (count($userId)) {
            $qb->andWhere(self::ALIAS.'.id IN (:userId)');
            $qb->setParameter('userId', $userId);
        }

        $objResources = $qb->getQuery()->getArrayResult();
        $arr = array();
        if (count($objResources)) {
            for ($i=0; $i<count($objResources); $i++) {
                $arr[$objResources[$i]['id']] = $objResources[$i]['total_ad'];
            }
        }

        return $arr;
    }

    /**
     * Get number of ads for each user.
     *
     * @param array $userId User id array.
     *
     * @return array
     */
    public function getUserDataArrayByUserId($userId = array())
    {
        if (!is_array($userId)) {
            $userId = array($userId);
        }

        $userId = array_unique($userId);
        $qb = $this->createQueryBuilder(self::ALIAS)
        ->select(self::ALIAS.'.id', self::ALIAS.'.first_name', self::ALIAS.'.last_name', self::ALIAS.'.business_name', self::ALIAS.'.username', self::ALIAS.'.email', self::ALIAS.'.created_at', self::ALIAS.'.password', self::ALIAS.'.town', 'IDENTITY('.self::ALIAS.'.role) as user_role_id');

        if (!is_array($userId)) {
            $userId = array($userId);
        }

        if (count($userId)) {
            $qb->andWhere(self::ALIAS.'.id IN (:userId)');
            $qb->setParameter('userId', $userId);
        }

        $objResources = $qb->getQuery()->getArrayResult();
        $arr = array();
        if (count($objResources)) {
            for ($i=0; $i<count($objResources); $i++) {
                $arr[$objResources[$i]['id']]['first_name']    = $objResources[$i]['first_name'];
                $arr[$objResources[$i]['id']]['last_name']     = $objResources[$i]['last_name'];
                $arr[$objResources[$i]['id']]['username']      = $objResources[$i]['username'];
                $arr[$objResources[$i]['id']]['business_name'] = $objResources[$i]['business_name'];
                $arr[$objResources[$i]['id']]['email']         = $objResources[$i]['email'];
                $arr[$objResources[$i]['id']]['created_at']    = $objResources[$i]['created_at'];
                $arr[$objResources[$i]['id']]['password']      = $objResources[$i]['password'];
                $arr[$objResources[$i]['id']]['town']          = $objResources[$i]['town'];
                $arr[$objResources[$i]['id']]['role_id']       = $objResources[$i]['user_role_id'];
            }
        }

        //print_r($arr);exit;

        return $arr;
    }

    /**
     * Returns user solr document object.
     *
     * @param object $user User object.
     *
     * @return Apache_Solr_Document
     */
    public function getSolrDocument($user)
    {
        $document = new \SolrInputDocument($user);

        $document = $this->addField($document, UserSolrFieldMapping::ID, $user->getId());
        $document = $this->addField($document, UserSolrFieldMapping::NAME, $user->getFullName());
        $document = $this->addField($document, UserSolrFieldMapping::PHONE, $user->getPhone());
        $document = $this->addField($document, UserSolrFieldMapping::MOBILE, $user->getMobile());
        $document = $this->addField($document, UserSolrFieldMapping::FAX, $user->getFax());
        $document = $this->addField($document, UserSolrFieldMapping::COMPANY, $user->getCompany());
        $document = $this->addField($document, UserSolrFieldMapping::URL, $user->getUrl());
        $document = $this->addField($document, UserSolrFieldMapping::EMAIL, $user->getEmail());
        $document = $this->addField($document, UserSolrFieldMapping::LOGO, $user->getLogo());
        $document = $this->addField($document, UserSolrFieldMapping::IS_PRIVATE_PHONE_NUMBER, $user->getIsPrivatePhoneNumber());
        $document = $this->addField($document, UserSolrFieldMapping::IS_PAYPAL_VERIFIED, $user->getIsPaypalVefiried());
        $document = $this->addField($document, UserSolrFieldMapping::IS_EMAIL_VERIFIED, $user->getIsEmailVerified());
        $document = $this->addField($document, UserSolrFieldMapping::CONTACT_THROUGH_PHONE, $user->getContactThroughPhone());
        $document = $this->addField($document, UserSolrFieldMapping::CONTACT_THROUGH_EMAIL, $user->getContactThroughEmail());
        $document = $this->addField($document, UserSolrFieldMapping::PROFILE_USERNAME, $user->getProfileUsername());
        $document = $this->addField($document, UserSolrFieldMapping::POSTCODE, $user->getZip());
        $document = $this->addField($document, UserSolrFieldMapping::DOMICILE_ID, ($user->getLocationDomicile() ? $user->getLocationDomicile()->getId() : null));
        $document = $this->addField($document, UserSolrFieldMapping::TOWN_ID, ($user->getLocationTown() ? $user->getLocationTown()->getId() : null));

        return $document;
    }

    /**
     * Add field to solr document.
     *
     * @param object $document Solr document object.
     * @param string $field    Field to index or store.
     * @param string $value    Value of field.
     *
     * @return object
     */
    private function addField($document, $field, $value)
    {
        if ($value != null) {
            $document->addField($field, $value);
        }

        return $document;
    }

    /**
     * Get user detail for ad.
     *
     * @param integer $userId User id.
     *
     * @return array
     */
    public function getAdUserDetail($userId)
    {
        $userTypes = RoleRepository::getUserTypes();
        $qb = $this->createQueryBuilder(self::ALIAS)
            ->select(self::ALIAS.'.id', self::ALIAS.'.contact_through_phone', self::ALIAS.'.contact_through_email', self::ALIAS.'.is_private_phone_number', self::ALIAS.'.phone', self::ALIAS.'.image', self::ALIAS.'.first_name', self::ALIAS.'.last_name', self::ALIAS.'.created_at', self::ALIAS.'.business_name', self::ALIAS.'.business_category_id', 'IDENTITY('.self::ALIAS.'.role) as role_id', LocationRepository::ALIAS.'.name as town_name', LocationRepository::ALIAS.'.latitude as user_latitude', LocationRepository::ALIAS.'.longitude as user_longitude', 'COUNT('.UserReviewRepository::ALIAS.'.id) as total_review', 'AVG('.UserReviewRepository::ALIAS.'.rating) as user_rating', UserSiteRepository::ALIAS.'.path as company_logo', UserSiteRepository::ALIAS.'.about_us', UserSiteRepository::ALIAS.'.website_link', UserSiteRepository::ALIAS.'.company_address', UserSiteRepository::ALIAS.'.company_welcome_message', UserSiteRepository::ALIAS.'.phone1', UserSiteRepository::ALIAS.'.phone2', 'IDENTITY('.self::ALIAS.'.status) AS status_id')
            ->leftJoin(self::ALIAS.'.location_town', LocationRepository::ALIAS)
            ->leftJoin('Fa\Bundle\UserBundle\Entity\UserSite', UserSiteRepository::ALIAS, 'WITH', self::ALIAS.'.id = '.UserSiteRepository::ALIAS.'.user')
            ->leftJoin('Fa\Bundle\UserBundle\Entity\UserReview', UserReviewRepository::ALIAS, 'WITH', UserReviewRepository::ALIAS.'.user = '.self::ALIAS.'.id AND '.UserReviewRepository::ALIAS.'.user = '.$userId.' AND '.UserReviewRepository::ALIAS.'.rating IS NOT NULL AND '.UserReviewRepository::ALIAS.'.status = '.UserReviewRepository::MODERATION_QUEUE_STATUS_OKAY)
            ->andWhere(self::ALIAS.'.id = :userId')
            ->setParameter('userId', $userId)
            ->distinct(self::ALIAS.'.id');

        $userDetail = $qb->getQuery()->getOneOrNullResult();
        $userDetail['user_rating'] = round($userDetail['user_rating'], 1);
        //get business user name else first & last name.
        $userDetail['user_name'] = $this->getProfileNameFromArray($userDetail);

        unset($userDetail['first_name'], $userDetail['last_name'], $userDetail['business_name']);
        if (isset($userDetail['role_id']) && $userDetail['role_id']) {
            $userDetail['user_role'] = $userTypes[$userDetail['role_id']];
            if ($userDetail['role_id'] == RoleRepository::ROLE_BUSINESS_SELLER_ID || $userDetail['role_id'] == RoleRepository::ROLE_NETSUITE_SUBSCRIPTION_ID) {
                // Code for google analytics
                $userUpsell = $this->_em->getRepository('FaUserBundle:UserUpsell')->getUserUpsell($userDetail['id']);
                if ($userUpsell) {
                    $userDetail['upsells'] = $userUpsell;
                }
            }
        }

        return $userDetail;
    }

    /**
     * Get user detail for ad.
     *
     * @param integer $userId User id.
     *
     * @return array
     */
    public function getHomePageFeatureAdUserDetail($userIds)
    {
        $qb = $this->createQueryBuilder(self::ALIAS)
        ->select(self::ALIAS.'.id', self::ALIAS.'.image', self::ALIAS.'.first_name', self::ALIAS.'.last_name', self::ALIAS.'.created_at', self::ALIAS.'.business_name, IDENTITY('.self::ALIAS.'.status) AS status_id', LocationRepository::ALIAS.'.name as town_name', 'IDENTITY('.self::ALIAS.'.role) as role_id', UserSiteRepository::ALIAS.'.path as company_logo')
        //->select('partial '.self::ALIAS.'.{id, image, first_name, last_name, created_at, business_name}, partial '.LocationRepository::ALIAS.'.{id, name}, partial '.RoleRepository::ALIAS.'.{id}, partial '.UserSiteRepository::ALIAS.'.{id, path}')
        ->leftJoin(self::ALIAS.'.location_town', LocationRepository::ALIAS)
        ->leftJoin('Fa\Bundle\UserBundle\Entity\UserSite', UserSiteRepository::ALIAS, 'WITH', self::ALIAS.'.id = '.UserSiteRepository::ALIAS.'.user')
        ->andWhere(self::ALIAS.'.id IN (:userId)')
        ->setParameter('userId', $userIds)
        ->distinct(self::ALIAS.'.id');

        $userDetailArray = array();
        $userDetails     = $qb->getQuery()->getArrayResult();
        foreach ($userDetails as $userDetail) {
            //get business user name else first & last name.
            $userDetail['user_name'] = $this->getProfileNameFromArray($userDetail);

            unset($userDetail['first_name'], $userDetail['last_name'], $userDetail['business_name']);

            $userDetailArray[$userDetail['id']] = $userDetail;
        }

        return $userDetailArray;
    }

    /**
     * Get user profile name.
     *
     * @param array $userDetail User select field array
     *
     * @return mixed.
     */
    public function getProfileNameFromArray($userDetail)
    {
        $userName = null;
        //get business user name else first & last name.
        if (isset($userDetail['business_name']) && strlen(trim($userDetail['business_name']))) {
            $userName = $userDetail['business_name'];
        } elseif (isset($userDetail['first_name']) || isset($userDetail['last_name'])) {
            $userName = $userDetail['first_name'];
            if (strlen(trim($userDetail['last_name']))) {
                $userName .= ' '.strtoupper(substr($userDetail['last_name'], 0, 1)).'.';
            }
            $userName = ucwords($userName);
        }

        return $userName;
    }

    /**
     * Get user by email.
     *
     * @param string $email Email address.
     *
     * @return mixed
     */
    public function getUserByEmail($email, $container = null)
    {
        $qb = $this->createQueryBuilder(self::ALIAS)
        ->andWhere(self::ALIAS.'.email = :email')
        ->setMaxResults(1)
        ->setParameter('email', $email)->getQuery();

        if ($container) {
            $qb = $container->get('fa.query.cache.manager')->init($qb, substr(__CLASS__, strrpos(__CLASS__, '\\') + 1).__FUNCTION__.'|'.$email, 3600);
        }

        try {
            return $qb->getSingleResult();
        } catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }
    }

    /**
     * Get user by email.
     *
     * @param string $email Email address.
     *
     * @return mixed
     */
    public function getUserByUsername($username, $container = null)
    {
        $qb = $this->createQueryBuilder(self::ALIAS)
        ->andWhere(self::ALIAS.'.username = :username')
        ->setMaxResults(1)
        ->setParameter('username', $username)->getQuery();

        if ($container) {
            $qb = $container->get('fa.query.cache.manager')->init($qb, substr(__CLASS__, strrpos(__CLASS__, '\\') + 1).__FUNCTION__.'|'.$username, 1800);
        }

        try {
            return $qb->getSingleResult();
        } catch (\Doctrine\ORM\NoResultException $e) {
            return null;
        }
    }

    /**
     * Update login time & move tmp favorite ads.
     *
     * @param string  $sessionId Session id.
     * @param object  $userObj   User object.
     * @param object  $container Container identifier.
     */
    public function updateLoginTimeAndFavoriteAds($sessionId, $userObj, $container = null)
    {
        $userObj->setLastLogin(time());
        $userObj->setTotalLogin($userObj->getTotalLogin()+1);
        $userObj->setIpAddress($container->get('request_stack')->getCurrentRequest()->getClientIp());
        $this->_em->persist($userObj);
        $this->_em->flush();

        $this->_em->getRepository('FaAdBundle:AdFavorite')->moveTemporaryFavoriteAds($sessionId, $userObj->getId());
    }

    /**
     * Remove user cookies.
     *
     * @param object $responseObj Response object.
     *
     * @return Response|null
     */
    public function removeUserCookies($responseObj = null)
    {
        if (!$responseObj) {
            $response = new Response();
        } else {
            $response = $responseObj;
        }
        $response->headers->clearCookie('frontend_redirect_after_login_path_info');
        $response->headers->clearCookie('add_to_fav_session_id');
        $response->headers->clearCookie('save_search_agent_flag');
        $response->headers->clearCookie('save_add_to_fav_flag');
        $response->headers->clearCookie('ad_report_flag');
        $response->headers->clearCookie('contact_seller_flag');
        $response->headers->clearCookie('add_testimonial_flag');
        $response->headers->clearCookie('buy_now_flag');
        if (!$responseObj) {
            $response->sendHeaders();
        } else {
            return $response;
        }
    }

    /**
     * Send user registration email.
     *
     * @param object $user      User object.
     * @param object $container Container object.
     */
    public function sendUserRegistrationEmail($user, $container)
    {
        $parameters = $this->getRegistrationEmailParameters($user, $container);
        $template = 'welcome_to_your_account';

        if ($user->getRoles() && count($user->getRoles()) && ($user->getRoles()[0]->getName() == RoleRepository::ROLE_BUSINESS_SELLER || $user->getRoles()[0]->getName() == RoleRepository::ROLE_NETSUITE_SUBSCRIPTION)) {
            $categoryNames = $this->_em->getRepository('FaEntityBundle:Category')->getSubtitleCategories();
            if ($categoryNames && count($categoryNames) && array_key_exists($user->getBusinessCategoryId(), $categoryNames)) {
                $categoryName = $categoryNames[$user->getBusinessCategoryId()];
                $template     = 'welcome_to_your_account_business_'.$categoryName;
            }
        }

        $container->get('fa.mail.manager')->send($user->getEmail(), $template, $parameters, CommonManager::getCurrentCulture($container));
    }

    /**
     * Get registration email parameters.
     *
     * @param object $user      User object.
     * @param object $container Container object.
     *
     * @return array
     */
    public function getRegistrationEmailParameters($user, $container)
    {
        // user information.
        $parameters = array();
        $parameters['user_first_name']       = $user->getFirstName();
        $parameters['user_last_name']        = $user->getLastName();
        $parameters['user_email_address']    = $user->getEmail();
        $parameters['url_account_dashboard'] = '';

        if ($user->getRoles() && count($user->getRoles())) {
            if ($user->getRoles()[0]->getName() == RoleRepository::ROLE_BUSINESS_SELLER || $user->getRoles()[0]->getName() == RoleRepository::ROLE_NETSUITE_SUBSCRIPTION) {
                $parameters['category_name'] = $container->get('fa.entity.cache.manager')->getEntityNameById('FaEntityBundle:Category', $user->getBusinessCategoryId());
                $objPackages = $this->_em->getRepository('FaPromotionBundle:Package')->getShopPackageByCategory($user->getBusinessCategoryId(), $user->getRoles()[0]->getId());
                if ($objPackages && count($objPackages)) {
                    $i = 1;
                    foreach ($objPackages as $objPackage) {
                        $pkgNumber = CommonManager::getConvertNumberToWords($i, 2);
                        if ($objPackage->getPrice()) {
                            $parameters[$pkgNumber.'_package_price'] = CommonManager::formatCurrency($objPackage->getPrice(), $container);
                        } else {
                            $parameters[$pkgNumber.'_package_price'] = "Free";
                        }
                        $i++;
                    }
                }
            }
        }

        return $parameters;
    }

    /**
     * Load user by username.
     *
     * @param $username
     */
    public function loadUserByUsername($username)
    {
        $q = $this
        ->createQueryBuilder('u')
        ->where('u.username = :username AND u.status = :status')
        ->setParameter('username', $username)
        ->setParameter('status', BaseEntityRepository::USER_STATUS_ACTIVE_ID)
        ->setMaxResults(1)
        ->getQuery();

        try {
            // The Query::getSingleResult() method throws an exception
            // if there is no record matching the criteria.
            $user = $q->getSingleResult();
        } catch (\Doctrine\ORM\NoResultException $e) {
            throw new UsernameNotFoundException(sprintf('Unable to find an active admin AcmeUserBundle:User object identified by "%s".', $username), 0, $e);
        }

        return $user;
    }

    /**
     * Refresh user.
     *
     * @param UserInterface $user
     */
    public function refreshUser(UserInterface $user)
    {
        $class = get_class($user);
        if (!$this->supportsClass($class)) {
            throw new UnsupportedUserException(sprintf('Instances of "%s" are not supported.', $class));
        }

        return $this->loadUserByUsername($user->getUsername());
    }

    /**
     * Supports class.
     *
     * @param $class
     */
    public function supportsClass($class)
    {
        return $this->getEntityName() === $class || is_subclass_of($class, $this->getEntityName());
    }

    /**
     * Remove user data.
     *
     * @param integer $userId    User id.
     * @param object  $container Container object.
     */
    public function removePrivateUserData($userId, $container)
    {
        $user = $this->find($userId);

        if ($user) {
            $webPath = $container->get('kernel')->getRootDir().'/../web';
            $orgImagePath = $webPath.DIRECTORY_SEPARATOR.$user->getImage();

            $userImageManager = new UserImageManager($container, $userId, $orgImagePath, false);
            $userImageManager->removeImage();
        }
    }

    /**
     * Get user role.
     *
     * @param integet $userId    User id.
     * @param object  $container Container identifier.
     *
     * @return array
     */
    public function getUserRole($userId, $container = null)
    {
        if ($container) {
            $culture     = CommonManager::getCurrentCulture($container);
            $tableName   = $this->getUserTableName();
            $cacheKey    = $tableName.'|'.__FUNCTION__.'|'.$userId.'_'.$culture;
            $cachedValue = CommonManager::getCacheVersion($container, $cacheKey);

            if ($cachedValue !== false) {
                return $cachedValue;
            }
        }

        $userRole = null;

        if ($userId) {
            $userObj = $this->find($userId);

            if ($userObj) {
                $userRole = ($userObj->getRole() ? $userObj->getRole()->getName() : null);
            }
        }

        if ($container) {
            CommonManager::setCacheVersion($container, $cacheKey, $userRole, self::CACHE_TTL);
        }

        return $userRole;
    }

    /**
     * Get user status.
     *
     * @param integet $userId    User id.
     * @param object  $container Container identifier.
     *
     * @return array
     */
    public function getUserStatus($userId, $container = null)
    {
        if ($container) {
            $culture     = CommonManager::getCurrentCulture($container);
            $tableName   = $this->getUserTableName();
            $cacheKey    = $tableName.'|'.__FUNCTION__.'|'.$userId.'_'.$culture;
            $cachedValue = CommonManager::getCacheVersion($container, $cacheKey);

            if ($cachedValue !== false) {
                return $cachedValue;
            }
        }

        $userStatus = null;

        if ($userId) {
            $userObj = $this->find($userId);

            if ($userObj) {
                $userStatus = ($userObj->getStatus() ? $userObj->getStatus()->getId() : null);
            }
        }

        if ($container) {
            CommonManager::setCacheVersion($container, $cacheKey, $userStatus, self::CACHE_TTL);
        }

        return $userStatus;
    }

    /**
     * Get user profile name.
     *
     * @param integet $userId    User id.
     * @param object  $container Container identifier.
     *
     * @return array
     */
    public function getUserProfileName($userId, $container = null)
    {
        if ($container) {
            $culture     = CommonManager::getCurrentCulture($container);
            $tableName   = $this->getUserTableName();
            $cacheKey    = $tableName.'|'.__FUNCTION__.'|'.$userId.'_'.$culture;
            $cachedValue = CommonManager::getCacheVersion($container, $cacheKey);

            if ($cachedValue !== false) {
                return $cachedValue;
            }
        }

        $userName = null;

        if ($userId) {
            $userObj = $this->find($userId);

            if ($userObj) {
                $userName = ($userObj->getProfileName() ? $userObj->getProfileName() : null);
            }
        }

        if ($container) {
            CommonManager::setCacheVersion($container, $cacheKey, $userName, self::CACHE_TTL);
        }

        return $userName;
    }

    /**
     * Get user profile slug.
     *
     * @param integet $userId    User id.
     * @param object  $container Container identifier.
     * @param boolean $cache     Enable cache default
     * @param object  $userObj   USer object.
     * @param object  $userSite  User site object.
     *
     * @return array
     */
    public function getUserProfileSlug($userId, $container = null, $cache = true, $userObj = null, $userSite = null)
    {
        if ($container && $cache) {
            $culture     = CommonManager::getCurrentCulture($container);
            $tableName   = $this->getUserTableName();
            $cacheKey    = $tableName.'|'.__FUNCTION__.'|'.$userId.'_'.$culture;
            $cachedValue = CommonManager::getCacheVersion($container, $cacheKey);

            if ($cachedValue !== false) {
                return $cachedValue;
            }
        }

        $userProfileSlug = 'na';

        if ($userId) {
            $userRole = $this->getUserRole($userId, $container);
            if (!$userObj) {
                $userObj = $this->find($userId);
            }

            if ($userObj && $userRole == RoleRepository::ROLE_SELLER && $userObj->getProfileName()) {
                $userProfileSlug = Sluggable\Urlizer::urlize($userObj->getProfileName(), '-');
            }

            if ($userObj && ($userRole == RoleRepository::ROLE_BUSINESS_SELLER || $userRole == RoleRepository::ROLE_NETSUITE_SUBSCRIPTION)) {
                if (!$userSite) {
                    $userSite = $this->_em->getRepository('FaUserBundle:UserSite')->findOneBy(array('user' => $userObj->getId()));
                }
                if ($userSite) {
                    $businessName = ($userObj->getBusinessName() ? $userObj->getBusinessName() : 'na');
                    $businessName = Urlizer::urlize($businessName);
                    $businessSlug = $this->_em->getRepository('FaUserBundle:UserSite')->findOneBy(array('slug' => $businessName));
                    if ($businessSlug && $businessSlug->getId() != $userSite->getId()) {
                        $userProfileSlug = $businessName.'-'.CommonManager::encryptDecrypt($container->getParameter('profile_page_encryption_key'), $userId);
                    } else {
                        $userProfileSlug = $businessName;
                    }

                    if ($businessName == 'na') {
                        $userProfileSlug = $businessName.'-'.CommonManager::encryptDecrypt($container->getParameter('profile_page_encryption_key'), $userId);
                    }
                    $userSite->setSlug($userProfileSlug);
                    $this->_em->persist($userSite);
                    $this->_em->flush($userSite);
                }
            }
        }

        if ($container && $cache) {
            CommonManager::setCacheVersion($container, $cacheKey, $userProfileSlug, self::CACHE_TTL);
        }

        return $userProfileSlug;
    }

    /**
     * Get user table name.
     *
     * @return Ambigous <string, multitype:>
     */
    private function getUserTableName()
    {
        return $this->_em->getClassMetadata('FaUserBundle:User')->getTableName();
    }

    /**
     * Get private user prfile detail.
     *
     * @param integer $userId       User id.
     * @param boolean $getSoldCount Get sold flag.
     * @param object  $container    Container object.
     *
     * @return array
     */
    public function getPrivateUserProfileDetail($userId, $getSoldCount = true, $container = null)
    {
        $qb = $this->createQueryBuilder(self::ALIAS)
        ->select(self::ALIAS.'.id', self::ALIAS.'.about_you', self::ALIAS.'.image', self::ALIAS.'.first_name', self::ALIAS.'.last_name', self::ALIAS.'.created_at', LocationRepository::ALIAS.'.name as town_name', LocationRepository::ALIAS.'d.name as domicile_name', 'COUNT('.UserReviewRepository::ALIAS.'.id) as total_review', 'AVG('.UserReviewRepository::ALIAS.'.rating) as user_rating', 'IDENTITY('.self::ALIAS.'.status) AS status_id', self::ALIAS.'.contact_through_email')
        ->leftJoin(self::ALIAS.'.location_town', LocationRepository::ALIAS)
        ->leftJoin(self::ALIAS.'.location_domicile', LocationRepository::ALIAS.'d')
        ->leftJoin('Fa\Bundle\UserBundle\Entity\UserReview', UserReviewRepository::ALIAS, 'WITH', UserReviewRepository::ALIAS.'.user = '.self::ALIAS.'.id AND '.UserReviewRepository::ALIAS.'.user = '.$userId.' AND '.UserReviewRepository::ALIAS.'.rating IS NOT NULL AND '.UserReviewRepository::ALIAS.'.status = '.UserReviewRepository::MODERATION_QUEUE_STATUS_OKAY)
        ->andWhere(self::ALIAS.'.id = :userId')
        ->andWhere(self::ALIAS.'.status IN (:userStatus)')
        ->setParameter('userStatus', array(BaseEntityRepository::USER_STATUS_ACTIVE_ID))
        ->setParameter('userId', $userId)
        ->distinct(self::ALIAS.'.id');

        $userDetail = $qb->getQuery()->getOneOrNullResult();
        $userDetail['user_rating'] = round($userDetail['user_rating'], 1);
        //get business user name else first & last name.
        $userDetail['user_name'] = $this->getProfileNameFromArray($userDetail);

        $categoryIds = array(
            CategoryRepository::FOR_SALE_ID,
            CategoryRepository::ANIMALS_ID,
            CategoryRepository::MOTORS_ID,
        );

        if ($getSoldCount) {
            $userDetail['sold_ad_count'] = $this->_em->getRepository('FaAdBundle:Ad')->getSoldAdCountForUserByCategories($userId, $categoryIds, $container);
        }

        return $userDetail;
    }

    /**
     * Get business user prfile detail.
     *
     * @param integer $userId       User id.
     * @param boolean $getSoldCount Get sold flag.
     * @param boolean $getLatLong   Get lat long of user.
     * @param object  $container    Container object.
     *
     * @return array
     */
    public function getBusinessUserProfileDetail($userId, $getSoldCount = true, $getLatLong = true, $container = null)
    {
        $qb = $this->createQueryBuilder(self::ALIAS)
        ->select(self::ALIAS.'.id', self::ALIAS.'.zip', self::ALIAS.'.created_at', self::ALIAS.'.business_category_id', self::ALIAS.'.business_name', LocationRepository::ALIAS.'.name as town_name', LocationRepository::ALIAS.'d.name as domicile_name', UserSiteRepository::ALIAS.'.id as site_id', UserSiteRepository::ALIAS.'.path as company_logo', 'COUNT('.UserReviewRepository::ALIAS.'.id) as total_review', 'AVG('.UserReviewRepository::ALIAS.'.rating) as user_rating', UserSiteRepository::ALIAS.'.about_us', UserSiteRepository::ALIAS.'.website_link', UserSiteRepository::ALIAS.'.company_address', UserSiteRepository::ALIAS.'.company_welcome_message', UserSiteRepository::ALIAS.'.phone1', UserSiteRepository::ALIAS.'.phone2', UserSiteRepository::ALIAS.'.facebook_url', UserSiteRepository::ALIAS.'.google_url', UserSiteRepository::ALIAS.'.twitter_url', UserSiteRepository::ALIAS.'.pinterest_url', UserSiteRepository::ALIAS.'.instagram_url', UserSiteRepository::ALIAS.'.youtube_video_url', UserSiteRepository::ALIAS.'.banner_path', UserSiteRepository::ALIAS.'.show_map', 'IDENTITY('.self::ALIAS.'.status) AS status_id', self::ALIAS.'.contact_through_email', self::ALIAS.'.contact_through_phone')
        ->leftJoin(self::ALIAS.'.location_town', LocationRepository::ALIAS)
        ->leftJoin(self::ALIAS.'.location_domicile', LocationRepository::ALIAS.'d')
        ->leftJoin('Fa\Bundle\UserBundle\Entity\UserSite', UserSiteRepository::ALIAS, 'WITH', self::ALIAS.'.id = '.UserSiteRepository::ALIAS.'.user')
        ->leftJoin('Fa\Bundle\UserBundle\Entity\UserReview', UserReviewRepository::ALIAS, 'WITH', UserReviewRepository::ALIAS.'.user = '.self::ALIAS.'.id AND '.UserReviewRepository::ALIAS.'.user = '.$userId.' AND '.UserReviewRepository::ALIAS.'.rating IS NOT NULL AND '.UserReviewRepository::ALIAS.'.status = '.UserReviewRepository::MODERATION_QUEUE_STATUS_OKAY)
        ->andWhere(self::ALIAS.'.status IN (:userStatus)')
        ->setParameter('userStatus', array(BaseEntityRepository::USER_STATUS_ACTIVE_ID))
        ->andWhere(self::ALIAS.'.id = :userId')
        ->setParameter('userId', $userId)
        ->distinct(self::ALIAS.'.id');

        $userDetail = $qb->getQuery()->getOneOrNullResult();
        $userDetail['user_rating'] = round($userDetail['user_rating'], 1);
        //get business user name else first & last name.
        $userDetail['user_name'] = $this->getProfileNameFromArray($userDetail);

        $categoryIds = array(
            CategoryRepository::FOR_SALE_ID,
            CategoryRepository::ANIMALS_ID,
            CategoryRepository::MOTORS_ID,
        );

        if ($getSoldCount) {
            $userDetail['sold_ad_count'] = $this->_em->getRepository('FaAdBundle:Ad')->getSoldAdCountForUserByCategories($userId, $categoryIds, $container);
        }

        if ($getLatLong && $userDetail['zip']) {
            $zipDetail = $this->_em->getRepository('FaEntityBundle:Postcode')->getPostCodInfoArrayByLocation($userDetail['zip'], $container);
            if (count($zipDetail) && isset($zipDetail['latitude']) && $zipDetail['latitude'] && isset($zipDetail['longitude']) && $zipDetail['longitude']) {
                $userDetail['latitude'] = $zipDetail['latitude'];
                $userDetail['longitude'] = $zipDetail['longitude'];
            }
        }

        return $userDetail;
    }

    /**
     * Get user full name.
     *
     * @param array $userDetail User select field array
     *
     * @return mixed.
     */
    public function getFullNameFromArray($userDetail)
    {
        $userName = null;
        //get business user name else first & last name.
        if (isset($userDetail['business_name']) && strlen(trim($userDetail['business_name']))) {
            $userName = $userDetail['business_name'];
        } elseif (isset($userDetail['first_name']) || isset($userDetail['last_name'])) {
            $userName = $userDetail['first_name'];
            if (strlen(trim($userDetail['last_name']))) {
                $userName .= ' '.$userDetail['last_name'];
            }
        }

        return $userName;
    }

    /**
     * Add is half account filter
     *
     * @param boolean $isHalfAccount
     */
    protected function addIsHalfAccountFilter($isHalfAccount = 0)
    {
        if (is_array($isHalfAccount)) {
            $isHalfAccount = $isHalfAccount[0];
        }

        $this->queryBuilder->andWhere($this->getRepositoryAlias().'.is_half_account = '.$isHalfAccount);
    }

    /**
     * Get profile exposure user detail.
     *
     * @param integer $userId    User id.
     * @param object  $container Container object.
     *
     * @return array
     */
    public function getProfileExposureUserDetailForAdList($userId, $container = null)
    {
        if ($container) {
            $culture     = CommonManager::getCurrentCulture($container);
            $tableName   = $this->getUserTableName();
            $cacheKey    = $tableName.'|'.__FUNCTION__.'|'.$userId.'_'.$culture;
            $cachedValue = CommonManager::getCacheVersion($container, $cacheKey);

            if ($cachedValue !== false) {
                return $cachedValue;
            }
        }

        $qb = $this->createQueryBuilder(self::ALIAS)
        ->select(self::ALIAS.'.id as user_id', self::ALIAS.'.business_name', UserSiteRepository::ALIAS.'.company_welcome_message as company_welcome_message', UserSiteRepository::ALIAS.'.about_us as about_us', self::ALIAS.'.business_category_id', UserSiteRepository::ALIAS.'.path as company_logo', 'AVG('.UserReviewRepository::ALIAS.'.rating) as user_rating', 'IDENTITY('.self::ALIAS.'.status) AS status_id')
        ->leftJoin('Fa\Bundle\UserBundle\Entity\UserSite', UserSiteRepository::ALIAS, 'WITH', self::ALIAS.'.id = '.UserSiteRepository::ALIAS.'.user')
        ->leftJoin('Fa\Bundle\UserBundle\Entity\UserReview', UserReviewRepository::ALIAS, 'WITH', UserReviewRepository::ALIAS.'.user = '.self::ALIAS.'.id AND '.UserReviewRepository::ALIAS.'.user = '.$userId.' AND '.UserReviewRepository::ALIAS.'.rating IS NOT NULL AND '.UserReviewRepository::ALIAS.'.status = '.UserReviewRepository::MODERATION_QUEUE_STATUS_OKAY)
        ->andWhere(self::ALIAS.'.status IN (:userStatus)')
        ->setParameter('userStatus', array(BaseEntityRepository::USER_STATUS_ACTIVE_ID))
        ->andWhere(self::ALIAS.'.id = :userId')
        ->setParameter('userId', $userId)
        ->distinct(self::ALIAS.'.id');

        $userDetail = $qb->getQuery()->getOneOrNullResult();
        $userDetail['user_rating'] = round($userDetail['user_rating'], 1);
        //get business user name else first & last name.
        $userDetail['user_name'] = $this->getProfileNameFromArray($userDetail);


        if ($container) {
            CommonManager::setCacheVersion($container, $cacheKey, $userDetail);
        }

        return $userDetail;
    }

    /**
     * Get top business user detail.
     *
     * @param mixed $userId User id.
     *
     * @return array
     */
    public function getTopbusinessUserDetailForAdList($userId, $container = null)
    {
        if ($container) {
            $culture     = CommonManager::getCurrentCulture($container);
            $tableName   = $this->getUserTableName();
            $cacheKey    = $tableName.'|'.__FUNCTION__.'|'.$userId.'_'.$culture;
            $cachedValue = CommonManager::getCacheVersion($container, $cacheKey);

            if ($cachedValue !== false) {
                return $cachedValue;
            }
        }
        $qb = $this->createQueryBuilder(self::ALIAS)
        ->select(self::ALIAS.'.id as user_id', UserSiteRepository::ALIAS.'.company_welcome_message', UserSiteRepository::ALIAS.'.about_us', 'IDENTITY('.self::ALIAS.'.status) AS status_id', self::ALIAS.'.first_name', self::ALIAS.'.last_name', self::ALIAS.'.business_name', UserSiteRepository::ALIAS.'.path as company_logo')
        ->leftJoin('Fa\Bundle\UserBundle\Entity\UserSite', UserSiteRepository::ALIAS, 'WITH', self::ALIAS.'.id = '.UserSiteRepository::ALIAS.'.user')
        ->andWhere(self::ALIAS.'.status IN (:userStatus)')
        ->setParameter('userStatus', array(BaseEntityRepository::USER_STATUS_ACTIVE_ID))
        ->andWhere(self::ALIAS.'.id = :userId OR '.self::ALIAS.'.email = :userId')
        ->setParameter('userId', $userId)
        ->setMaxResults(1)
        ->distinct(self::ALIAS.'.id');

        $userDetail = $qb->getQuery()->getScalarResult();

        $userDetail[0]['user_name'] = $this->getProfileNameFromArray($userDetail[0]);

        if ($container) {
            CommonManager::setCacheVersion($container, $cacheKey, $userDetail);
        }

        return $userDetail;
    }

    /**
     * Get user logo detail.
     *
     * @param integer $userId User id.
     *
     * @return array
     */
    public function getUserDetailForMessage($userIds)
    {
        $qb = $this->createQueryBuilder(self::ALIAS)
        ->select(self::ALIAS.'.id', self::ALIAS.'.image', 'IDENTITY('.self::ALIAS.'.status) AS status_id', 'IDENTITY('.self::ALIAS.'.role) as role_id', UserSiteRepository::ALIAS.'.path as company_logo')
        ->leftJoin('Fa\Bundle\UserBundle\Entity\UserSite', UserSiteRepository::ALIAS, 'WITH', self::ALIAS.'.id = '.UserSiteRepository::ALIAS.'.user')
        ->andWhere(self::ALIAS.'.id IN (:userId)')
        ->setParameter('userId', $userIds)
        ->distinct(self::ALIAS.'.id');

        $userDetailArray = array();
        $userDetails     = $qb->getQuery()->getArrayResult();
        foreach ($userDetails as $userDetail) {
            $userDetail['user_image'] = '';
            if (isset($userDetail['image']) && $userDetail['image'] != null) {
                $userDetail['user_image'] = $userDetail['image'];
            } elseif (isset($userDetail['company_logo']) && $userDetail['company_logo'] != null) {
                $userDetail['user_image'] = $userDetail['company_logo'];
            }
            $userDetailArray[$userDetail['id']] = $userDetail;
        }

        return $userDetailArray;
    }

    /**
     * Get user role array based on user ids
     *
     * @param array $userIds Array of user id.
     */
    public function getUserRoleIdArrayByUserIds($userIds)
    {
        $qb = $this->getBaseQueryBuilder()
        ->select(self::ALIAS.'.id as user_id', 'IDENTITY('.self::ALIAS.'.role) as role_id')
        ->where(self::ALIAS.'.id IN (:userIds)')
        ->setParameter('userIds', $userIds);

        $userDetails = $qb->getQuery()->getResult();
        $userRoleIdArray = array();

        foreach ($userDetails as $userDetail) {
            $userRoleIdArray[$userDetail['user_id']] = $userDetail['role_id'];
        }

        return $userRoleIdArray;
    }

    /**
     * Get user phone details.
     *
     * @param array $userIds User ids array.
     *
     * @return array
     */
    public function getUserPhoneDetail($userIds)
    {
        $qb = $this->createQueryBuilder(self::ALIAS)
        ->select(self::ALIAS.'.id', self::ALIAS.'.phone', UserSiteRepository::ALIAS.'.phone1', UserSiteRepository::ALIAS.'.phone2')
        ->leftJoin('Fa\Bundle\UserBundle\Entity\UserSite', UserSiteRepository::ALIAS, 'WITH', self::ALIAS.'.id = '.UserSiteRepository::ALIAS.'.user')
        ->andWhere(self::ALIAS.'.id IN (:userIds)')
        ->setParameter('userIds', $userIds);

        $userPhoneDetailArray = array();
        $userPhoneDetails = $qb->getQuery()->getArrayResult();
        foreach ($userPhoneDetails as $userPhoneDetail) {
            $userPhoneDetailArray[$userPhoneDetail['id']] = array(
                'phone' => $userPhoneDetail['phone'],
                'phone1' => $userPhoneDetail['phone1'],
                'phone2' => $userPhoneDetail['phone2'],
            );
        }

        return $userPhoneDetailArray;
    }

    /**
     * Is trusted user.
     *
     * @param integet $userId      User id.
     * @param array   $userUpsells User upsells.
     * @param object  $container   Container identifier.
     *
     * @return array
     */
    public function isTrustedUser($userId, $userUpsells, $container = null)
    {
        /*
           if ($container) {
               $culture     = CommonManager::getCurrentCulture($container);
               $tableName   = $this->getUserTableName();
               $cacheKey    = $tableName.'|'.__FUNCTION__.'|'.$userId.'_'.$culture;
               $cachedValue = CommonManager::getCacheVersion($container, $cacheKey);

               if ($cachedValue !== false) {
                   return $cachedValue;
               }
           }

           $isTrusted = FALSE;

           if ($userId) {
               $objUser = $this->find($userId);

               if ($objUser) {
                   $dateDiff     = time() - $objUser->getCreatedAt();
                   $howOldUser   = floor($dateDiff/(60*60*24)); //in days

                   $userRoleName = $this->getUserRole($userId, $container);
                   $userAds      = $this->_em->getRepository('FaAdBundle:Ad')->getPlacedAdCountByUserId($userId);

                   if ($userRoleName == RoleRepository::ROLE_BUSINESS_SELLER && $howOldUser > 30 && $userAds > 2) {
                       $hasLogo = CommonManager::getUserLogoByUserId($container, $objUser->getId(), false, true);
                       if ($hasLogo) {
                           $isTrusted = TRUE;
                       }
                   }
               }
           }

           if ($container) {
               CommonManager::setCacheVersion($container, $cacheKey, $isTrusted, 3600);
           }
           */

        $isTrusted = false;

        if ($userUpsells && is_array($userUpsells) && count($userUpsells) > 0 && in_array(UpsellRepository::SHOP_VARIFIED_BUSINESS_BADGE_ID, $userUpsells)) {
            $isTrusted = true;
        }

        return $isTrusted;
    }

    /**
     * update user type from business to private
     *
     * @param integet $userId      User id.
     *
     * @param integet $container   Container.
     *
     * @return array
     */
    public function updateBusinessUserToPrivate($userId, $container)
    {
        $user = $this->_em->getRepository('FaUserBundle:User')->findOneById($userId);
        $objOldRole = $user->getRoles();
        $role = RoleRepository::ROLE_SELLER_ID;

        if ($user->getRoles()) {
            foreach ($user->getRoles() as $userRole) {
                $user->removeRole($userRole);
            }
        }
        $objRole = $this->_em->getRepository('FaUserBundle:Role')->find($role);
        $user->addRole($objRole);
        $user->setRole($objRole);
        $user->setBusinessName(null);
        $user->setBusinessCategoryId(null);

        $userSite = $this->_em->getRepository('FaUserBundle:UserSite')->findOneBy(array('user' => $user->getId()));
        if ($userSite && $userSite->getPath()) {
            $webPath      = $container->get('kernel')->getRootDir().'/../web';
            $privateImagePath = $container->getParameter('fa.user.image.dir').'/'.CommonManager::getGroupDirNameById($userId, 5000);
            $companyImagePath = $container->getParameter('fa.company.image.dir').'/'.CommonManager::getGroupDirNameById($userId, 5000);
            $user->setImage($privateImagePath);
            $companyOrgImagePath = $webPath.DIRECTORY_SEPARATOR.$companyImagePath;
            if (file_exists($companyImagePath.DIRECTORY_SEPARATOR.$userId.'.jpg')) {
                copy($companyImagePath.DIRECTORY_SEPARATOR.$userId.'.jpg', $privateImagePath.DIRECTORY_SEPARATOR.$userId.'.jpg');

                $userImageManager = new UserImageManager($container, $userId, $privateImagePath, false);
                //save original jpg image.
                $userImageManager->saveOriginalJpgImage($userId.'.jpg');

                //create thumbnails
                $userImageManager->createThumbnail();
            }
        }

        $this->_em->persist($user);
        $this->_em->flush($user);
        $this->_em->refresh($user);

        $this->_em->getRepository('FaUserBundle:UserPackage')->closeActivePackage($user);
        $this->_em->getRepository('FaUserBundle:UserSite')->removeBusinessUserSiteData($user->getId(), $container);

        if ($objOldRole && count($objOldRole) > 0 && $objOldRole[0]->getName() == RoleRepository::ROLE_BUSINESS_SELLER && $objRole->getName() == RoleRepository::ROLE_SELLER && $objRole->getName() == RoleRepository::ROLE_NETSUITE_SUBSCRIPTION) {
            $updateSQL = "UPDATE ad SET is_trade_ad = '0' WHERE user_id = '".$user->getId()."'";
        }

        if (!empty($updateSQL)) {
            $stmt = $this->_em->getConnection()->prepare($updateSQL);
            $stmt->execute();

            exec('nohup'.' '.$container->getParameter('fa.php.path').' '.$container->getParameter('project_path').'/console fa:update:ad-solr-index update --status="A,S,E" --user_id="'.$user->getId().'" >/dev/null &');
        }
    }

    /**
     * Update user type from private to business.
     *
     * @param integet $userId             User id.
     * @param integet $businessCategoryId User business category id.
     * @param integet $container          Container.
     *
     * @return array
     */
    public function updatePrivateUserToBusiness($userId, $businessCategoryId, $container)
    {
        $user = $this->_em->getRepository('FaUserBundle:User')->findOneById($userId);
        $objOldRole = $user->getRoles();
        $role = RoleRepository::ROLE_BUSINESS_SELLER_ID;

        if ($user->getRoles()) {
            foreach ($user->getRoles() as $userRole) {
                $user->removeRole($userRole);
            }
        }
        $objRole = $this->_em->getRepository('FaUserBundle:Role')->find($role);
        $user->addRole($objRole);
        $user->setRole($objRole);
        $user->setIsUserTypeChanged(1);
        $user->setUserTypeChangedAtValue();
        $user->setBusinessCategoryId($businessCategoryId);

        if ($user->getId()) {
            $userSite = $this->_em->getRepository('FaUserBundle:UserSite')->findOneBy(array('user' => $user->getId()));
            if (!$userSite) {
                $userSite = new UserSite();
                $userSite->setUser($user);
                $culture = CommonManager::getCurrentCulture($container);
                CommonManager::removeCache($container, $this->getUserTableName().'|getUserProfileSlug|'.$user->getId().'_'.$culture);
            }

            if ($user->getImage()) {
                $webPath      = $container->get('kernel')->getRootDir().'/../web';
                $privateImagePath = $container->getParameter('fa.user.image.dir').'/'.CommonManager::getGroupDirNameById($userId, 5000);
                $companyImagePath = $container->getParameter('fa.company.image.dir').'/'.CommonManager::getGroupDirNameById($userId, 5000);
                $userSite->setPath($companyImagePath);
                $companyOrgImagePath = $webPath.DIRECTORY_SEPARATOR.$companyImagePath;
                if (file_exists($privateImagePath.DIRECTORY_SEPARATOR.$userId.'.jpg')) {
                    copy($privateImagePath.DIRECTORY_SEPARATOR.$userId.'.jpg', $companyOrgImagePath.DIRECTORY_SEPARATOR.$userId.'.jpg');

                    $userImageManager = new UserImageManager($container, $userId, $companyOrgImagePath, true);
                    //save original jpg image.
                    $userImageManager->saveOriginalJpgImage($userId.'.jpg');

                    //create thumbnails
                    $userImageManager->createThumbnail();
                }
            }

            $this->_em->persist($userSite);
            $this->_em->flush($userSite);
        }

        $user->setImage(null);
        //Only assign a free package if only new user is creating or user role is changing from private to business
        if (!$objOldRole || ($objOldRole && count($objOldRole) > 0 && ($objOldRole[0]->getName() != RoleRepository::ROLE_BUSINESS_SELLER || $objOldRole[0]->getName() != RoleRepository::ROLE_NETSUITE_SUBSCRIPTION))) {
            $this->_em->getRepository('FaUserBundle:UserPackage')->assignFreePackageToUser($user, 'my_account_user_upgrade', $container);
            $user->setFreeTrialEnable(1);
        }

        $this->_em->getRepository('FaUserBundle:User')->removePrivateUserData($user->getId(), $container);

        $this->_em->persist($user);
        $this->_em->flush($user);
        $this->_em->refresh($user);

        if ($objOldRole && count($objOldRole) > 0 && $objOldRole[0]->getName() == RoleRepository::ROLE_SELLER && $objRole->getName() == RoleRepository::ROLE_BUSINESS_SELLER && $objRole->getName() == RoleRepository::ROLE_NETSUITE_SUBSCRIPTION) {
            $updateSQL = "UPDATE ad SET is_trade_ad = '1' WHERE user_id = '".$user->getId()."'";
        }

        if (!empty($updateSQL)) {
            $stmt = $this->_em->getConnection()->prepare($updateSQL);
            $stmt->execute();

            exec('nohup'.' '.$container->getParameter('fa.php.path').' '.$container->getParameter('project_path').'/console fa:update:ad-solr-index update --status="A,S,E" --user_id="'.$user->getId().'" >/dev/null &');
        }
    }

    /**
     * Get user details by user id.
     *
     * @param array $userId User id array.
     *
     * @return array
     */
    public function getUserDetailsById($userId)
    {
        $qb = $this->createQueryBuilder(self::ALIAS)
        ->select(
            self::ALIAS.'.id',
            self::ALIAS.'.email',
            self::ALIAS.'.first_name',
            self::ALIAS.'.last_name',
            self::ALIAS.'.username',
            'IDENTITY('.self::ALIAS.'.role) as user_role_id',
            self::ALIAS.'.phone',
            self::ALIAS.'.about_you',
            self::ALIAS.'.business_name',
            self::ALIAS.'.business_category_id',
            self::ALIAS.'.last_login',
            self::ALIAS.'.ip_address',
                UserSiteRepository::ALIAS.'.company_welcome_message',
            UserSiteRepository::ALIAS.'.company_address',
            UserSiteRepository::ALIAS.'.phone1',
            UserSiteRepository::ALIAS.'.phone2',
            UserSiteRepository::ALIAS.'.website_link'
        );
        $qb->addSelect("group_concat(".PaymentTokenizationRepository::ALIAS.".card_number, ', ') as card_numbers", "group_concat(".PaymentTokenizationRepository::ALIAS.".card_type, ',') as card_types")
        ->leftJoin('Fa\Bundle\UserBundle\Entity\UserSite', UserSiteRepository::ALIAS, 'WITH', self::ALIAS.'.id = '.UserSiteRepository::ALIAS.'.user')
        ->leftJoin('Fa\Bundle\PaymentBundle\Entity\PaymentTokenization', PaymentTokenizationRepository::ALIAS, 'WITH', self::ALIAS.'.id = '.PaymentTokenizationRepository::ALIAS.'.user')
        ->groupBy(PaymentTokenizationRepository::ALIAS.'.user');

        $qb->andWhere(self::ALIAS.'.id IN (:userId)');
        $qb->setParameter('userId', $userId);

        $userDetails = $qb->getQuery()->getArrayResult();

        if (is_array($userDetails)) {
            return $userDetails[0];
        }

        return array();
    }

    /**
     * Get user status.
     *
     * @param string $email    User id.
     * @param object  $container Container identifier.
     *
     * @return integer
     */
    public function getUserStatusByEmail($email, $container = null)
    {
        $userDet = array();
        $userStatus = 0;
        $qb = $this->createQueryBuilder(self::ALIAS)
        ->select('IDENTITY('.self::ALIAS.'.status) AS status_id')
        ->andWhere(self::ALIAS.'.email = :email')
        ->setMaxResults(1)
        ->setParameter('email', $email)->getQuery();

        $userDet = $qb->getArrayResult();
        if (!empty($userDet)) {
            $userStatus = $userDet[0]['status_id'];
        }
       
        return $userStatus;
    }


    /**
    * Send complete registration mail.
    *
    * @param object $user    User.
    * @param object $paaLiteEmailNotification paaLiteEmailNotification.
    * @param object  $container Container identifier.
    *
    * @return integer
    */
    public function sendCompleteRegistrationEmail($user, $paaLiteEmailNotification, $container = null)
    {
        //send email only if user and status is active and send mail opted.
        if ($user && CommonManager::checkSendEmailToUser($user, $container)) {
            $encryption_key = $container->getParameter('reset_password_encryption_key');
            $resetPasswordLink = $container->get('router')->generate('reset_password', array('id' => CommonManager::encryptDecrypt($encryption_key, $user->getId()), 'key' => $user->getEncryptedKey(), 'mail_time' => CommonManager::encryptDecrypt($encryption_key, time())), true);

            $parameters = array(
                'user_first_name' => $user->getFirstName()?$user->getFirstName():$user->getUserName(),
                'url_password_reset' => $resetPasswordLink,
                'url_account_dashboard' => $container->get('router')->generate('dashboard_home', array(), true),
            );

            $container->get('fa.mail.manager')->send($user->getEmail(), 'complete_registration', $parameters, CommonManager::getCurrentCulture($container));
            $paaLiteEmailNotification->setIsRegisteredMailSent(1);
            $this->_em->persist($paaLiteEmailNotification);
            $this->_em->flush($paaLiteEmailNotification);
            //$output->writeln('Complete Registration mail sent to User Id:'.($user ? $user->getId() : null), true);
        }
    }
    
    public function set18PlusCookies()
    {
        $response = new Response();
        $response->headers->setCookie(new Cookie('is_over_18', 1, time() + 1 * 86400));
        $response->sendHeaders();
    }
   /* public function getUserDataBoostDetailsArrayByUserId($userId = array())
    {
        if (!is_array($userId)) {
            $userId = array($userId);
        }
        
        $userId = array_unique($userId);
        $qb = $this->createQueryBuilder(self::ALIAS)
        ->select(self::ALIAS.'.id', self::ALIAS.'.first_name', self::ALIAS.'.last_name', self::ALIAS.'.business_name', self::ALIAS.'.username', self::ALIAS.'.email', self::ALIAS.'.created_at', self::ALIAS.'.password', self::ALIAS.'.town', 'IDENTITY('.self::ALIAS.'.role) as user_role_id', self::ALIAS.'.boost_overide', self::ALIAS.'.is_reset_boost_count');
        
        if (!is_array($userId)) {
            $userId = array($userId);
        }
        
        if (count($userId)) {
            $qb->andWhere(self::ALIAS.'.id IN (:userId)');
            $qb->setParameter('userId', $userId);
        }
        
        $objResources = $qb->getQuery()->getArrayResult();
        $arr = array();
        if (count($objResources)) {
            for ($i=0; $i<count($objResources); $i++) {
                $getBoostDetails = $this->getBoostDetailsByUserId($objResources[$i]['id']);
                $arr[$i]['user_id']    = $objResources[$i]['id'];
                $arr[$i]['first_name']    = $objResources[$i]['first_name'];
                $arr[$i]['last_name']     = $objResources[$i]['last_name'];
                $arr[$i]['username']      = $objResources[$i]['username'];
                $arr[$i]['business_name'] = $objResources[$i]['business_name'];
                $arr[$i]['email']         = $objResources[$i]['email'];
                $arr[$i]['created_at']    = $objResources[$i]['created_at'];
                $arr[$i]['password']      = $objResources[$i]['password'];
                $arr[$i]['town']          = $objResources[$i]['town'];
                $arr[$i]['role_id']       = $objResources[$i]['user_role_id'];
                $arr[$i]['boost_overide'] = $objResources[$i]['boost_overide'];
                $arr[$i]['is_reset_boost_count'] = $objResources[$i]['is_reset_boost_count'];
                $arr[$i]['used_boost_count']  = $getBoostDetails['boostedAdCount'];
                $arr[$i]['max_boost_count']  = $getBoostDetails['boostMaxPerMonth'];
                $arr[$i]['remaining_boost_count']  = $getBoostDetails['boostAdRemaining'];
                $arr[$i]['boost_renew_date']  = $getBoostDetails['boostRenewDate'];
            }
        }
        
        //print_r($arr);exit;
        
        return $arr;
    }
    
    public function getBoostDetailsByUserId($userId)
    {
        $isBoostEnabled = 0;
        $boostMaxPerMonth = 0;
        $boostAdRemaining = 0;
        $getExipryDate = $boostRenewDate = '';
        $boostedAdCountArray = array();
        $user = $this->_em->getRepository('FaUserBundle:User')->find($userId);
        
        $boostedAdCount = $this->_em->getRepository('FaAdBundle:BoostedAd')->getMyBoostedAdsCount($userId);
        $remainingDaysToRenewBoost = '';
        $userBusinessCategory = '';
        if ($user->getRole() == 'ROLE_BUSINESS_SELLER' || $user->getRole() == 'ROLE_NETSUITE_SUBSCRIPTION') {
            $userBusinessCategory = $user->getBusinessCategoryId();
            $getCurrentActivePackage = $this->_em->getRepository('FaUserBundle:UserPackage')->getCurrentActivePackage($user);
            if ($getCurrentActivePackage) {
                if ($getCurrentActivePackage->getPackage() && $getCurrentActivePackage->getPackage()->getPrice() >0) {
                    $isBoostEnabled = $getCurrentActivePackage->getPackage()->getBoostAdEnabled();
                    $boostMaxPerMonth = ($user->getBoostOveride()!='' && $user->getIsResetBoostCount()==1)?$user->getBoostOveride():(($getCurrentActivePackage->getBoostOveride())?$getCurrentActivePackage->getBoostOveride():$getCurrentActivePackage->getPackage()->getMonthlyBoostCount());
                    $boostAdRemaining = $boostMaxPerMonth;
                    $getExpiryAtDate =  $getCurrentActivePackage->getExpiresAt();
                    $getCreateOrUpdateDate = ($getCurrentActivePackage->getUpdatedAt() > $getCurrentActivePackage->getCreatedAt())?$getCurrentActivePackage->getUpdatedAt():$getCurrentActivePackage->getCreatedAt();
                    if ($getExpiryAtDate=='') {
                        $getExpiryDate = strtotime('+28 days', $getCreateOrUpdateDate);
                    } else {
                        $getExpiryDate =  $getCurrentActivePackage->getExpiresAt();
                    }
                    $todaysTime  = time();
                    
                    $remainingDaysToRenewBoost = date('jS M Y', $getExpiryDate);
                }
            }
        }
        
        if ($boostedAdCount > 0 && $boostMaxPerMonth > 0) {
            $boostAdRemaining = $boostMaxPerMonth - $boostedAdCount;
        }
        
        $BoostDetails = array(
            'boostedAdCount'  => $boostedAdCount,
            'isBoostEnabled'  => $isBoostEnabled,
            'boostMaxPerMonth'=> $boostMaxPerMonth,
            'boostAdRemaining'=> $boostAdRemaining,
            'boostRenewDate'  => $remainingDaysToRenewBoost,
            'userBusinessCategory' => $userBusinessCategory,
        );
        
        return $BoostDetails;
    }*/
    
    
    
    public function getUserDataBoostDetailsArrayByUserId($userId = array())
    {
        if (!is_array($userId)) {
            $userId = array($userId);
        }
        
        $userId = array_unique($userId);
        $qb = $this->createQueryBuilder(self::ALIAS)
        ->select(self::ALIAS.'.id', self::ALIAS.'.first_name', self::ALIAS.'.last_name', self::ALIAS.'.business_name', self::ALIAS.'.username', self::ALIAS.'.email', self::ALIAS.'.created_at', self::ALIAS.'.password', self::ALIAS.'.town', 'IDENTITY('.self::ALIAS.'.role) as user_role_id', self::ALIAS.'.boost_overide', self::ALIAS.'.is_reset_boost_count');
        
        if (!is_array($userId)) {
            $userId = array($userId);
        }
        
        if (count($userId)) {
            $qb->andWhere(self::ALIAS.'.id IN (:userId)');
            $qb->setParameter('userId', $userId);
        }
        
        $objResources = $qb->getQuery()->getArrayResult();
        $arr = array();
        if (count($objResources)) {
            for ($i=0; $i<count($objResources); $i++) {
                $getBoostDetails = $this->getBoostDetailsByUserId($objResources[$i]['id']);
                
                $arr[$objResources[$i]['id']]['first_name']    = $objResources[$i]['first_name'];
                $arr[$objResources[$i]['id']]['last_name']     = $objResources[$i]['last_name'];
                $arr[$objResources[$i]['id']]['username']      = $objResources[$i]['username'];
                $arr[$objResources[$i]['id']]['business_name'] = $objResources[$i]['business_name'];
                $arr[$objResources[$i]['id']]['email']         = $objResources[$i]['email'];
                $arr[$objResources[$i]['id']]['created_at']    = $objResources[$i]['created_at'];
                $arr[$objResources[$i]['id']]['password']      = $objResources[$i]['password'];
                $arr[$objResources[$i]['id']]['town']          = $objResources[$i]['town'];
                $arr[$objResources[$i]['id']]['role_id']       = $objResources[$i]['user_role_id'];
                $arr[$objResources[$i]['id']]['boost_overide'] = $objResources[$i]['boost_overide'];
                $arr[$objResources[$i]['id']]['is_reset_boost_count'] = $objResources[$i]['is_reset_boost_count'];
                $arr[$objResources[$i]['id']]['used_boost_count']  = $getBoostDetails['boostedAdCount'];
                $arr[$objResources[$i]['id']]['max_boost_count']  = $getBoostDetails['boostMaxPerMonth'];
                $arr[$objResources[$i]['id']]['remaining_boost_count']  = $getBoostDetails['boostAdRemaining'];
                $arr[$objResources[$i]['id']]['boost_renew_date']  = $getBoostDetails['boostRenewDate'];
            }
        }
        
        //print_r($arr);exit;
        
        return $arr;
    }
    
    public function getBoostDetailsByUserId($userId)
    {
        $isBoostEnabled = 0;
        $boostMaxPerMonth = 0;
        $boostAdRemaining = 0;

        $user = $this->_em->getRepository('FaUserBundle:User')->find($userId);
        
        $boostedAdCount = $this->_em->getRepository('FaAdBundle:BoostedAd')->getMyBoostedAdsCount($userId);
        $remainingDaysToRenewBoost = '';
        $userBusinessCategory = '';
        if ($user->getRole() == 'ROLE_BUSINESS_SELLER' || $user->getRole() == 'ROLE_NETSUITE_SUBSCRIPTION') {
            $userBusinessCategory = $user->getBusinessCategoryId();
            $getCurrentActivePackage = $this->_em->getRepository('FaUserBundle:UserPackage')->getCurrentActivePackage($user);
            if ($getCurrentActivePackage) {
                if ($getCurrentActivePackage->getPackage() && $getCurrentActivePackage->getPackage()->getPrice() >0) {
                    $isBoostEnabled = $getCurrentActivePackage->getPackage()->getBoostAdEnabled();
                    $boostMaxPerMonth = ($user->getBoostOveride()!='' && $user->getIsResetBoostCount()==1)?$user->getBoostOveride():(($getCurrentActivePackage->getBoostOveride())?$getCurrentActivePackage->getBoostOveride():$getCurrentActivePackage->getPackage()->getMonthlyBoostCount());
                    $boostAdRemaining = $boostMaxPerMonth;
                    $getExpiryAtDate =  $getCurrentActivePackage->getExpiresAt();
                    $getCreateOrUpdateDate = ($getCurrentActivePackage->getUpdatedAt() > $getCurrentActivePackage->getCreatedAt())?$getCurrentActivePackage->getUpdatedAt():$getCurrentActivePackage->getCreatedAt();
                    if ($getExpiryAtDate=='') {
                        $getExpiryDate = strtotime('+28 days', $getCreateOrUpdateDate);
                    } else {
                        $getExpiryDate =  $getCurrentActivePackage->getExpiresAt();
                    }
                     
                    $remainingDaysToRenewBoost = date('jS M Y', $getExpiryDate);
                }
            }
        }
        
        if ($boostedAdCount > 0 && $boostMaxPerMonth > 0) {
            $boostAdRemaining = $boostMaxPerMonth - $boostedAdCount;
        }
        
        $BoostDetails = array(
            'boostedAdCount'  => $boostedAdCount,
            'isBoostEnabled'  => $isBoostEnabled,
            'boostMaxPerMonth'=> $boostMaxPerMonth,
            'boostAdRemaining'=> $boostAdRemaining,
            'boostRenewDate'  => $remainingDaysToRenewBoost,
            'userBusinessCategory' => $userBusinessCategory,
        );
        
        return $BoostDetails;
    }
}
