<?php

/**
 * This file is part of the fa bundle.
 *
 * @copyright Copyright (c) 2014, FMG
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Fa\Bundle\UserBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Gedmo\Tree\Entity\Repository\NestedTreeRepository;
use Fa\Bundle\UserBundle\Repository\UserRepository;
use Fa\Bundle\AdBundle\Repository\AdRepository;
use Fa\Bundle\EntityBundle\Repository\EntityRepository as BaseEntityRepository;
use Fa\Bundle\CoreBundle\Manager\CommonManager;
use Fa\Bundle\UserBundle\Entity\UserReview;

/**
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 *
 * @author Samir Amrutya <samiram@aspl.in>
 * @copyright 2014 Friday Media Group Ltd
 * @version v1.0
 */
class UserReviewRepository extends NestedTreeRepository
{
    use \Fa\Bundle\CoreBundle\Search\Search;

    const ALIAS = 'ur';

    const MODERATION_RESULT_OKEY = 'okay';

    const MODERATION_RESULT_REJECTED = 'rejected';

    const MODERATION_RESULT_MANUAL_MODERATION = 'awaiting manual';

    const MODERATION_RESULT_SCAM = 'scam';

    const MODERATION_QUEUE_STATUS_SEND = 0;

    const MODERATION_QUEUE_STATUS_SENT = 2;

    const MODERATION_QUEUE_STATUS_OKAY = 1;

    const MODERATION_QUEUE_STATUS_REJECTED = 3;

    const MODERATION_QUEUE_STATUS_MANUAL_MODERATION = 4;

    /**
     * Get query builder.
     *
     * @return Doctrine\ORM\QueryBuilder The query builder.
     */
    public function getBaseQueryBuilder()
    {
        return $this->createQueryBuilder(self::ALIAS);
    }

    /**
     * Add message status filter to existing query object.
     *
     * @param mixed $status Moderation status.
     */
    protected function addStatusFilter($status = null)
    {
        if ($status !== null) {
            if (!is_array($status)) {
                $status = array($status);
            }

            if (count($status)) {
                $this->queryBuilder->andWhere($this->getRepositoryAlias().'.status IN (:status)');
                $this->queryBuilder->setParameter('status', $status);
            }
        }
    }

    /**
     * Get review children by id.
     *
     * @param string $id Id.
     *
     * @return array
     */
    public function getChildrenById($id = null)
    {
        $query = $this->createQueryBuilder(self::ALIAS);

        if (!$id) {
            $query->where(self::ALIAS.'.parent IS NULL OR '.self::ALIAS.'.parent = 0');
        } else {
            $query->where(self::ALIAS.'.parent = '.$id);
        }

        $objResources = $query->getQuery()->getArrayResult();

        return $objResources;
    }

    /**
     * Get reviews by user id.
     *
     * @param integer $userId User id.
     *
     * @return object
     */
    public function getReviewsByUserId($userId)
    {
        $qb = $this->getBaseQueryBuilder(self::ALIAS)
                   ->where(self::ALIAS.'.user =:user_id')->setParameter('user_id', $userId)
                   ->andWhere(self::ALIAS.'.lvl = 1');

        return $qb->getQuery()->getResult();
    }

    /**
     * Get reviews by reviewer id.
     *
     * @param integer|null $reviewerId Id of reviewer.
     *
     * @return array
     */
    public function getReviewsByReviewerId($reviewerId = null)
    {
        $qb = $this->createQueryBuilder(self::ALIAS);

        if ($reviewerId) {
            $qb->where(self::ALIAS.'.reviewer =:reviewer_id')->setParameter('reviewer_id', $reviewerId);
        }

        $qb->andWhere(self::ALIAS.'.lvl = 1');

        return $qb->getQuery()->getResult();
    }

    /**
     * Get categories childrens array by parent group.
     *
     * @param integet|null $id Parent category id.
     *
     * @return array
     */
    public function getNestedChildrenByParentId($id = null)
    {
        if ($id) {
            $parentNode  = $this->find($id);
            return $this->getNodesHierarchyQuery($parentNode)->getResult();
        }
        return null;
    }

    /**
     * Check is review already given to ad by reviewer
     *
     * @param integer $adId       Ad Id
     * @param integer $reviewerId Id of reviewer.
     * @param integer $userId     Id of review gainer.
     *
     * @return boolean
     */
    public function isAdReviewedByUser($adId, $reviewerId, $userId)
    {
        $userReview = $this->getBaseQueryBuilder(self::ALIAS)
                   ->andWhere(self::ALIAS.'.user_review_ad_id =:user_review_ad_id')->setParameter('user_review_ad_id', $adId)
                   ->andWhere(self::ALIAS.'.user =:user_id')->setParameter('user_id', $userId)
                   ->andWhere(self::ALIAS.'.reviewer =:reviewer_id')->setParameter('reviewer_id', $reviewerId)
                   ->andWhere(self::ALIAS.'.lvl = 1')
                   ->getQuery()->getOneOrNullResult();

        if ($userReview) {
            return true;
        }

        return false;
    }

    /**
     * Get user reviews from buyer or seller query.
     *
     * @param integer $userId         User id.
     * @param string  $reviewBy       Review By seller or buyer.
     * @param array   $excludeIdArray Exclude review ids.
     *
     * @return object
     */
    public function getUserReviewsQuery($userId, $reviewBy = null, $excludeIdArray = array())
    {
        if ($reviewBy == 'from_sellers') {
            $isSeller = 1;
        } elseif ($reviewBy == 'from_buyers') {
            $isSeller = 0;
        }

        $qb = $this->getBaseQueryBuilder(self::ALIAS)
                    ->select(self::ALIAS.'.id', self::ALIAS.'.rating', self::ALIAS.'.created_at', self::ALIAS.'.message', self::ALIAS.'.is_seller', UserRepository::ALIAS.'.id as user_id', UserRepository::ALIAS_REVIEWER.'.id as reviewer_id', UserRepository::ALIAS_REVIEWER.'.image as reviewer_image', AdRepository::ALIAS.'.id as ad_id', AdRepository::ALIAS.'.title as ad_title', UserRepository::ALIAS_REVIEWER.'.first_name as reviewer_first_name', UserRepository::ALIAS_REVIEWER.'.last_name as reviewer_last_name', UserRepository::ALIAS_REVIEWER.'.business_name as reviewer_business_name', 'IDENTITY('.UserRepository::ALIAS_REVIEWER.'.status) as reviewer_status_id', 'IDENTITY('.UserRepository::ALIAS_REVIEWER.'.role) as reviewer_role_id', UserSiteRepository::ALIAS.'.path as reviewer_company_image', self::ALIAS.'.user_review_ad_id', self::ALIAS.'.subject')
                    ->leftJoin(self::ALIAS.'.ad', AdRepository::ALIAS)
                    ->innerJoin(self::ALIAS.'.user', UserRepository::ALIAS)
                    ->innerJoin(self::ALIAS.'.reviewer', UserRepository::ALIAS_REVIEWER)
                    ->leftJoin('Fa\Bundle\UserBundle\Entity\UserSite', UserSiteRepository::ALIAS, 'WITH', UserRepository::ALIAS_REVIEWER.'.id = '.UserSiteRepository::ALIAS.'.user')
                    ->where(self::ALIAS.'.user =:user_id')->setParameter('user_id', $userId)
                    ->andWhere(self::ALIAS.'.lvl = 1')
                    ->andWhere(self::ALIAS.'.status = 1')
                    ->addOrderBy(self::ALIAS.'.created_at', 'DESC');

        if (count($excludeIdArray)) {
            $qb->andWhere(self::ALIAS.'.id NOT IN (:excludeIdArray)')->setParameter('excludeIdArray', $excludeIdArray);
        }

        if ($reviewBy) {
            $qb->andWhere(self::ALIAS.'.is_seller =:is_seller')->setParameter('is_seller', $isSeller);
        }

        return $qb->getQuery();
    }

    /**
     * Get who has given recent review, buyer or seller ?
     *
     * @param integer $userId User id.
     *
     * @return string
     */
    public function isRecentReviewByWhom($userId)
    {
        $byWhom = 'from_buyers';
        $review = $this->getBaseQueryBuilder(self::ALIAS)
                                 ->select(self::ALIAS.'.is_seller')
                                 ->where(self::ALIAS.'.user =:user_id')->setParameter('user_id', $userId)
                                 ->andWhere(self::ALIAS.'.lvl = 1')
                                 ->andWhere(self::ALIAS.'.status = 1')
                                 ->addOrderBy(self::ALIAS.'.created_at', 'DESC')
                                 ->setMaxResults(1)
                                 ->getQuery()
                                 ->getOneORNullResult();

        if ($review && $review['is_seller']) {
            $byWhom = 'from_sellers';
        }

        return $byWhom;
    }

    /**
     * Get user reviews from buyer or seller count.
     *
     * @param integer $userId   User id.
     * @param string  $reviewBy Review By seller or buyer.
     *
     * @return object
     */
    public function getReviewCount($userId, $reviewBy)
    {
        if ($reviewBy == 'from_sellers') {
            $isSeller = 1;
        } else if ($reviewBy == 'from_buyers') {
            $isSeller = 0;
        }

        $qb = $this->getBaseQueryBuilder(self::ALIAS)
                   ->select('COUNT('.self::ALIAS.'.id)')
                   ->where(self::ALIAS.'.user =:user_id')->setParameter('user_id', $userId)
                   ->andWhere(self::ALIAS.'.is_seller =:is_seller')->setParameter('is_seller', $isSeller)
                   ->andWhere(self::ALIAS.'.lvl = 1')
                   ->andWhere(self::ALIAS.'.status = 1');

        return $qb->getQuery()->getSingleScalarResult();
    }

    /**
     * Get reviews left for others count.
     *
     * @param integer $userId User id.
     *
     * @return object
     */
    public function getReviewLeftForOthersCount($userId)
    {
        $qb = $this->getBaseQueryBuilder(self::ALIAS)
                   ->select('COUNT('.self::ALIAS.'.id)')
                   ->where(self::ALIAS.'.reviewer =:user_id')->setParameter('user_id', $userId)
                   ->andWhere(self::ALIAS.'.lvl = 1')
                   ->andWhere(self::ALIAS.'.status = 1');

        return $qb->getQuery()->getSingleScalarResult();
    }

    /**
     * Get user respond to review.

     * @param integer $reviewId Review id.
     * @param integer $userId   User id.
     *
     * @return array|null
     */
    public function getUserReviewResponse($reviewId, $userId)
    {
        return $this->getBaseQueryBuilder(self::ALIAS)
                    ->select(self::ALIAS.'.status', self::ALIAS.'.message', UserRepository::ALIAS_REVIEWER.'.id as responder_id', UserRepository::ALIAS_REVIEWER.'.image as responder_image', UserRepository::ALIAS_REVIEWER.'.first_name as responder_first_name', UserRepository::ALIAS_REVIEWER.'.last_name as responder_last_name', UserRepository::ALIAS_REVIEWER.'.business_name as responder_business_name', UserSiteRepository::ALIAS.'.path as responder_company_image', 'IDENTITY('.UserRepository::ALIAS_REVIEWER.'.status) as responder_status_id', 'IDENTITY('.UserRepository::ALIAS_REVIEWER.'.role) as responder_role_id')
                    ->innerJoin(self::ALIAS.'.reviewer', UserRepository::ALIAS_REVIEWER)
                    ->leftJoin('Fa\Bundle\UserBundle\Entity\UserSite', UserSiteRepository::ALIAS, 'WITH', UserRepository::ALIAS_REVIEWER.'.id = '.UserSiteRepository::ALIAS.'.user')
                    ->andWhere(self::ALIAS.'.parent =:review_id')->setParameter('review_id', $reviewId)
                    ->andWhere(self::ALIAS.'.reviewer =:reviewer_id')->setParameter('reviewer_id', $userId)
                    ->andWhere(self::ALIAS.'.lvl = 2')
                    ->orderBy(self::ALIAS.'.id', 'desc')
                    ->getQuery()
                    ->getOneORNullResult();
    }

    /**
     * Get user reviews left for others query.
     *
     * @param integer $reviewerId Reviewer id.
     *
     * @return object
     */
    public function getUserReviewsLeftForOthersQuery($reviewerId)
    {
        return $this->getBaseQueryBuilder(self::ALIAS)
                    ->select(self::ALIAS.'.id', self::ALIAS.'.rating', self::ALIAS.'.created_at', self::ALIAS.'.message', UserRepository::ALIAS.'.id as user_id', UserRepository::ALIAS.'.image as user_image', AdRepository::ALIAS.'.id as ad_id', AdRepository::ALIAS.'.title as ad_title', UserRepository::ALIAS.'.first_name as user_first_name', UserRepository::ALIAS.'.last_name as user_last_name', UserRepository::ALIAS.'.business_name as user_business_name', UserSiteRepository::ALIAS.'.path as user_company_image', 'IDENTITY('.UserRepository::ALIAS.'.status) as user_status_id', 'IDENTITY('.UserRepository::ALIAS.'.role) as user_role_id', self::ALIAS.'.user_review_ad_id', self::ALIAS.'.subject')
                    ->leftJoin(self::ALIAS.'.ad', AdRepository::ALIAS)
                    ->innerJoin(self::ALIAS.'.user', UserRepository::ALIAS)
                    ->leftJoin('Fa\Bundle\UserBundle\Entity\UserSite', UserSiteRepository::ALIAS, 'WITH', UserRepository::ALIAS.'.id = '.UserSiteRepository::ALIAS.'.user')
                    ->where(self::ALIAS.'.reviewer =:reviewer_id')->setParameter('reviewer_id', $reviewerId)
                    ->andWhere(self::ALIAS.'.lvl = 1')
                    ->andWhere(self::ALIAS.'.status = 1')
                    ->addOrderBy(self::ALIAS.'.created_at', 'DESC')
                    ->getQuery();
    }

    /**
     * Handle moderation result.
     *
     * @param array  $moderationResult Moderation resutl array.
     * @param object $container        Container identifier.
     */
    public function handleModerationResult($moderationResult, $container = null)
    {
        $userReview = null;

        if (count($moderationResult) > 0) {
            $moderationResult = array_change_key_case($moderationResult, CASE_LOWER);
        }

        if (count($moderationResult) > 0 && $moderationResult['adref']) {
            $userReviewId = $moderationResult['adref'];
            $userReview   = $this->findOneBy(array('id' => $userReviewId));

            if ($userReview) {
                $userReview->setValue(serialize($moderationResult));

                if (isset($moderationResult['moderationresult']) && strtolower($moderationResult['moderationresult']) == self::MODERATION_RESULT_OKEY) {
                    $userReview->setStatus(self::MODERATION_QUEUE_STATUS_OKAY);
                } else if (isset($moderationResult['moderationresult']) && strtolower($moderationResult['moderationresult']) == self::MODERATION_RESULT_REJECTED) {
                    $userReview->setStatus(self::MODERATION_QUEUE_STATUS_REJECTED);
                } else if (isset($moderationResult['moderationresult']) && strtolower($moderationResult['moderationresult']) == self::MODERATION_RESULT_MANUAL_MODERATION) {
                    $userReview->setStatus(self::MODERATION_QUEUE_STATUS_MANUAL_MODERATION);
                } else if (isset($moderationResult['moderationresult']) && strtolower($moderationResult['moderationresult']) == self::MODERATION_RESULT_SCAM) {
                    $userReview->setStatus(self::MODERATION_QUEUE_STATUS_REJECTED);
                }

                $this->_em->persist($userReview);
                $this->_em->flush($userReview);
                $this->_em->getRepository('FaMessageBundle:NotificationMessageEvent')->setNotificationEvents('you_submitted_review', null, $userReview->getReviewer()->getId(), '0d', false, $userReview->getUser()->getFullName());
                $this->_em->getRepository('FaMessageBundle:NotificationMessageEvent')->setNotificationEvents('you_have_new_review', null, $userReview->getUser()->getId(), '0d', false, $userReview->getReviewer()->getFullName());

                // block the user if status is scam
                if (isset($moderationResult['moderationresult']) && strtolower($moderationResult['moderationresult']) == self::MODERATION_RESULT_SCAM) {
                    if ($userReview->getReviewer()) {
                        $user = $userReview->getReviewer();
                        if ($user) {
                            $userStatus = $this->_em->getRepository('FaEntityBundle:Entity')->find(BaseEntityRepository::USER_STATUS_BLOCKED);
                            $user->setStatus($userStatus);
                            $this->_em->persist($user);
                            $this->_em->flush($user);

                            $this->_em->getRepository('FaAdBundle:Ad')->blockUnblockAdByUserId($user->getId(), 1);
                            $this->_em->getRepository('FaAdBundle:Ad')->deleteAdFromSolrByUserId($user->getId(), $container);
                        }
                    }
                } else if (isset($moderationResult['moderationresult']) && strtolower($moderationResult['moderationresult']) == self::MODERATION_RESULT_REJECTED) {
                    try {
                        // send review rejected email
                        $this->sendReviewRejectedEmail($userReview, $moderationResult, $container);
                    } catch (\Exception $e) {
                        CommonManager::sendErrorMail($container, 'Error: Problem in your_review_is_rejected email', $e->getMessage(), $e->getTraceAsString());
                    }
                } else if (isset($moderationResult['moderationresult']) && strtolower($moderationResult['moderationresult']) == self::MODERATION_RESULT_OKEY) {
                    try {
                        // send review email
                        $this->sendReviewEmail($userReview, $moderationResult, $container);
                    } catch (\Exception $e) {
                        CommonManager::sendErrorMail($container, 'Error: Problem in you_have_a_review email', $e->getMessage(), $e->getTraceAsString());
                    }
                }
            }
        }
    }

    /**
     * Send reveiew for moderation.
     *
     * @param integer $id User review id.
     */
    public function sendReviewForModeration($id, $container)
    {
        try {
            $userReview = $this->findOneBy(array('id' => $id));

            if ($userReview) {
                $buildRequest      = $container->get('fa_user.review_moderation.request_build');
                $moderationRequest = $buildRequest->init($userReview);
                $moderationRequest = json_encode($moderationRequest);
                if ($buildRequest->sendRequest($moderationRequest)) {
                    $userReview->setStatus(UserReviewRepository::MODERATION_QUEUE_STATUS_SENT);
                    $this->_em->persist($userReview);
                    $this->_em->flush($userReview);
                }
            }
        } catch (\Exception $e) {
            // LOG or Email
        }
    }

    /**
     * Get user review by id.
     *
     * @param integer $userId User id.
     *
     * @return object
     */
    public function getUserReviewById($id)
    {
        $review = $this->getBaseQueryBuilder(self::ALIAS)
                   ->select(self::ALIAS.'.id', self::ALIAS.'.rating', self::ALIAS.'.created_at', self::ALIAS.'.message', self::ALIAS.'.is_seller', UserRepository::ALIAS.'.id as user_id', UserRepository::ALIAS_REVIEWER.'.id as reviewer_id', UserRepository::ALIAS_REVIEWER.'.image as reviewer_image', AdRepository::ALIAS.'.id as ad_id', AdRepository::ALIAS.'.title as ad_title', UserRepository::ALIAS_REVIEWER.'.first_name as reviewer_first_name', UserRepository::ALIAS_REVIEWER.'.last_name as reviewer_last_name', UserRepository::ALIAS_REVIEWER.'.business_name as reviewer_business_name', 'entity_user_status.id as user_status_id')
                   ->innerJoin(self::ALIAS.'.ad', AdRepository::ALIAS)
                   ->innerJoin(self::ALIAS.'.user', UserRepository::ALIAS)
                   ->innerJoin(self::ALIAS.'.reviewer', UserRepository::ALIAS_REVIEWER)
                   ->innerJoin(UserRepository::ALIAS_REVIEWER.'.status', 'entity_user_status')
                   ->where(self::ALIAS.'.id =:review_id')->setParameter('review_id', $id)
                   ->andWhere(self::ALIAS.'.status = 1')
                   ->getQuery()->getOneORNullResult();


        return $review;
    }

    /**
     * Get status array.
     *
     * @param Container $container Container identifier
     * @param boolean   $addEmpty  Flag to show empty message
     *
     * @return array
     */
    public function getStatusArray($container, $addEmpty = true)
    {
        $translator  = CommonManager::getTranslator($container);
        $statusArray = array();

        if ($addEmpty) {
            $statusArray[''] = $translator->trans('Select Status');
        }

        $statusArray[1] = $translator->trans('Active');
        $statusArray[0] = $translator->trans('Inactive');
        $statusArray[2] = $translator->trans('In moderation');
        $statusArray[3] = $translator->trans('Rejected');
        $statusArray[4] = $translator->trans('In manual moderation');

        return $statusArray;
    }

    /**
     * Check if ad is reviewable by user or not
     *
     * @param integer $adId       Ad Id
     * @param integer $reviewerId Id of reviewer.
     * @param integer $userId     Id of review gainer.
     *
     * @return boolean
     */
    public function isAdReviewable($adId, $reviewerId, $userId, $userStatusId = null, $fromMessage = false)
    {
        $isReviewable = false;
        if (!$this->isAdReviewedByUser($adId, $reviewerId, $userId) && $userStatusId && $userStatusId == BaseEntityRepository::USER_STATUS_ACTIVE_ID) {
            $isReviewable = true;
        }

        if ($isReviewable && $fromMessage) {
            if ($this->_em->getRepository('FaMessageBundle:Message')->isMessageReviewable($reviewerId, $userId, $adId)) {
                $isReviewable = true;
            } else {
                $isReviewable = false;
            }
        }

        return $isReviewable;
    }

    /**
     * Send review rejected email.
     *
     * @param object $userReview
     * @param array  $moderationResult Moderation resutl array.
     * @param object $container        Container object.
     */
    public function sendReviewRejectedEmail($userReview, $moderationResult, $container)
    {
        $parameters = $this->generateRejectedReviewEmailParameters($userReview, $moderationResult, $container);
        $receiver   = $userReview->getReviewer();
        $template   = 'your_review_is_rejected';

        $from = '';
        $emailTemplate = $this->getEntityManager()->getRepository('Fa\Bundle\EmailBundle\Entity\EmailTemplate')->findOneByIdentifierAndLocale($template, $container->getParameter('locale'));
        if ($emailTemplate) {
            $from = $emailTemplate->getSenderEmail();
        }

        // receiver email
        $receiverEmail = $userReview->getReviewer()->getEmail();

        $container->get('fa.mail.manager')->send($receiverEmail, $template, $parameters, CommonManager::getCurrentCulture($container), null, array($from), array(), array(), null);
    }

    /**
     * Send review email.
     *
     * @param object $userReview
     * @param array  $moderationResult Moderation resutl array.
     * @param object $container        Container object.
     */
    public function sendReviewEmail($userReview, $moderationResult, $container)
    {
        $objReviewed = $userReview->getUser();
        $objReviewer = $userReview->getReviewer();

        $parameters['user_first_name']       = $objReviewed->getFirstName();
        $parameters['user_last_name']        = $objReviewed->getLastName();

        $parameters['reviewer_profile_name'] = $objReviewer->getProfileName();

        if ($userReview->getRating()) {
            $startRatingLabels = CommonManager::getStraRatingLabels($container);
            if (isset($startRatingLabels[$userReview->getRating()])) {
                $parameters['review_rating'] = $startRatingLabels[$userReview->getRating()];
            }
        }

        $parameters['text_review_content']   = $userReview->getMessage();
        $parameters['url_comment_on_review'] = $userReview->getMessage();

        $ad = $userReview->getAd();
        if ($ad) {
            $parameters['text_ad_title']       = $ad->getTitle();
            $parameters['text_ad_category']    = $ad->getCategory()->getName();
            $parameters['text_ad_description'] = $ad->getDescription();
            $parameters['text_adref']          = $ad->getId();

            //image url
            if ($url = $this->_em->getRepository('FaAdBundle:AdImage')->getImageUrl($ad, '300X225', 1, $container)) {
                $parameters['url_ad_main_photo'] = $url;
            }
        }

        $template = 'you_have_a_review';

        $from = '';
        $emailTemplate = $this->getEntityManager()->getRepository('Fa\Bundle\EmailBundle\Entity\EmailTemplate')->findOneByIdentifierAndLocale($template, $container->getParameter('locale'));
        if ($emailTemplate) {
            $from = $emailTemplate->getSenderEmail();
        }

        // receiver email
        $receiverEmail = $objReviewed->getEmail();

        $container->get('fa.mail.manager')->send($receiverEmail, $template, $parameters, CommonManager::getCurrentCulture($container), null, array($from));
    }

    /**
     * Generate email parameters.
     *
     * @param UserReview $userReview
     * @param array      $moderationResult Moderation resutl array.
     * @param object     $container        Container object.
     *
     * @return array
     */
    public function generateRejectedReviewEmailParameters(UserReview $userReview, $moderationResult, $container)
    {
        $objReviewed = $userReview->getUser();
        $objReviewer = $userReview->getReviewer();

        $parameters['user_first_name']       = $objReviewer->getFirstName();
        $parameters['user_last_name']        = $objReviewer->getLastName();
        $parameters['reviewed_profile_name'] = $objReviewed->getProfileName();
        $parameters['business_name']         = $objReviewer->getProfileName();

        $parameters['reviewer_profile_name'] = $objReviewer->getProfileName();

        if ($userReview->getRating()) {
            $startRatingLabels = CommonManager::getStraRatingLabels($container);
            if (isset($startRatingLabels[$userReview->getRating()])) {
                $parameters['review_rating'] = $startRatingLabels[$userReview->getRating()];
            }
        }

        $parameters['text_review_content'] = $userReview->getMessage();

        $parameters['review_rejection_reason'] = '';

        if (array_key_exists('moderationmessage', $moderationResult)) {
            $parameters['review_rejection_reason'] = $moderationResult['moderationmessage'];
        }

        return $parameters;
    }

    /**
     * Send review email.
     *
     * @param Payment $order
     * @param object  $container        Container object.
     */
    public function sendReviewForSellerEmail($order, $container)
    {
        $buyer        = $order->getUser();
        $seller       = $this->_em->getRepository('FaUserBundle:User')->find($order->getSellerUserId());
        $dashBoardUrl = $container->get('router')->generate('dashboard_home', array(), true);
        if ($seller) {
            $parameters['user_first_name']       = $buyer->getFirstName();
            $parameters['user_last_name']        = $buyer->getLastName();
            $parameters['seller_profile_name']   = $seller->getProfileName();
            $parameters['url_account_dashboard'] = $dashBoardUrl;
            $parameters['url_purchase_details']  = $container->get('router')->generate('my_purchases', array('orderId' => $order->getCartCode()), true);

            $paymentTransaction = $this->_em->getRepository('FaPaymentBundle:PaymentTransaction')->findOneBy(array('payment' => $order->getId()));
            if ($paymentTransaction) {
                $ad = $paymentTransaction->getAd();

                if ($ad) {
                    $parameters['text_ad_title']       = $ad->getTitle();
                    $parameters['text_ad_category']    = $ad->getCategory()->getName();
                    $parameters['text_ad_description'] = $ad->getDescription();

                    if ($url = $this->_em->getRepository('FaAdBundle:AdImage')->getImageUrl($ad, '300X225', 1, $container)) {
                        $parameters['url_ad_main_photo'] = $url;
                    }
                }
            }

            $parameters['url_review_seller'] = '';
            $parameters['url_turn_off_alert'] = '';
        }

        $template = 'you_need_to_leave_a_review_buyer';

        $from = '';
        $emailTemplate = $this->getEntityManager()->getRepository('Fa\Bundle\EmailBundle\Entity\EmailTemplate')->findOneByIdentifierAndLocale($template, $container->getParameter('locale'));

        if ($emailTemplate) {
            $from = $emailTemplate->getSenderEmail();
        }

        // receiver email
        $receiverEmail = $buyer->getEmail();

        $container->get('fa.mail.manager')->send($receiverEmail, $template, $parameters, CommonManager::getCurrentCulture($container), null, array($from));
    }

    /**
     * Remove ad from contact by ad id.
     *
     * @param integer $adId Ad id.
     */
    public function removeByAdId($adId)
    {
        $reivews = $this->getBaseQueryBuilder()
        ->andWhere(self::ALIAS.'.ad = :adId')
        ->setParameter('adId', $adId)
        ->getQuery()
        ->getResult();

        if ($reivews) {
            foreach ($reivews as $reivew) {
                $this->_em->remove($reivew);
            }
            $this->_em->flush();
        }
    }
}
