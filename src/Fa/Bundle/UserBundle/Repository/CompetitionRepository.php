<?php

/**
 * This file is part of the fa bundle.
 *
 * @copyright Copyright (c) 2014, FMG
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Fa\Bundle\UserBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Fa\Bundle\CoreBundle\Manager\CommonManager;

/**
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 *
 * @author Amit Limbadia <amitl@aspl.in>
 * @copyright 2014 Friday Media Group Ltd
 * @version v1.0
 */
class CompetitionRepository extends EntityRepository
{
    use \Fa\Bundle\CoreBundle\Search\Search;

    const ALIAS = 'co';

    /**
     * Prepare query builder.
     *
     * @param array $data Array of data.
     *
     * @return Doctrine\ORM\QueryBuilder The query builder
     */
    public function getBaseQueryBuilder()
    {
        return $this->createQueryBuilder(self::ALIAS);
    }

    /**
     * Get competition report fields
     */
    public static function getCompetitionFields()
    {
        $competitionFields = array();
        $competitionFields['user_id'] = 'User ID';
        $competitionFields['user_full_name'] = 'Name';
        $competitionFields['user_email'] = 'Email';
        $competitionFields['birth_date'] = 'D.O.B';
        $competitionFields['interest'] = 'Interests';
        $competitionFields['ad_category'] = 'Ad Category';

        return $competitionFields;
    }

    /**
     * Get competition report query
     *
     * @param array   $searchParams Search parameters array.
     * @param array   $sorter       Sort parameters array.
     * @param object  $container    Container object.
     * @param boolean $isCountQuery Is count query.
     *
     * @return array
     */
    public function getCompetitionReportQuery($searchParams, $sorter, $container, $isCountQuery = false)
    {
        $qb = $this->createQueryBuilder(self::ALIAS)
            ->innerJoin(self::ALIAS.'.user', UserRepository::ALIAS);

        if ($isCountQuery) {
            $qb->select('COUNT('.self::ALIAS.'.id)');
        } else {
            $qb->select(self::ALIAS.'.id', self::ALIAS.'.cart_code', self::ALIAS.'.birth_date', self::ALIAS.'.interest', UserRepository::ALIAS.'.first_name', UserRepository::ALIAS.'.last_name', UserRepository::ALIAS.'.business_name', UserRepository::ALIAS.'.email as user_email', 'IDENTITY('.UserRepository::ALIAS.'.role) as role_id', 'IDENTITY('.self::ALIAS.'.user) as user_id');
        }

        $qb->andWhere(self::ALIAS.'.status = 1');

        return $qb->getQuery();
    }

    /**
     * Format report fields.
     *
     * @param array   $reportDetailArray   Report detail array.
     * @param object  $container           Container object.
     */
    public function formatReportRaw($reportDetailArray, $container)
    {
        $entityCacheManager = $container->get('fa.entity.cache.manager');
        $entityRepository = CommonManager::getEntityRepository($container, 'FaEntityBundle:Entity');
        $categoryRepository = CommonManager::getEntityRepository($container, 'FaEntityBundle:Category');
        $paymentTransactionRepository = CommonManager::getEntityRepository($container, 'FaPaymentBundle:PaymentTransaction');
        $interestsArray = $entityRepository->getEntityArrayByType('260', $container);
        $fieldValueArray = array();

        foreach ($reportDetailArray as $key => $value) {
            if ($key == 'role_id') {
                if ($value == RoleRepository::ROLE_SELLER_ID) {
                    $fieldValueArray['user_full_name'] = $reportDetailArray['first_name'].' '.$reportDetailArray['last_name'];
                } elseif ($value == RoleRepository::ROLE_BUSINESS_SELLER_ID || $value == RoleRepository::ROLE_NETSUITE_SUBSCRIPTION_ID) {
                    $fieldValueArray['user_full_name'] = $reportDetailArray['business_name'];
                }
            } elseif ($key == 'interest') {
                $userInterests = explode(',', $value);
                $interestString = '';
                foreach ($userInterests as $userInterestId) {
                    if (isset($interestsArray[$userInterestId])) {
                        $interestString .= $interestsArray[$userInterestId].',';
                    }
                }

                if (count($userInterests)) {
                    $interestString = trim($interestString, ',');
                }

                $fieldValueArray['interest'] = $interestString;
            } elseif ($key == 'cart_code') {
                $adCategoryString = '';
                $adDetails = $paymentTransactionRepository->getAdDetailByCartCode($reportDetailArray['cart_code'], $container);
                if (count($adDetails)) {
                    foreach ($adDetails as $adDetail) {
                        if (isset($adDetail['category_id']) && $adDetail['category_id']) {
                            $adCategoryString .= implode(' > ', $categoryRepository->getCategoryPathArrayById($adDetail['category_id'], false, $container))."\n";
                        }
                    }
                }
                $fieldValueArray['ad_category'] = $adCategoryString;
            } else {
                $fieldValueArray[$key] = $value;
            }
        }

        return $fieldValueArray;
    }
}
