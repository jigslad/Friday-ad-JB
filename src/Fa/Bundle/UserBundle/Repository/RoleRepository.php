<?php

/**
 * This file is part of the fa bundle.
 *
 * @copyright Copyright (c) 2014, FMG
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Fa\Bundle\UserBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\QueryBuilder;
use Fa\Bundle\CoreBundle\Manager\CommonManager;

/**
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 *
 * @author Sagar Lotiya <sagar@aspl.in>
 * @copyright 2014 Friday Media Group Ltd
 * @version v1.0
 */
class RoleRepository extends EntityRepository
{
    use \Fa\Bundle\CoreBundle\Search\Search;

    const ALIAS = 'ro';

    const ROLE_SELLER          = 'ROLE_SELLER';
    const ROLE_BUSINESS_SELLER = 'ROLE_BUSINESS_SELLER';
    const ROLE_ADMIN           = 'ROLE_ADMIN';
    const ROLE_SUPER_ADMIN     = 'ROLE_SUPER_ADMIN';
    const ROLE_ADMIN_HIDE_SKIP_PAYMENT = 'ROLE_ADMIN_HIDE_SKIP_PAYMENT';
    const ROLE_NETSUITE_SUBSCRIPTION = 'ROLE_NETSUITE_SUBSCRIPTION';

    const ROLE_ADMIN_ID           = '1';
    const ROLE_SUPER_ADMIN_ID     = '2';
    const ROLE_SELLER_ID          = '5';
    const ROLE_BUSINESS_SELLER_ID = '6';
    const ROLE_ADMIN_HIDE_SKIP_PAYMENT_ID = '7';
    const ROLE_NETSUITE_SUBSCRIPTION_ID = '9';

    /**
     * Create query builder.
     *
     * @param array $data array of data.
     *
     * @return Doctrine\ORM\QueryBuilder The query builder.
     */
    public function getBaseQueryBuilder()
    {
        return $this->createQueryBuilder(self::ALIAS);
    }

    /**
     * Get custom roles.
     *
     * @return array
     */
    public static function getCustomerRoles($container)
    {
        $translator = CommonManager::getTranslator($container);
        return array(
            self::ROLE_SELLER => $translator->trans("I'm a private advertiser", array(), 'frontend-register'),
            self::ROLE_BUSINESS_SELLER => $translator->trans("I'm a business advertiser", array(), 'frontend-register'),
            //self::ROLE_NETSUITE_SUBSCRIPTION => $translator->trans("I'm a netsuite subscriber", array(), 'frontend-register'),
        );
    }

    /**
     * Get user types.
     *
     * @return array
     */
    public static function getUserTypes()
    {
        return array(
            self::ROLE_SELLER_ID => 'Private advertiser',
            self::ROLE_BUSINESS_SELLER_ID => 'Business advertiser',
            self::ROLE_NETSUITE_SUBSCRIPTION_ID => 'Netsuite subscription advertiser',
        );
    }

    /**
     * Get role array by type.
     *
     * @param string $roleType Role type.
     *
     * @return array
     */
    public function getRoleArrayByType($roleType, $container = null)
    {
        if ($container) {
            $culture     = CommonManager::getCurrentCulture($container);
            $tableName   = $this->getRoleTableName();
            $cacheKey    = $tableName.'|'.__FUNCTION__.'|'.$roleType.'_'.$culture;
            $cachedValue = CommonManager::getCacheVersion($container, $cacheKey);

            if ($cachedValue !== false) {
                return $cachedValue;
            }
        }
        $rolesArray = array();
        $qb = $this->createQueryBuilder(self::ALIAS)
        ->where(self::ALIAS.'.type = :roleType')
        ->setParameter('roleType', $roleType);

        $roles = $qb->getQuery()->getResult();

        foreach ($roles as $role) {
            $rolesArray[$role->getId()] = $role->getName();
        }

        if ($container) {
            CommonManager::setCacheVersion($container, $cacheKey, $rolesArray);
        }

        return $rolesArray;
    }

    /**
     * Get role table name.
     *
     * @return Ambigous <string, multitype:>
     */
    private function getRoleTableName()
    {
        return $this->_em->getClassMetadata('FaUserBundle:Role')->getTableName();
    }

    /**
     * Get role id array by type.
     *
     * @param string $roleType Role type.
     *
     * @return array
     */
    public function getRoleIdArrayByType($roleType)
    {
        $rolesArray = array();
        $qb = $this->createQueryBuilder(self::ALIAS)
        ->where(self::ALIAS.'.type = :roleType')
        ->setParameter('roleType', $roleType);

        $roles = $qb->getQuery()->getResult();

        foreach ($roles as $role) {
            $rolesArray[] = $role->getId();
        }

        return $rolesArray;
    }

    /**
     * Get role array by type.
     *
     * @param string $roleType Role type.
     *
     * @return array
     */
    public function getRoleArray()
    {
        $rolesArray = array();
        $qb = $this->createQueryBuilder(self::ALIAS);

        $roles = $qb->getQuery()->getResult();

        foreach ($roles as $role) {
            $rolesArray[$role->getId()] = $role->getName();
        }

        return $rolesArray;
    }
}
