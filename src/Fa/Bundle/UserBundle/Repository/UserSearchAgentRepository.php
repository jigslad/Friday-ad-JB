<?php

/**
 * This file is part of the fa bundle.
 *
 * @copyright Copyright (c) 2014, FMG
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Fa\Bundle\UserBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Fa\Bundle\UserBundle\Entity\UserSearchAgent;
use Fa\Bundle\CoreBundle\Manager\CommonManager;
use Fa\Bundle\EntityBundle\Repository\LocationRepository;

/**
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 *
 * @author Samir Amrutya <samiram@aspl.in>
 * @copyright 2014 Friday Media Group Ltd
 * @version v1.0
 */
class UserSearchAgentRepository extends EntityRepository
{
    use \Fa\Bundle\CoreBundle\Search\Search;

    const ALIAS = 'usa';

    /**
     * Prepare query builder.
     *
     * @param array $data Array of data.
     *
     * @return Doctrine\ORM\QueryBuilder The query builder
     */
    public function getBaseQueryBuilder()
    {
        return $this->createQueryBuilder(self::ALIAS);
    }

    /**
     * Get search agent by search params.
     *
     * @param array   $searchParams Search parameter array.
     * @param integer $userId       User id.
     *
     * @return mixed
     */
    public function getUserSearchAgentByParameters(array $searchParams, $userId)
    {
        $query = $this->createQueryBuilder(self::ALIAS)
            ->andWhere(self::ALIAS.'.user = :userId')
            ->setParameter('userId', $userId);

        $userSearchAgents = $query->getQuery()->getResult();

        foreach ($userSearchAgents as $userSearchAgent) {
            $userSearchAgentParams = unserialize($userSearchAgent->getCriteria());

            if (isset($searchParams['search']) && isset($userSearchAgentParams['search']) && $this->compareCriteria($searchParams['search'], $userSearchAgentParams['search']) &&
                isset($searchParams['sorter']) && isset($userSearchAgentParams['sorter']) && $this->compareCriteria($searchParams['sorter'], $userSearchAgentParams['sorter'])) {
                return $userSearchAgent;
            }
        }

        return false;
    }

    /**
     * Compare criteria.
     *
     * @param array $array1 Search params array1.
     * @param array $array2 Search params array2.
     *
     * @return boolean
     */
    private function compareCriteria($array1, $array2)
    {
        foreach ($array1 as $key1 => $value1) {
            if (array_key_exists($key1, $array2)) {
                if (is_array($array1[$key1])) {
                    if (count($array1[$key1]) !== count(array_intersect($array1[$key1], $array2[$key1]))) {
                        return false;
                    }
                } elseif ($array1[$key1] !== $array2[$key1]) {
                    return false;
                }
            } else {
                return false;
            }
        }

        return true;
    }

    /**
     * Add new user search agent.
     *
     * @param string  $name          Search agent name.
     * @param integer $userId        User id.
     * @param array   $searchParams  Search parameter array.
     * @param string  $isEmailAlerts Email alert flag.
     *
     * @return UserSearchAgent
     */
    public function addSearchAgent($name, $userId, $searchParams, $isEmailAlerts = '1')
    {
        $searchAgent = new UserSearchAgent();
        $searchAgent->setUser($this->_em->getReference('FaUserBundle:User', $userId));
        $searchAgent->setName($name);
        $searchAgent->setCriteria(serialize($searchParams));
        $searchAgent->setStatus('1');
        $searchAgent->setIsEmailAlerts($isEmailAlerts);
        $this->_em->persist($searchAgent);
        $this->_em->flush($searchAgent);

        return $searchAgent;
    }

    /**
     * Get search agent display criteria array.
     *
     * @param unknown $searchParams
     * @param unknown $container
     *
     * @return multitype:string NULL
     */
    public function getSearchAgentDisplayCriteriaArray($searchParams, $container)
    {
        $displayCriteriaArray = array();
        $entityCacheManager   = $container->get('fa.entity.cache.manager');

        // show distance and location as string
        if (isset($searchParams['item__distance']) && isset($searchParams['item__location'])) {
            $locationExplodeRes = explode(',', $searchParams['item__location']);
            if (count($locationExplodeRes) > 1) {
                $townName = $entityCacheManager->getEntityNameById('FaEntityBundle:Locality', $locationExplodeRes[0]);
            } else {
                $townName = $entityCacheManager->getEntityNameById('FaEntityBundle:Location', $locationExplodeRes[0]);
            }
            $displayCriteriaArray['Location'] = 'Within '.$searchParams['item__distance'].' miles of '.$townName;
        } elseif (isset($searchParams['item__location'])) {
            $locationExplodeRes = explode(',', $searchParams['item__location']);
            if (count($locationExplodeRes) > 1) {
                $townName = $entityCacheManager->getEntityNameById('FaEntityBundle:Locality', $locationExplodeRes[0]);
            } else {
                $townName = $entityCacheManager->getEntityNameById('FaEntityBundle:Location', $locationExplodeRes[0]);
            }
            $displayCriteriaArray['Location'] = 'Within '.$townName;
        }

        // show price range.
        if (isset($searchParams['item__price_from']) && isset($searchParams['item__price_to'])) {
            $displayCriteriaArray['Price'] =  CommonManager::formatCurrency($searchParams['item__price_from'], $container).' - '.CommonManager::formatCurrency($searchParams['item__price_to'], $container);
        } elseif (isset($searchParams['item__price_from'])) {
            $displayCriteriaArray['Price'] = '>= '.CommonManager::formatCurrency($searchParams['item__price_from'], $container);
        } elseif (isset($searchParams['item__price_to'])) {
            $displayCriteriaArray['Price'] = '<= '.CommonManager::formatCurrency($searchParams['item__price_to'], $container);
        }

        // get categorywise dynamic search fields.
        if (isset($searchParams['item__category_id'])) {
            $displayCriteriaArray['Category'] = $entityCacheManager->getEntityNameById('FaEntityBundle:Category', $searchParams['item__category_id']);
            $dimensionFields                  = $this->_em->getRepository('FaEntityBundle:CategoryDimension')->getSearchableDimensionFieldsArrayByCategoryId($searchParams['item__category_id'], $container);
            if (count($dimensionFields)) {
                foreach ($dimensionFields as $dimensionLabel => $dimensionField) {
                    if (isset($searchParams[$dimensionField]) && $searchParams[$dimensionField]) {
                        if (is_array($searchParams[$dimensionField]) && count($searchParams[$dimensionField])) {
                            $dimensionFieldValArray = array();
                            foreach ($searchParams[$dimensionField] as $dimensionFieldVal) {
                                $dimensionFieldValArray[] = $entityCacheManager->getEntityNameById('FaEntityBundle:Entity', $dimensionFieldVal);
                            }
                            if (count($dimensionFieldValArray)) {
                                $displayCriteriaArray[$dimensionLabel] = implode(', ', $dimensionFieldValArray);
                            }
                        } else {
                            $displayCriteriaArray[$dimensionLabel] = $entityCacheManager->getEntityNameById('FaEntityBundle:Entity', $searchParams[$dimensionField]);
                        }
                    }
                }
            }
        }

        // Few search criteria that have multiple values a
        foreach ($searchParams as $key => $value) {
            if (strlen($key) >= 3 && substr($key, -3) != '_id' && is_array($searchParams[$key])) {
                foreach ($searchParams[$key] as $key1 => $value1) {
                    $label = substr($key, (strpos($key, '__')+2));
                    $label = ucwords(str_replace('_', ' ', $label));
                    if (array_key_exists($label, $displayCriteriaArray)) {
                        $displayCriteriaArray[$label] = $displayCriteriaArray[$label].', '.$value1;
                    } else {
                        $displayCriteriaArray[$label] = $value1;
                    }
                }
            }
        }

        return $displayCriteriaArray;
    }

    /**
     * Send search agent alert email.
     *
     * @param object $searchAgent User search agent object.
     * @param object $ads         Ads.
     * @param object $container   Container identifier.
     */
    public function sendSearchAgentAlertEmail($searchAgent, $ads, $container)
    {
        $user = $searchAgent->getUser();
        $criteria =  unserialize($searchAgent->getCriteria());

        //@TODO: url_ad_edit, url_ad_mark_sold, url_account_dashboard, url_turn_off_alert is still remaining
        $editAdURL =  $container->get('router')->generate('fa_frontend_homepage');

        // create view more url and text alert criteria
        $viewMoreUrl       = null;
        $textAlertCriteria = null;

        if (isset($criteria['search'])) {
            $searchParams = array();
            $searchParams = array_merge($searchParams, $criteria['search']);
            $viewMoreUrl = $container->get('fa_ad.manager.ad_routing')->getListingUrl($searchParams, null, false, null, true);

            $displayCriteria = $this->getSearchAgentDisplayCriteriaArray($criteria['search'], $container);
            if (is_array($displayCriteria)) {
                foreach ($displayCriteria as $key => $value) {
                    $textAlertCriteria = $key.': '.$value.", ";
                }
                $textAlertCriteria = rtrim($textAlertCriteria, ', ');
            }
        }

        $searchAgentNameForBody    = $searchAgent->getName();
        $searchAgentNameForSubject = CommonManager::quoted_printable_encode($searchAgent->getName());

        $parameters = array(
             'user_first_name' => $user->getFirstName(),
             'user_last_name' => $user->getLastName(),
             'text_alert_name_for_subject' => $searchAgentNameForSubject,
             'text_alert_name_for_body' => $searchAgentNameForBody,
             'text_alert_criteria' => $textAlertCriteria,
             'url_view_more' => $viewMoreUrl,
             'ads' => $ads,
             'url_account_dashboard' => null,
             'total_records' => count($ads),
         );

        if ($user->getGuid()) {
            $parameters['url_stop_alert'] = $container->get('router')->generate('list_search_agent', array("guid" => $user->getGuid()), true);
            $parameters['url_edit_alert'] = $container->get('router')->generate('list_search_agent', array("guid" => $user->getGuid()), true);
        } else {
            $parameters['url_stop_alert'] = $container->get('router')->generate('list_search_agent', array(), true);
            $parameters['url_edit_alert'] = $container->get('router')->generate('list_search_agent', array("userSearchAgentId" => $searchAgent->getId()), true);
        }

        $container->get('fa.mail.manager')->send($user->getEmail(), 'email_alerts', $parameters, CommonManager::getCurrentCulture($container));
    }

    /**
     * Save user search.
     *
     * @param object $ad           Ad object.
     * @param object $loggedinUser Logged in user obj.
     * @param object $container    Container identifier.
     */
    public function saveUserSearch($ad, $loggedinUser, $container)
    {
        $entityCacheManager = $container->get('fa.entity.cache.manager');
        //get search name from search params.
        $searchParams    = array();
        $searchAgentName = '';
        $adTitle         = $ad->getTitle();
        $adCategoryId    = ($ad->getCategory() ? $ad->getCategory()->getId() : null);
        if ($adTitle) {
            $searchAgentName = $adTitle.' in ';
            $searchParams['search']['keywords'] = $adTitle;
        }
        if ($adCategoryId) {
            $searchAgentName .= $entityCacheManager->getEntityNameById('FaEntityBundle:Category', $adCategoryId);
            $searchParams['search']['item__category_id'] = $adCategoryId;
        }

        // fetch location from cookie.
        $cookieLocation  = $container->get('request_stack')->getCurrentRequest()->cookies->get('location');
        if ($cookieLocation && $cookieLocation != CommonManager::COOKIE_DELETED) {
            $cookieLocation = get_object_vars(json_decode($cookieLocation));
            if (isset($cookieLocation['locality'])) {
                $searchAgentName .= ', '.$cookieLocation['locality'];
            }
            if (isset($cookieLocation['town'])) {
                $searchAgentName .= ', '.$cookieLocation['town'];
            }
            if (isset($cookieLocation['county'])) {
                $searchAgentName .= ', '.$cookieLocation['county'];
            }
            if (isset($cookieLocation['location']) && $cookieLocation['location']) {
                $searchParams['search']['item__location'] = $cookieLocation['location'];
            }
        } else {
            $searchAgentName .= ', United Kingdom';
            $searchParams['search']['item__location'] = LocationRepository::COUNTY_ID;
        }

        $searchAgentName = trim($searchAgentName, ', ');
        //if no name
        if (!strlen($searchAgentName)) {
            $searchAgentName = 'Saved search';
        }
        $searchParams['sorter'] = array(
            'sort_field' => 'item__published_at',
            'sort_ord'   => 'desc',
        );

        //check for same search agent using search params.
        $userSearchAgent = $this->getUserSearchAgentByParameters($searchParams, $loggedinUser->getId());
        if (!$userSearchAgent) {
            $userSearchAgent = $this->addSearchAgent($searchAgentName, $loggedinUser->getId(), $searchParams);
        }

        return $userSearchAgent;
    }

    /**
     * Remove user search on uncheck.
     *
     * @param object $ad           Ad object.
     * @param object $loggedinUser Logged in user obj.
     * @param object $container    Container identifier.
     */
    public function removeUserSearch($ad, $loggedinUser, $container)
    {
        $entityCacheManager = $container->get('fa.entity.cache.manager');
        //get search name from search params.
        $searchParams    = array();
        $searchAgentName = '';
        $adTitle         = $ad->getTitle();
        $adCategoryId    = ($ad->getCategory() ? $ad->getCategory()->getId() : null);
        if ($adTitle) {
            $searchAgentName = $adTitle.' in ';
            $searchParams['search']['keywords'] = $adTitle;
        }
        if ($adCategoryId) {
            $searchAgentName .= $entityCacheManager->getEntityNameById('FaEntityBundle:Category', $adCategoryId);
            $searchParams['search']['item__category_id'] = $adCategoryId;
        }

        // fetch location from cookie.
        $cookieLocation  = $container->get('request_stack')->getCurrentRequest()->cookies->get('location');
        if ($cookieLocation && $cookieLocation != CommonManager::COOKIE_DELETED) {
            $cookieLocation = get_object_vars(json_decode($cookieLocation));
            if (isset($cookieLocation['locality'])) {
                $searchAgentName .= ', '.$cookieLocation['locality'];
            }
            if (isset($cookieLocation['town'])) {
                $searchAgentName .= ', '.$cookieLocation['town'];
            }
            if (isset($cookieLocation['county'])) {
                $searchAgentName .= ', '.$cookieLocation['county'];
            }
            if (isset($cookieLocation['location']) && $cookieLocation['location']) {
                $searchParams['search']['item__location'] = $cookieLocation['location'];
            }
        } else {
            $searchAgentName .= ', United Kingdom';
            $searchParams['search']['item__location'] = LocationRepository::COUNTY_ID;
        }

        $searchAgentName = trim($searchAgentName, ', ');
        //if no name
        if (!strlen($searchAgentName)) {
            $searchAgentName = 'Saved search';
        }
        $searchParams['sorter'] = array(
            'sort_field' => 'item__published_at',
            'sort_ord'   => 'desc',
        );

        //check for same search agent using search params.
        $userSearchAgent = $this->getUserSearchAgentByParameters($searchParams, $loggedinUser->getId());
        if ($userSearchAgent) {
            $this->getEntityManager()->remove($userSearchAgent);
            $this->getEntityManager()->flush();
        }
    }

    /**
     * Get page number based on cart code.
     *
     * @param integer $userId    User id.
     * @param string  $searchAgentId  Search agent id.
     * @param object  $container Container identifier.
     *
     * @return integer
     */
    public function getPageNumberBySearchAgentId($userId, $searchAgentId, $container)
    {
        $entityManager    = $container->get('doctrine')->getManager();
        $searchAgentTableName = $entityManager->getClassMetadata('FaUserBundle:UserSearchAgent')->getTableName();
        $sql = 'SELECT x.id, x.position, x.user_id
            FROM (
                SELECT '.self::ALIAS.'.id, @rownum := @rownum +1 AS position, '.self::ALIAS.'.user_id
                    FROM '.$searchAgentTableName.' '.self::ALIAS.'
                JOIN (SELECT @rownum :=0) r
                WHERE '.self::ALIAS.'.user_id = "'.$userId.'"
                ORDER BY '.self::ALIAS.'.id DESC
            ) x
            WHERE x.user_id = "'.$userId.'" and x.id = "'.$searchAgentId.'"';

        $stmt = $entityManager->getConnection()->prepare($sql);
        $stmt->execute();

        return $stmt->fetch();
    }
}
