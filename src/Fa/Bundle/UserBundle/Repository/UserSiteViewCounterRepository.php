<?php

/**
 * This file is part of the fa bundle.
 *
 * @copyright Copyright (c) 2014, FMG
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Fa\Bundle\UserBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Fa\Bundle\UserBundle\Entity\UserSiteViewCounter;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpFoundation\Cookie;
use Fa\Bundle\CoreBundle\Manager\CommonManager;

/**
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 *
 * @author Piyush Parmar <piyush@aspl.in>
 * @copyright 2014 Friday Media Group Ltd
 * @version v1.0
 */
class UserSiteViewCounterRepository extends EntityRepository
{
    const ALIAS = 'usvc';
    /**
     * Update user site view counter.
     *
     * @param object  $container Container identifier.
     * @param integer $userId    User id.
     */
    public function updateUserSiteViewCounter($container, $userId = null, $fieldName = 'user_view_ids', $subField = '')
    {
        if (!CommonManager::isBot($container)) {
            $cookieFieldName = $fieldName;
            if ($subField != '') {
                $cookieFieldName = $fieldName.'_'.$subField;
            }

            $viewUserIdArray = array_filter(explode(',', $container->get('request_stack')->getCurrentRequest()->cookies->get($cookieFieldName)));

            if (!in_array($userId, $viewUserIdArray) || $fieldName == "profile_page_email_sent_count") {
                try {
                    $viewUserIdArray[] = $userId;
                    $response = new Response();
                    $response->headers->setCookie(new Cookie($cookieFieldName, implode(',', $viewUserIdArray), CommonManager::getTimeStampFromEndDate(date('Y-m-d'))));
                    $response->sendHeaders();

                    $date               = strtotime(date('Y-m-d'));
                    $userViewCounterObj = $this->_em->getRepository('FaUserBundle:UserSiteViewCounter')->findOneBy(array('user' => $userId, 'created_at' => $date));
                    $userSiteObj        = $this->_em->getRepository('FaUserBundle:UserSite')->findOneBy(array('user' => $userId));

                    if (!$userViewCounterObj) {
                        $userViewCounterObj = new UserSiteViewCounter();
                        $userViewCounterObj->setUser($this->_em->getReference('FaUserBundle:User', $userId));
                    }

                    if ($userSiteObj) {
                        $userViewCounterObj->setUserSite($userSiteObj);
                    }

                    if ($fieldName == "user_view_ids") {
                        $userViewCounterObj->setHits($userViewCounterObj->getHits() + 1);
                    } elseif ($fieldName == "profile_page_email_sent_count") {
                        $userViewCounterObj->setProfilePageEmailSentCount($userViewCounterObj->getProfilePageEmailSentCount() + 1);
                    } elseif ($fieldName == "profile_page_website_url_click_count") {
                        $userViewCounterObj->setProfilePageWebsiteUrlClickCount($userViewCounterObj->getProfilePageWebsiteUrlClickCount() + 1);
                    } elseif ($fieldName == "profile_page_phone_click_count") {
                        $userViewCounterObj->setProfilePagePhoneClickCount($userViewCounterObj->getProfilePagePhoneClickCount() + 1);
                    } elseif ($fieldName == "profile_page_social_links_click_count") {
                        $userViewCounterObj->setProfilePageSocialLinksClickCount($userViewCounterObj->getProfilePageSocialLinksClickCount() + 1);
                    } elseif ($fieldName == "profile_page_map_click_count") {
                        $userViewCounterObj->setProfilePageMapClickCount($userViewCounterObj->getProfilePageMapClickCount() + 1);
                    }

                    $userViewCounterObj->setCreatedAt($date);
                    $this->_em->persist($userViewCounterObj);
                    $this->_em->flush();
                } catch (\Exception $e) {
                }

                //CommonManager::updateCacheCounter($container, 'user_view_counter_'.strtotime(date('Y-m-d')).'_'.$userId);
            }
        }
    }

    /**
     * Get user site view counter table name.
     *
     * @return Ambigous <string, multitype:>
     */
    private function getUserSiteViewCounterTableName()
    {
        return $this->_em->getClassMetadata('FaUserBundle:UserSiteViewCounter')->getTableName();
    }

    /**
     * Get user site view counter for ad id.
     *
     * @param integer $userId    User id.
     * @param object  $container Container identifier.
     *
     * @return array
     */
    public function getUserSiteViewCounter($userId, $container = null)
    {
        if ($container) {
            $culture     = CommonManager::getCurrentCulture($container);
            $tableName   = $this->getUserSiteViewCounterTableName();
            $cacheKey    = $tableName.'|'.__FUNCTION__.'|'.$userId.'_'.$culture;
            $cachedValue = CommonManager::getCacheVersion($container, $cacheKey);

            if ($cachedValue !== false) {
                return $cachedValue;
            }
        }

        $qb = $this->createQueryBuilder(self::ALIAS)
            ->select('SUM('.self::ALIAS.'.hits) as user_site_view_counter')
            ->andWhere(self::ALIAS.'.user = '.$userId);

        $count = $qb->getQuery()->getSingleScalarResult();

        if ($container) {
            CommonManager::setCacheVersion($container, $cacheKey, $count);
        }

        return $count;
    }

    /**
     * Get user site view counter for user.
     *
     * @param integer $startDate Start time.
     * @param integer $endDate   End time.
     * @param array   $userIds   User id array.
     *
     * @return array
     */
    public function getUserSiteViewCounterArrayByDate($startDate, $endDate, $userIds)
    {
        $qb = $this->createQueryBuilder(self::ALIAS)
        ->select('SUM('.self::ALIAS.'.hits) as user_site_view_counter', 'IDENTITY('.self::ALIAS.'.user) as user_id');

        $qb->andWhere('('.self::ALIAS.'.created_at BETWEEN '.$startDate.' AND  '.$endDate.')');
        $qb->addGroupBy(self::ALIAS.'.user');

        $userSiteViewCounters   = $qb->getQuery()->getArrayResult();
        $userSiteViewCounterArr = array();
        if (count($userSiteViewCounters)) {
            foreach ($userSiteViewCounters as $userSiteViewCounter) {
                $userSiteViewCounterArr[$userSiteViewCounter['user_id']] = $userSiteViewCounter['user_site_view_counter'];
            }
        }

        return $userSiteViewCounterArr;
    }

    /**
     * Prepare query builder.
     *
     * @param array $data Array of data.
     *
     * @return Doctrine\ORM\QueryBuilder The query builder
     */
    public function getBaseQueryBuilder()
    {
        return $this->createQueryBuilder(self::ALIAS);
    }
}
