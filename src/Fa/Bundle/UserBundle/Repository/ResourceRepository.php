<?php

/**
 * This file is part of the fa bundle.
 *
 * @copyright Copyright (c) 2014, FMG
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Fa\Bundle\UserBundle\Repository;

use Gedmo\Tree\Entity\Repository\NestedTreeRepository;
use Symfony\Component\Validator\Constraints\Collection;
use Fa\Bundle\CoreBundle\Manager\CommonManager;

/**
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 *
 * @author Piyush Parmar <piyush@aspl.in>
 * @copyright 2014 Friday Media Group Ltd
 * @version v1.0
 */
class ResourceRepository extends NestedTreeRepository
{
    const ALIAS = 'r';

    /**
     * Get resource tree.
     *
     * @return array
     */
    public function getTreeResources()
    {
        $query = $this->createQueryBuilder(self::ALIAS)
        ->where(self::ALIAS.'.display_in_tree = :flag')
        ->setParameter('flag', '1')
        ->getQuery();

        $objResources = $query->getArrayResult();

        return $objResources;
    }

    /**
     * Get resources by array of ids.
     *
     * @param array $ids Array of ids.
     *
     * @return array
     */
    public function getResourcesByIds($ids)
    {
        $query = $this->createQueryBuilder(self::ALIAS)
        ->where(self::ALIAS.'.id IN (:ids)')
        ->setParameter('ids', $ids)
        ->getQuery();

        $objResources = $query->getResult();

        return $objResources;
    }

    /**
     * Get hidden child resources.
     *
     * @param integer $parentId Parent resource id.
     *
     * @return array
     */
    public function getHiddenChildResources($parentId)
    {
        $query = $this->createQueryBuilder(self::ALIAS)
                ->where(self::ALIAS.'.parent = :parentId')
                ->setParameter('parentId', $parentId)
                ->andWhere(self::ALIAS.'.display_in_tree = :flag')
                ->setParameter('flag', '0')
                ->getQuery();

        $objResources = $query->getArrayResult();

        return $objResources;
    }

    /**
     * Get all active menus.
     *
     * @param boolean $isNested Whether nested menu is needed or not.
     *
     * @return array
     */
    public function getActiveMenus($isNested)
    {
        $qb = $this->createQueryBuilder(self::ALIAS)
            ->where(self::ALIAS.'.is_menu = 1');
        if ($isNested) {
            $qb->andWhere(self::ALIAS.'.lvl >= 1');
        } else {
            $qb->andWhere(self::ALIAS.'.resource_group IS NOT NULL');
            $qb->andWhere(self::ALIAS.'.lvl > 1');
            $qb->andWhere(self::ALIAS.'.lvl <= 3');
        }

        $qb->orderBy(self::ALIAS.'.lft');

        $query = $qb->getQuery();
        return $query->getResult();
    }

    /**
     * Get menus with active child.
     *
     * @return array
     */
    public function getMenusWithActiveChild($container = null)
    {
        if ($container) {
            $culture     = CommonManager::getCurrentCulture($container);
            $cacheKey    = $this->getEntityTableName().'|'.__FUNCTION__.'|'.$culture;
            $cachedValue = CommonManager::getCacheVersion($container, $cacheKey);

            if ($cachedValue !== false) {
                return $cachedValue;
            }
        }

        $query = $this->createQueryBuilder(self::ALIAS)
            ->getQuery();

        $arr = array();

        $resources = $query->getResult();

        foreach ($resources as $resource) {
            if ($resource->getParent()) {
                if ((!isset($arr[$resource->getParent()->getId()])) && $resource->getIsMenu() != 1) {
                    $arr[$resource->getParent()->getId()]['hasChild'] = false;
                } elseif ($resource->getIsMenu()) {
                    $arr[$resource->getParent()->getId()]['hasChild'] = true;
                }
            }
        }

        if (is_array($arr) && count($arr) > 0) {
            if ($container) {
                CommonManager::setCacheVersion($container, $cacheKey, $arr);
            }
        }

        return $arr;
    }

    /**
     * Get all resource.
     *
     * @return array
     */
    public function getAllResources()
    {
        $query = $this->createQueryBuilder(self::ALIAS)
        ->getQuery();

        $objResources = $query->getArrayResult();

        return $objResources;
    }

    /**
     * Get roles by resource.
     *
     * @param string $resource Resource name.
     *
     * @return array
     */
    public function getRolesArrayByResource($resource)
    {
        $roles = array();
        $query = $this->createQueryBuilder(self::ALIAS)
        ->leftJoin(self::ALIAS.'.role_resource_permissions', RoleResourcePermissionRepository::ALIAS)
        ->leftJoin(RoleResourcePermissionRepository::ALIAS.'.role', RoleRepository::ALIAS)
        ->where(self::ALIAS.'.resource = \''.$resource.'\'')
        ->getQuery();

        $resource = $query->getOneOrNullResult();
        if ($resource instanceof \Fa\Bundle\UserBundle\Entity\Resource) {
            $roleResourcePermissions = $resource->getRoleResourcePermissions();
            if (count($roleResourcePermissions) > 0) {
                foreach ($roleResourcePermissions as $roleResourcePermission) {
                    $role    = $roleResourcePermission->getRole();
                    $roles[] = $role->getName();
                }
            }
        }

        return $roles;
    }

    /**
     * Get resources by role/roles.
     *
     * @param string $role Id of roles.
     *
     * @return array
     */
    public function getResourcesArrayByRole($role, $container = null)
    {
        if (!is_array($role)) {
            $role = array($role);
        }

        $query = $this->createQueryBuilder(self::ALIAS)
        ->select(self::ALIAS.'.resource')
        ->innerJoin(self::ALIAS.'.role_resource_permissions', RoleResourcePermissionRepository::ALIAS)
        ->where(RoleResourcePermissionRepository::ALIAS.'.role IN (:role)')
        ->andWhere(self::ALIAS.'.resource IS NOT NULL')
        ->setParameter('role', $role)
        ->getQuery();

        $resources = $query->getArrayResult();

        $resourceArray = array();

        foreach ($resources as $resource) {
            $resourceArray[] = $resource['resource'];
        }

        return $resourceArray;
    }

    /**
     * Get resources by user id.
     *
     * @param string $role Id of roles.
     *
     * @return array
     */
    public function getResourcesArrayByUserId($userId, $container = null)
    {
        if ($container) {
            $tableName   = $this->getEntityTableName();
            $cacheKey    = $tableName.'|'.__FUNCTION__.'|'.$userId;
            $cachedValue = CommonManager::getCacheVersion($container, $cacheKey);

            if ($cachedValue !== false) {
                return $cachedValue;
            }
        }

        $user  = $this->_em->getRepository("FaUserBundle:User")->find($userId);
        $roles = $user->getRoles();

        $roleIds = array();
        foreach ($roles as $role) {
            $roleIds[] = $role->getId();
        }

        $resources = $this->getResourcesArrayByRole($roleIds);

        if (is_array($resources) && count($resources) > 0) {
            if ($container) {
                CommonManager::setCacheVersion($container, $cacheKey, $resources);
            }

            return $resources;
        }
    }

    /**
     * Get children by id.
     *
     * @param string $id
     *
     * @return Object
     */
    public function getChildrenById($id = null)
    {
        $query = $this->createQueryBuilder(self::ALIAS);

        if (!$id) {
            $query->where(self::ALIAS.'.parent IS NULL OR '.self::ALIAS.'.parent = 0');
        } else {
            $query->where(self::ALIAS.'.parent = '.$id);
        }

        $query->addOrderBy(self::ALIAS.'.name');

        $objResources = $query->getQuery()->getArrayResult();

        return $objResources;
    }

    /**
     * Get entity table name.
     *
     * @return Ambigous <string, multitype:>
     */
    private function getEntityTableName()
    {
        return $this->_em->getClassMetadata('FaUserBundle:Resource')->getTableName();
    }

    /**
     * Get tree resource as array
     *
     * @return array
     */
    public function getTreeResourcesArray()
    {
        $query = 'SELECT node.*
                    FROM resource AS node,
                        resource AS parent
                    WHERE node.lft
                    BETWEEN parent.lft
                    AND parent.rgt
                    AND parent.id = 1 AND node.display_in_tree = 1 ORDER BY node.lft, parent.lvl';
        $stmt = $this->_em->getConnection()->prepare($query);
        $stmt->execute();
        $resources = $stmt->fetchAll();

        return $resources;
    }
}
