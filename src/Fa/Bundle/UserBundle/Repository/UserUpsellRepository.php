<?php

/**
 * This file is part of the fa bundle.
 *
 * @copyright Copyright (c) 2014, FMG
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Fa\Bundle\UserBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Fa\Bundle\UserBundle\Entity\User;
use Fa\Bundle\PromotionBundle\Entity\Package;
use Fa\Bundle\UserBundle\Entity\UserUpsell;
use Fa\Bundle\PromotionBundle\Repository\UpsellRepository;
use Fa\Bundle\PromotionBundle\Repository\PackageRepository;
use Fa\Bundle\CoreBundle\Manager\CommonManager;

/**
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 *
 * @author Janak Jadeja <janak@aspl.in>
 * @copyright 2014 Friday Media Group Ltd
 * @version v1.0
 */
class UserUpsellRepository extends EntityRepository
{
    use \Fa\Bundle\CoreBundle\Search\Search;

    const ALIAS = 'up';


    /**
     * set package upsell for users
     *
     * @param User $user
     * @param Package $package
     */
    public function setPackageUpsellForUser(User $user, Package $package)
    {
        $this->removePackageUpsell($user);

        $upsells =  $this->_em->getRepository('FaPromotionBundle:Package')->getUpsellByPackage($package);

        foreach ($upsells as $upsell) {
            $userUpsell = new UserUpsell();
            $userUpsell->setPackage($package);
            $userUpsell->setUser($user);
            $userUpsell->setUpsell($upsell);

            $this->_em->persist($userUpsell);
            $this->_em->flush();
        }
    }

    /**
     * remove package upsell
     *
     * @param User $user
     * @param Package $package
     */
    public function removePackageUpsell(User $user)
    {
        $userUpsells =  $this->findBy(array('user' => $user));

        foreach ($userUpsells as $userUpsell) {
            $this->_em->remove($userUpsell);
            $this->_em->flush();
        }
    }

    /**
     * get user upsells
     *
     * @param user_id $userId
     * @return multitype:
     */
    public function getUserUpsell($userId)
    {
        $qb = $this->createQueryBuilder(self::ALIAS)
        ->select(self::ALIAS.'.id', 'IDENTITY('.self::ALIAS.'.upsell) AS upsell_id')
        ->andWhere(self::ALIAS.'.user = :userId')
        ->setParameter('userId', $userId);

        return $qb->getQuery()->getArrayResult();
    }

    /**
     * get user upsells array
     *
     * @param user_id $userId
     *
     * @return multitype:
     */
    public function getUserUpsellArray($userId)
    {
        $userUpsellArray = array();

        $qb = $this->createQueryBuilder(self::ALIAS)
        ->select(self::ALIAS.'.id', 'IDENTITY('.self::ALIAS.'.upsell) AS upsell_id')
        ->andWhere(self::ALIAS.'.user = :userId')
        ->setParameter('userId', $userId);

        $userUpsells = $qb->getQuery()->getArrayResult();

        foreach ($userUpsells as $userUpsell) {
            $userUpsellArray[] = $userUpsell['upsell_id'];
        }

        return $userUpsellArray;
    }

    /**
     * get user upsells array with value
     *
     * @param user_id $userId
     *
     * @return multitype:
     */
    public function getUserUpsellArrayWithValue($userId)
    {
        $userUpsellArray = array();

        $qb = $this->createQueryBuilder(self::ALIAS)
        ->select(self::ALIAS.'.id', UpsellRepository::ALIAS.'.id as upsell_id', UpsellRepository::ALIAS.'.value', 'IDENTITY('.PackageRepository::ALIAS.'.shop_category) as shop_category_id')
        ->leftJoin(self::ALIAS.'.upsell', UpsellRepository::ALIAS)
        ->leftJoin(self::ALIAS.'.package', PackageRepository::ALIAS)
        ->andWhere(self::ALIAS.'.user = :userId')
        ->setParameter('userId', $userId);

        $userUpsells = $qb->getQuery()->getArrayResult();

        foreach ($userUpsells as $userUpsell) {
            $userUpsellArray[$userUpsell['upsell_id']] = array(
                'upsell_value' => $userUpsell['value'],
                'package_category_id' => $userUpsell['shop_category_id'],
            );
        }

        return $userUpsellArray;
    }

    /**
     * Get profile exposure upsell ids.
     *
     * @return array
     */
    public function getProfileExposureIds()
    {
        return $this->_em->getRepository('FaPromotionBundle:Upsell')->getProfileExposureUpsellIdsIdsArray();
    }

    /**
     * Get user upsell table name.
     *
     * @return Ambigous <string, multitype:>
     */
    private function getUserUpsellTableName()
    {
        return $this->_em->getClassMetadata('FaUserBundle:UserUpsell')->getTableName();
    }

    /**
     * get user upsells array with value
     *
     * @return multitype:
     */
    public function getUserArrayWithFeaturedEmployerUpsell($container)
    {
        if ($container) {
            $culture     = CommonManager::getCurrentCulture($container);
            $tableName   = $this->getUserUpsellTableName();
            $cacheKey    = $tableName.'|'.__FUNCTION__.'|'.$culture;
            $cachedValue = CommonManager::getCacheVersion($container, $cacheKey);

            if ($cachedValue !== false) {
                return $cachedValue;
            }
        }

        $featuedEmployerUpsellIds = array_keys($this->_em->getRepository('FaPromotionBundle:Upsell')->getUpsellByArrayType(UpsellRepository::SHOP_JOB_LANDING_PAGE_FEATURED_EMPLOYER_ID));
        $userArray = array();

        $qb = $this->createQueryBuilder(self::ALIAS)
        ->select(self::ALIAS.'.id', 'IDENTITY('.self::ALIAS.'.user) as user_id', UserRepository::ALIAS.'.first_name', UserRepository::ALIAS.'.last_name', UserRepository::ALIAS.'.business_name')
        ->leftJoin(self::ALIAS.'.upsell', UpsellRepository::ALIAS.'1')
        ->leftJoin(self::ALIAS.'.user', UserRepository::ALIAS)
        ->andWhere(UpsellRepository::ALIAS.'1.id IN (:upsellIds)')
        ->setParameter('upsellIds', $featuedEmployerUpsellIds);

        $userUpsells = $qb->getQuery()->getArrayResult();

        foreach ($userUpsells as $userUpsell) {
            $userArray[] = array(
                'id' => $userUpsell['user_id'],
                'employer_name' => $this->_em->getRepository('FaUserBundle:User')->getProfileNameFromArray($userUpsell),
            );
        }

        if ($container) {
            CommonManager::setCacheVersion($container, $cacheKey, $userArray);
        }

        return $userArray;
    }

    /**
     * get user upsells array with value
     *
     * @return multitype:
     */
    public function getUserArrayWithPopularShopUpsell($container)
    {
        if ($container) {
            $culture     = CommonManager::getCurrentCulture($container);
            $tableName   = $this->getUserUpsellTableName();
            $cacheKey    = $tableName.'|'.__FUNCTION__.'|'.$culture;
            $cachedValue = CommonManager::getCacheVersion($container, $cacheKey);

            if ($cachedValue !== false) {
                return $cachedValue;
            }
        }

        $featuedEmployerUpsellIds = array_keys($this->_em->getRepository('FaPromotionBundle:Upsell')->getUpsellByArrayType(UpsellRepository::SHOP_FOR_SALE_LANDING_PAGE_POPULAR_SHOP_ID));
        $userArray = array();

        $qb = $this->createQueryBuilder(self::ALIAS)
        ->select(self::ALIAS.'.id', 'IDENTITY('.self::ALIAS.'.user) as user_id', UserRepository::ALIAS.'.first_name', UserRepository::ALIAS.'.last_name', UserRepository::ALIAS.'.business_name')
        ->leftJoin(self::ALIAS.'.upsell', UpsellRepository::ALIAS.'1')
        ->leftJoin(self::ALIAS.'.user', UserRepository::ALIAS)
        ->andWhere(UpsellRepository::ALIAS.'1.id IN (:upsellIds)')
        ->setParameter('upsellIds', $featuedEmployerUpsellIds);

        $userUpsells = $qb->getQuery()->getArrayResult();

        foreach ($userUpsells as $userUpsell) {
            $userArray[] = array(
                'id' => $userUpsell['user_id'],
                'shop_name' => $this->_em->getRepository('FaUserBundle:User')->getProfileNameFromArray($userUpsell),
            );
        }

        if ($container) {
            CommonManager::setCacheVersion($container, $cacheKey, $userArray);
        }

        return $userArray;
    }

    /**
     * get user upsells array with value
     *
     * @return multitype:
     */
    public function getUserArrayWithFeaturedAdultBusinessUpsell($container)
    {
        if ($container) {
            $culture     = CommonManager::getCurrentCulture($container);
            $tableName   = $this->getUserUpsellTableName();
            $cacheKey    = $tableName.'|'.__FUNCTION__.'|'.$culture;
            $cachedValue = CommonManager::getCacheVersion($container, $cacheKey);

            if ($cachedValue !== false) {
                return $cachedValue;
            }
        }

        $featuedAdultBusinessUpsellIds = array_keys($this->_em->getRepository('FaPromotionBundle:Upsell')->getUpsellByArrayType(UpsellRepository::SHOP_ADULT_LANDING_PAGE_FEATURED_BUSINESS_ID));
        $userArray = array();

        $qb = $this->createQueryBuilder(self::ALIAS)
        ->select(self::ALIAS.'.id', 'IDENTITY('.self::ALIAS.'.user) as user_id', UserRepository::ALIAS.'.first_name', UserRepository::ALIAS.'.last_name', UserRepository::ALIAS.'.business_name')
        ->leftJoin(self::ALIAS.'.upsell', UpsellRepository::ALIAS.'1')
        ->leftJoin(self::ALIAS.'.user', UserRepository::ALIAS)
        ->andWhere(UpsellRepository::ALIAS.'1.id IN (:upsellIds)')
        ->setParameter('upsellIds', $featuedAdultBusinessUpsellIds);

        $userUpsells = $qb->getQuery()->getArrayResult();

        foreach ($userUpsells as $userUpsell) {
            $userArray[] = array(
                'id' => $userUpsell['user_id'],
                'shop_name' => $this->_em->getRepository('FaUserBundle:User')->getProfileNameFromArray($userUpsell),
            );
        }

        if ($container) {
            CommonManager::setCacheVersion($container, $cacheKey, $userArray);
        }

        return $userArray;
    }
}
