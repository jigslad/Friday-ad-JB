<?php

/**
 * This file is part of the fa bundle.
 *
 * @copyright Copyright (c) 2014, FMG
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Fa\Bundle\TiReportBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Fa\Bundle\CoreBundle\Manager\CommonManager;
use Fa\Bundle\TiReportBundle\Entity\UserReport;
use Fa\Bundle\UserBundle\Repository\RoleRepository;

/**
 * Dotmailer repository.
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 *
 * @author Mohit Chauhan <mohitc@aspl.in>
 * @copyright 2014 Friday Media Group Ltd
 * @version 1.0
 */
class UserReportProfilePackageDailyRepository extends EntityRepository
{
    use \Fa\Bundle\CoreBundle\Search\Search;

    const ALIAS = 'urpp';

    /**
     * Prepare query builder.
     *
     * @param array $data Array of data.
     *
     * @return Doctrine\ORM\QueryBuilder The query builder
     */
    public function getBaseQueryBuilder()
    {
        return $this->createQueryBuilder(self::ALIAS);
    }

    /**
     * Remove user packages statistics.
     *
     * @param string $date Date.
     */
    public function removeUserReportPPDailyByDate($date)
    {
        if ($date) {
            $startDate = CommonManager::getTimeStampFromStartDate(date('Y-m-d', strtotime($date)));
            $endDate   = CommonManager::getTimeStampFromEndDate(date('Y-m-d', strtotime($date)));
        } else {
            $startDate = CommonManager::getTimeStampFromStartDate(date('Y-m-d', strtotime('-1 day')));
            $endDate   = CommonManager::getTimeStampFromEndDate(date('Y-m-d', strtotime('-1 day')));
        }
        $this->getBaseQueryBuilder()
        ->delete()
        ->andWhere('('.self::ALIAS.'.created_at BETWEEN '.$startDate.' AND  '.$endDate.')')
        ->getQuery()
        ->execute();
    }

    /**
     * Get user package details
     *
     * @param integer $userId    user id.
     * @param string  $startDate start date.
     * @param string  $endDate   end date.
     */
    public function getPackageDetailsByUserIdAndDateRange($userId, $startDate, $endDate)
    {
        $finalStartDate = CommonManager::getTimeStampFromStartDate($startDate);
        $finalEndDate   = CommonManager::getTimeStampFromEndDate($endDate);

        $qb = $this->createQueryBuilder(self::ALIAS)
        ->select(self::ALIAS.'.user_id', self::ALIAS.'.package_id', self::ALIAS.'.package_category_id', 'SUM('.self::ALIAS.'.package_price) As package_value_gross', 'COUNT('.self::ALIAS.'.id) As total_packages')
        ->where(self::ALIAS.'.user_id IN (:userId)')
        ->setParameter('userId', $userId)
        ->andWhere('('.self::ALIAS.'.created_at BETWEEN '.$finalStartDate.' AND  '.$finalEndDate.')')
        ->groupBy(self::ALIAS.'.user_id')
        ->orderBy(self::ALIAS.'.id', 'DESC');

        $resultArray      = $qb->getQuery()->getResult();
        $finalResultArray = array();


        if ($resultArray && is_array($resultArray)) {
            foreach ($resultArray as $record) {
                if (!array_key_exists($record['user_id'], $finalResultArray)) {
                    $finalResultArray[$record['user_id']] = $record;
                }
            }
        }

        return $finalResultArray;
    }

    /**
     * Get total package revenue
     *
     * @param array $searchParamss search parameters.
     */
    public function getPackageDetailByDateRange($searchParams)
    {
        $finalStartDate = '';
        $finalEndDate   = '';

        if ($searchParams && !empty($searchParams['rus_from_date'])) {
            $finalStartDate = CommonManager::getTimeStampFromStartDate($searchParams['rus_from_date']);
        }

        if ($searchParams && !empty($searchParams['rus_to_date'])) {
            $finalEndDate = CommonManager::getTimeStampFromEndDate($searchParams['rus_to_date']);
        }


        $qb = $this->createQueryBuilder(self::ALIAS)
        ->select('SUM('.self::ALIAS.'.package_price) As TotalPackageRevenue')
        ->innerJoin('FaTiReportBundle:UserReport', UserReportRepository::ALIAS, 'WITH', UserReportRepository::ALIAS.'.user_id = '.self::ALIAS.'.user_id')
        ->where('('.self::ALIAS.'.created_at BETWEEN '.$finalStartDate.' AND  '.$finalEndDate.')')
        ->setFirstResult(0)
        ->setMaxResults(1);

        if ($searchParams && !empty($searchParams['rus_name'])) {
            $qb = $qb->andWhere(UserReportRepository::ALIAS.'.name LIKE :name');
            $qb = $qb->setParameter('name', $searchParams['rus_name'].'%');
        }

        if ($searchParams && !empty($searchParams['rus_email'])) {
            $qb = $qb->andWhere(UserReportRepository::ALIAS.'.email LIKE :email');
            $qb = $qb->setParameter('email', $searchParams['rus_email'].'%');
        }

        if ($searchParams && !empty($searchParams['rus_user_type'])) {
            $qb = $qb->andWhere(UserReportRepository::ALIAS.'.role_id = '.$searchParams['rus_user_type']);
        } else {
            $roleIds = array(RoleRepository::ROLE_BUSINESS_SELLER_ID, RoleRepository::ROLE_SELLER_ID);
            $qb = $qb->andWhere(UserReportRepository::ALIAS.'.role_id IN (:roleIds)');
            $qb = $qb->setParameter('roleIds', $roleIds);
        }

        return $qb->getQuery()->getResult();
    }

    /**
     * Get total package revenue
     *
     * @param array $searchParamss search parameters.
     */
    public function getPackageDetailBySignupDateRange($searchParams)
    {
        $finalStartDate = '';
        $finalEndDate   = '';

        if ($searchParams && !empty($searchParams['rus_from_date'])) {
            $finalStartDate = CommonManager::getTimeStampFromStartDate($searchParams['rus_from_date']);
        }

        if ($searchParams && !empty($searchParams['rus_to_date'])) {
            $finalEndDate = CommonManager::getTimeStampFromEndDate($searchParams['rus_to_date']);
        }


        $qb = $this->createQueryBuilder(self::ALIAS)
        ->select('SUM('.self::ALIAS.'.package_price) As TotalPackageRevenue')
        ->innerJoin('FaTiReportBundle:UserReport', UserReportRepository::ALIAS, 'WITH', UserReportRepository::ALIAS.'.user_id = '.self::ALIAS.'.user_id')
        ->where('('.UserReportRepository::ALIAS.'.signup_date BETWEEN '.$finalStartDate.' AND  '.$finalEndDate.')')
        ->setFirstResult(0)
        ->setMaxResults(1);

        if ($searchParams && !empty($searchParams['rus_name'])) {
            $qb = $qb->andWhere(UserReportRepository::ALIAS.'.name LIKE :name');
            $qb = $qb->setParameter('name', $searchParams['rus_name'].'%');
        }

        if ($searchParams && !empty($searchParams['rus_email'])) {
            $qb = $qb->andWhere(UserReportRepository::ALIAS.'.email LIKE :email');
            $qb = $qb->setParameter('email', $searchParams['rus_email'].'%');
        }

        if ($searchParams && !empty($searchParams['rus_user_type'])) {
            $qb = $qb->andWhere(UserReportRepository::ALIAS.'.role_id = '.$searchParams['rus_user_type']);
        } else {
            $roleIds = array(RoleRepository::ROLE_BUSINESS_SELLER_ID, RoleRepository::ROLE_SELLER_ID);
            $qb = $qb->andWhere(UserReportRepository::ALIAS.'.role_id IN (:roleIds)');
            $qb = $qb->setParameter('roleIds', $roleIds);
        }

        return $qb->getQuery()->getResult();
    }

    /**
     * Get total package revenue
     *
     * @param string  $startDate start date.
     * @param string  $endDate   end date.
     */
    public function getMostRecentPackageNameByUserIdAndDateRange($userId, $startDate, $endDate)
    {
        $packageName    = '';
        $finalStartDate = CommonManager::getTimeStampFromStartDate($startDate);
        $finalEndDate   = CommonManager::getTimeStampFromEndDate($endDate);

        $qb = $this->createQueryBuilder(self::ALIAS)
        ->select(self::ALIAS.'.package_name')
        ->where(self::ALIAS.'.user_id IN (:userId)')
        ->setParameter('userId', $userId)
        ->andWhere('('.self::ALIAS.'.created_at BETWEEN '.$finalStartDate.' AND '.$finalEndDate.')')
        ->orderBy(self::ALIAS.'.id', 'DESC')
        ->setFirstResult(0)
        ->setMaxResults(1);

        $resultArray = $qb->getQuery()->getResult();

        if ($resultArray && is_array($resultArray)) {
            $packageName = $resultArray[0]['package_name'];
        }

        return $packageName;
    }

    /**
     * Get user package cancelled counts
     *
     * @param integer $userId    user id.
     * @param string  $startDate start date.
     * @param string  $endDate   end date.
     */
    public function getPackageCancelledCountsByUserIdAndDateRange($userId, $startDate, $endDate)
    {
        $finalStartDate = CommonManager::getTimeStampFromStartDate($startDate);
        $finalEndDate   = CommonManager::getTimeStampFromEndDate($endDate);

        $qb = $this->createQueryBuilder(self::ALIAS)
        ->select(self::ALIAS.'.user_id', 'COUNT('.self::ALIAS.'.package_cancelled_at) As total_cancelled_packages')
        ->where(self::ALIAS.'.user_id IN (:userId)')
        ->setParameter('userId', $userId)
        ->andWhere('('.self::ALIAS.'.package_cancelled_at BETWEEN '.$finalStartDate.' AND  '.$finalEndDate.')')
        ->groupBy(self::ALIAS.'.user_id')
        ->orderBy(self::ALIAS.'.id', 'DESC');

        $resultArray      = $qb->getQuery()->getResult();
        $finalResultArray = array();


        if ($resultArray && is_array($resultArray)) {
            foreach ($resultArray as $record) {
                if (!array_key_exists($record['user_id'], $finalResultArray)) {
                    $finalResultArray[$record['user_id']] = $record;
                }
            }
        }

        return $finalResultArray;
    }

    /**
     * Get user report fields choices.
     *
     * @return array
     */
    public static function getPPRReportFieldsChoices()
    {
        $fieldsArray = array_merge(self::getPPRReportBasicFieldsArray(), self::getPPRReportLocationFieldsArray(), self::getPPRReportDailyBasicFieldsArray(), self::getPPRReportCategoryFieldsArray(), self::getPPRReportProfilePackageFieldsArray());
        asort($fieldsArray);

        return $fieldsArray;
    }

    /**
     * Get user report basic fields array.
     *
     * @return array
     */
    public static function getPPRReportBasicFieldsArray()
    {
        return array('username' => 'Email address',  'is_new' => 'New', 'total_ad' => 'Total ads', 'total_active_ad' => 'Total active ads');
    }

    /**
     * Get user report basic fields array.
     *
     * @return array
     */
    public static function getPPRReportDailyBasicFieldsArray()
    {
        $fieldsArray = array();

        $fieldsArray['renewed_ads'] = 'Renewed ads';
        $fieldsArray['number_of_ad_placed'] = 'Number of ads placed';
        $fieldsArray['number_of_ad_sold'] = 'Number of ads sold';
        $fieldsArray['number_of_ads_to_renew'] = 'Number of ads to renew';
        /*
        $fieldsArray['number_of_free_ads'] = 'Number of free ads';
        $fieldsArray['number_of_paid_ads'] = 'Number of paid ads';
        $fieldsArray['failed_payments'] = 'Failed payments';
        $fieldsArray['rating_scales'] = 'Rating scales';
        */

        return $fieldsArray;
    }

    /**
     * Get user report category fields array.
     *
     * @return array
     */
    public static function getPPRReportCategoryFieldsArray()
    {
        return array('category' => 'Ad category');
    }

    /**
     * Get user report package fields array.
     *
     * @return array
     */
    public static function getPPRReportProfilePackageFieldsArray()
    {
        return array('package_name' => 'Profile package', 'package_category_id' => 'Package category', 'package_value_gross' => 'Profile package value gross', 'package_value_net' => 'Profile package value net', 'package_transaction_revenue_gross' => 'Profile package transaction revenue gross', 'package_transaction_revenue_net' => 'Profile package transaction revenue net', 'package_cancelled' => 'Profile package cancelled');
    }

    /**
     * Get user report basic fields array.
     *
     * @return array
     */
    public static function getPPRReportLocationFieldsArray()
    {
        return array('postcode' => 'Postcode', 'town' => 'Town');
    }

    /**
     * Get user package details
     *
     * @param integer $userId    user id.
     * @param string  $startDate start date.
     * @param string  $endDate   end date.
     */
    public function getPackageRevenueDetailsByUserIdAndDateRange($userId, $startDate, $endDate)
    {
        $finalStartDate = CommonManager::getTimeStampFromStartDate($startDate);
        $finalEndDate   = CommonManager::getTimeStampFromEndDate($endDate);
        $remark = array('package-renew-thourgh-recurring', 'choose-package-frontend', 'reg_back', 'my_account_user_upgrade', 'downgraded-to-free-package-on-fail-payment');

        $qb = $this->createQueryBuilder(self::ALIAS)
        ->select(self::ALIAS.'.user_id', self::ALIAS.'.package_id', 'SUM('.self::ALIAS.'.package_price) As package_transaction_revenue_gross', 'COUNT('.self::ALIAS.'.id) As total_packages')
        ->where(self::ALIAS.'.user_id IN (:userId)')
        ->setParameter('userId', $userId)
        ->andWhere('('.self::ALIAS.'.created_at BETWEEN '.$finalStartDate.' AND  '.$finalEndDate.')')
        ->andWhere('('.self::ALIAS.'.package_remark IN (:package_remark)) AND ('.self::ALIAS.'.is_trial_package <> 1 OR '.self::ALIAS.'.is_trial_package IS NULL)')
        ->setParameter('package_remark', $remark)
        ->groupBy(self::ALIAS.'.user_id')
        ->orderBy(self::ALIAS.'.id', 'DESC');

        $resultArray      = $qb->getQuery()->getResult();
        $finalResultArray = array();

        if ($resultArray && is_array($resultArray)) {
            foreach ($resultArray as $record) {
                if (!array_key_exists($record['user_id'], $finalResultArray)) {
                    $finalResultArray[$record['user_id']] = $record;
                }
            }
        }

        return $finalResultArray;
    }

    /**
     * Get report sort fields
     */
    public static function getReportSortFields()
    {
        return array_merge(self::getUserReportSortFields());
    }

    /**
     * Get user report sort fields
     */
    public static function getUserReportSortFields()
    {
        $userReportSortFields   = array();
        $userReportSortFields[] = 'name';
        $userReportSortFields[] = 'username';
        $userReportSortFields[] = 'email';
        $userReportSortFields[] = 'signup_date';
        $userReportSortFields[] = 'total_ad';
        $userReportSortFields[] = 'total_active_ad';

        return $userReportSortFields;
    }

    /**
     * Get user report category fields array.
     *
     * @return array
     */
    public static function getPPRReportEditionFieldsArray()
    {
        return array('edition' => 'Print edition');
    }
}
