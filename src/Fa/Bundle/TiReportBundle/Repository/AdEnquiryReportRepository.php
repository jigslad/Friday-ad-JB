<?php

/**
 * This file is part of the fa bundle.
 *
 * @copyright Copyright (c) 2014, FMG
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Fa\Bundle\TiReportBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Fa\Bundle\CoreBundle\Manager\CommonManager;
use Fa\Bundle\UserBundle\Repository\RoleRepository;
use Doctrine\ORM\QueryBuilder;

/**
 * AdEnquiryReportRepository repository.
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 *
 * @author Mohit Chauhan <mohitc@aspl.in>
 * @copyright 2014 Friday Media Group Ltd
 * @version 1.0
 */
class AdEnquiryReportRepository extends EntityRepository
{
    use \Fa\Bundle\CoreBundle\Search\Search;

    const ALIAS = 'aer';

    /**
     * Prepare query builder.
     *
     * @param array $data Array of data.
     *
     * @return Doctrine\ORM\QueryBuilder The query builder
     */
    public function getBaseQueryBuilder()
    {
        return $this->createQueryBuilder(self::ALIAS);
    }

    /**
     * Get ad report fields
     */
    public static function getAdEnquiryReportFields($container)
    {
        $reportFields    = array();
        $mainTableFields = self::getReportFields();
        $subTableFields  = CommonManager::getTiHistoryRepository($container, 'FaTiReportBundle:AdEnquiryReportDaily')->getReportFields();
        $userReportFields = self::getUserReportFields();
        $reportFields    = array_merge($mainTableFields, $subTableFields, $userReportFields);

        asort($reportFields);

        return $reportFields;
    }

    /**
     * Get ad report fields
     */
    public static function getReportFields()
    {
        $adReportFields = array();
        $adReportFields['ad_id'] = 'Adref';
        $adReportFields['title'] = 'Title';
        $adReportFields['username'] = 'Email address';
        $adReportFields['description'] = 'Description';
        $adReportFields['category_1'] = 'Category';
        $adReportFields['category_2'] = 'Class';
        $adReportFields['category_3'] = 'Subclass';
        $adReportFields['category_4'] = 'Subsubclass';
        $adReportFields['postcode'] = 'Postcode';
        $adReportFields['county_id'] = 'County';
        $adReportFields['town_id'] = 'Town';
        $adReportFields['saved_ads'] = 'Saved ads';
        $adReportFields['title_word_count'] = 'Title word count';
        $adReportFields['title_character_count'] = 'Title character count';
        $adReportFields['description_word_count'] = 'Description word count';
        $adReportFields['description_character_count'] = 'Description character count';
        $adReportFields['use_privacy_number'] = 'Privacy number';

        asort($adReportFields);

        return $adReportFields;
    }

    /**
     * Get user report fields
     */
    public static function getUserReportFields()
    {
        $userReportFields = array();
        $userReportFields['customer_name'] = 'Customer name';

        return $userReportFields;
    }

    /**
     * Get ad report sort fields
     */
    public static function getReportSortFields()
    {
        $adReportSortFields   = array();
        $adReportSortFields[] = 'ad_id';
        $adReportSortFields[] = 'title';

        return $adReportSortFields;
    }

    /**
     * Get ad enquiry report sort fields
     */
    public static function getAdEnquiryReportSortFields()
    {
        return array_merge(self::getReportSortFields(), AdEnquiryReportDailyRepository::getReportSortFields());
    }

    /**
     * Get ad enquiry report query
     *
     * @param array $searchParams search parameters array.
     *
     * @return array
     */
    public function getAdEnquiryReportQuery($searchParams, $sorter = null, $container, $isCountQuery = false)
    {
        $adEnquiryReportDailyTableFields = array('view', 'contact_seller_click', 'call_click', 'email_send_link', 'social_share', 'web_link_click', 'package_name', 'user_site_view_counter');

        $qb = $this->createQueryBuilder(self::ALIAS);

        if ($isCountQuery) {
            $qb->select('COUNT('.self::ALIAS.'.id)');
        } else {
            $qb->select(
                self::ALIAS.'.ad_id',
                self::ALIAS.'.title',
                self::ALIAS.'.username',
                self::ALIAS.'.description',
                self::ALIAS.'.category_id',
                self::ALIAS.'.postcode',
                self::ALIAS.'.county_id',
                self::ALIAS.'.town_id',
                self::ALIAS.'.saved_ads',
                self::ALIAS.'.title_word_count',
                self::ALIAS.'.title_character_count',
                self::ALIAS.'.description_word_count',
                self::ALIAS.'.description_character_count',
                self::ALIAS.'.use_privacy_number',
                AdEnquiryReportDailyRepository::ALIAS.'.package_name'
            );

            if ($searchParams && CommonManager::inArrayMulti($adEnquiryReportDailyTableFields, $searchParams['report_columns'])) {
                $qb = $qb->addSelect(
                    'SUM('.AdEnquiryReportDailyRepository::ALIAS.'.view) As view',
                    'SUM('.AdEnquiryReportDailyRepository::ALIAS.'.contact_seller_click) As contact_seller_click',
                    'SUM('.AdEnquiryReportDailyRepository::ALIAS.'.call_click) As call_click',
                    'SUM('.AdEnquiryReportDailyRepository::ALIAS.'.email_send_link) As email_send_link',
                    'SUM('.AdEnquiryReportDailyRepository::ALIAS.'.social_share) As social_share',
                    'SUM('.AdEnquiryReportDailyRepository::ALIAS.'.web_link_click) As web_link_click',
                    'SUM('.AdEnquiryReportDailyRepository::ALIAS.'.user_site_view_counter) As user_site_view_counter'
                );

                if (is_array($sorter) && array_key_exists('sort_field', $sorter)) {
                    if (in_array($sorter['sort_field'], AdEnquiryReportDailyRepository::getReportSortFields())) {
                        $qb = $qb->addSelect('SUM('.AdEnquiryReportDailyRepository::ALIAS.'.'.$sorter['sort_field'].') As '.$sorter['sort_field'].'_sum');
                    }
                }
            }
        }

        if ($searchParams && !empty($searchParams['from_date'])) {
            $finalStartDate = CommonManager::getTimeStampFromStartDate($searchParams['from_date']);
            if (isset($searchParams['to_date']) && $searchParams['to_date'] != '') {
                $finalEndDate = CommonManager::getTimeStampFromEndDate($searchParams['to_date']);
            } else {
                $finalEndDate = CommonManager::getTimeStampFromEndDate(date('d/m/Y'));
            }
            $qb = $qb->where('('.self::ALIAS.'.created_at BETWEEN '.$finalStartDate.' AND  '.$finalEndDate.')');
            $qb = $qb->orWhere('('.AdEnquiryReportDailyRepository::ALIAS.'.created_at BETWEEN '.$finalStartDate.' AND  '.$finalEndDate.')');
        }

        $qb = $qb->leftJoin('FaTiReportBundle:AdEnquiryReportDaily', AdEnquiryReportDailyRepository::ALIAS, 'WITH', AdEnquiryReportDailyRepository::ALIAS.'.ad_id = '.self::ALIAS.'.ad_id');
        if ($searchParams && (in_array('customer_name', $searchParams['report_columns']))) {
            $qb = $qb->leftJoin('FaTiReportBundle:UserReport', UserReportRepository::ALIAS, 'WITH', UserReportRepository::ALIAS.'.user_id = '.self::ALIAS.'.user_id');
            if (!$isCountQuery) {
                $qb = $qb->addSelect(UserReportRepository::ALIAS.'.name', UserReportRepository::ALIAS.'.business_name');
            }
        }

        if (!$isCountQuery) {
            $qb = $qb->addGroupBy(self::ALIAS.'.ad_id');
            $qb = $this->addSorter($qb, $sorter, $container);
        }

        $qb = $this->addFilter($qb, $searchParams, $container);

        return $qb->getQuery();
    }

    /**
     * Format ad report fields.
     *
     * @param array   $adReportDetailArray Ad report detail array.
     * @param object  $container           Container object.
     * @param integer $uniqueBit           Unique bit.
     */
    public function formatAdEnquiryReportRaw($adReportDetailArray, $container, $uniqueBit = null)
    {
        $fieldValueArray = array();
        $entityFields    = array('category_id', 'town_id', 'county_id');

        foreach ($adReportDetailArray as $key => $value) {
            if (in_array($key, $entityFields)) {
                $entityCacheManager = $container->get('fa.entity.cache.manager');
                switch ($key) {
                    case 'category_id':
                        $categoryPath = CommonManager::getEntityRepository($container, 'FaEntityBundle:Category')->getCategoryPathArrayById($value, false, $container);
                        if (is_array($categoryPath)) {
                            $catCounter = 1;
                            foreach ($categoryPath as $catKey => $catValue) {
                                $fieldValueArray['category_'.$catCounter] = $catValue;
                                $catCounter++;
                            }
                        }
                        break;
                    case 'county_id':
                    case 'town_id':
                        $fieldValueArray[$key] = $entityCacheManager->getEntityNameById('FaEntityBundle:Location', $value);
                        break;
                }
            } elseif ($key == 'name' || $key == 'business_name') {
                $customerName = '-';
                if (isset($adReportDetailArray['business_name']) && strlen(trim($adReportDetailArray['business_name']))) {
                    $customerName = $adReportDetailArray['business_name'];
                } elseif (isset($adReportDetailArray['name'])) {
                    $customerName = $adReportDetailArray['name'];
                }

                $fieldValueArray['customer_name'] = $customerName;
            } else {
                if ($value) {
                    $fieldValueArray[$key] = $value;
                } else {
                    $fieldValueArray[$key] = '-';
                }
            }
        }

        return $fieldValueArray;
    }

    /**
     *
     * @param object $qb           QueryBuilder object.
     * @param array  $searchParams Search parameters array.
     * @param object $container    Container object.
     *
     * @return QueryBuilder
     */
    private function addFilter($qb, $searchParams, $container)
    {
        // category filter.
        if (isset($searchParams['category_id']) && $searchParams['category_id']) {
            $nestedChildren = CommonManager::getEntityRepository($container, 'FaEntityBundle:Category')->getNestedChildrenIdsByCategoryId($searchParams['category_id']);
            $qb->andWhere(self::ALIAS.'.category_id IN (:categoryId)')
            ->setParameter('categoryId', $nestedChildren);
        }

        // ad ref filter.
        if (isset($searchParams['ad_id']) && $searchParams['ad_id']) {
            $qb->andWhere(self::ALIAS.'.ad_id = (:adId)')
            ->setParameter('adId', $searchParams['ad_id']);
        }

        // username filter.
        if (isset($searchParams['username']) && $searchParams['username']) {
            $qb->andWhere(self::ALIAS.'.username = (:username)')
            ->setParameter('username', $searchParams['username']);
        }

        // location filter.
        if (isset($searchParams['town_id']) && $searchParams['town_id']) {
            $qb->andWhere(self::ALIAS.'.town_id IN (:townId)')
            ->setParameter('townId', $searchParams['town_id']);
        } elseif (isset($searchParams['county_id']) && $searchParams['county_id']) {
            $qb->andWhere(self::ALIAS.'.county_id = (:countyId)')
            ->setParameter('countyId', $searchParams['county_id']);
        }

        // user type filter.
        if (isset($searchParams['role_id']) && $searchParams['role_id']) {
            if ($searchParams['role_id'] == RoleRepository::ROLE_BUSINESS_SELLER_ID.'-paid') {
                $qb->andWhere(AdEnquiryReportDailyRepository::ALIAS.'.package_price > 0')
                    ->andWhere(AdEnquiryReportDailyRepository::ALIAS.'.role_id = (:role_id)')
                    ->setParameter('role_id', RoleRepository::ROLE_BUSINESS_SELLER_ID);
            } else {
                $qb->andWhere(AdEnquiryReportDailyRepository::ALIAS.'.role_id = (:role_id)')
                ->setParameter('role_id', $searchParams['role_id']);
            }
        }

        return $qb;
    }

    /**
     * Get print upsell ids array.
     *
     * @param array $userIds user id array.
     *
     * @return array
     */
    public function getAdEnquiryReportAdsByIds($adIds)
    {
        $adEnquiryReportAdIds = array();
        $objAdEnquiryReports = $this->getBaseQueryBuilder()
        ->andWhere(self::ALIAS.'.ad_id IN (:adIds)')
        ->setParameter('adIds', $adIds)
        ->getQuery()
        ->getResult();

        foreach ($objAdEnquiryReports as $objAdEnquiryReport) {
            $adEnquiryReportAdIds[] = $objAdEnquiryReport->getAdId();
        }

        return $adEnquiryReportAdIds;
    }

    /**
     *
     * @param object $qb           QueryBuilder object.
     * @param array  $sorter       Sort parameters array.
     * @param object $container    Container object.
     *
     * @return QueryBuilder
     */
    private function addSorter($qb, $sorter, $container)
    {
        // sorting.
        $sortFields = self::getAdEnquiryReportSortFields();
        if (in_array($sorter['sort_field'], $sortFields) && isset($sorter['sort_field']) && $sorter['sort_field'] && isset($sorter['sort_ord']) && $sorter['sort_ord']) {
            if (in_array($sorter['sort_field'], self::getReportSortFields())) {
                $qb->orderBy(self::ALIAS.'.'.$sorter['sort_field'], $sorter['sort_ord']);
            } else if (in_array($sorter['sort_field'], AdEnquiryReportDailyRepository::getReportSortFields())) {
                $qb->orderBy($sorter['sort_field'].'_sum', $sorter['sort_ord']);
            }
        }

        return $qb;
    }
}
