<?php

/**
 * This file is part of the fa bundle.
 *
 * @copyright Copyright (c) 2014, FMG
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Fa\Bundle\PromotionBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Fa\Bundle\CoreBundle\Manager\CommonManager;
use Fa\Bundle\PromotionBundle\Entity\Package;
use Fa\Bundle\EntityBundle\Repository\CategoryRepository;
use Fa\Bundle\UserBundle\Repository\UserUpsellRepository;
use Fa\Bundle\UserBundle\Repository\RoleRepository;

/**
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 *
 * @author Amit Limbadia <amitl@aspl.in>
 * @copyright 2014 Friday Media Group Ltd
 * @version v1.0
 */
class PackageDiscountCodeRepository extends EntityRepository
{
    use \Fa\Bundle\CoreBundle\Search\Search;

    const ALIAS = 'pdc';
    const PACKAGE_PERCENTAGE_DISCOUNT_TYPE_ID  = '1';
    const PACKAGE_CASH_DISCOUNT_TYPE_ID        = '2';

    const PACKAGE_DISCOUNT_CODE_REFRESH_DAYS   = '27';

    /**
     * Prepare query builder.
     *
     * @param array $data Array of data.
     *
     * @return Doctrine\ORM\QueryBuilder The query builder
     */
    public function getBaseQueryBuilder()
    {
        return $this->createQueryBuilder(self::ALIAS);
    }

    /**
     * Add code filter to existing query object.
     *
     * @param string $code Code.
     */
    protected function addCodeFilter($code = null)
    {
        $this->queryBuilder->andWhere(sprintf('%s.code LIKE \'%%%s%%\'', $this->getRepositoryAlias(), $code));
    }

    /**
     * Add package status filter to existing query object.
     *
     * @param integer $status
     */
    protected function addStatusFilter($status = null)
    {
        $this->queryBuilder->andWhere($this->getRepositoryAlias().'.status = '.$status);
    }

    /**
     * Add package type filter to existing query object.
     *
     * @param array $packageSrNo Role id.
     */
    protected function addPackageSrNoFilter($packageSrNos = null)
    {
        $sqlString = null;

        foreach ($packageSrNos as $packageSrNo) {
            $sqlString .= 'FIND_IN_SET('.$packageSrNo.', '.self::ALIAS.'.package_sr_no) > 0 OR ';
        }

        if ($sqlString) {
            $sqlString = rtrim($sqlString, 'OR ');
        }

        $this->queryBuilder->andWhere($sqlString);
    }

    /**
     * Add category id filter to existing query object
     *
     * @param integer $id category id.
     */
    protected function addCategoryIdFilter($id = null)
    {
        if ($id) {
            if (!is_array($id)) {
                $id = array($id);
            }

            $id = array_filter($id);
            if (count($id)) {
                $categoryNestedArray = array();
                foreach ($id as $categoryId) {
                    $nestedChildren = $this->_em->getRepository('FaEntityBundle:Category')->getNestedChildrenIdsByCategoryId($categoryId);
                    if (count($nestedChildren)) {
                        $categoryNestedArray = $categoryNestedArray + $nestedChildren;
                    }
                }

                $id = $categoryNestedArray;
                $this->queryBuilder->andWhere(CategoryRepository::ALIAS.'.id IN (:category_id'.')');
                $this->queryBuilder->setParameter('category_id', $id);
            }
        }
    }

    /**
     * Add role id filter to existing query object
     *
     * @param array $roleids Role id.
     */
    protected function addRoleIdsFilter($roleIds = null)
    {
        $sqlString = null;
        foreach ($roleIds as $roleId) {
            $sqlString .= 'FIND_IN_SET('.$roleId.', '.self::ALIAS.'.role_ids) > 0 OR ';
        }

        if ($sqlString) {
            $sqlString = rtrim($sqlString, 'OR ');
        }

        $this->queryBuilder->andWhere($sqlString);
    }

    /**
     * get package discount types array.
     *
     * @return array
     */
    public function getPackageDiscountTypeArray()
    {
        $discountTypeArray = array();
        $discountTypeArray[self::PACKAGE_PERCENTAGE_DISCOUNT_TYPE_ID] = 'Percentage discount (%)';
        $discountTypeArray[self::PACKAGE_CASH_DISCOUNT_TYPE_ID] = 'Cash discount (Â£)';

        return $discountTypeArray;
    }

    /**
     * Process discount code.
     *
     * @param object  $codeObj
     * @param object  $cart
     * @param array   $cartDetails
     * @param object  $loggedinUser
     * @param object  $container
     * @param boolean $checkCodeApplied
     *
     * @return array
     */
    public function processDiscountCode($codeObj, $cart, $cartDetails, $loggedinUser, $container, $checkCodeApplied = true)
    {
        foreach ($cartDetails as $cartDetailIndex => $cartDetail) {
            $cartDetailValue = unserialize($cartDetail['value']);
            $packagePrice = 0;
            foreach ($cartDetailValue['package'] as $packageDetail) {
                $packagePrice = $packageDetail['price'];
            }
            $cartDetails[$cartDetailIndex]['org_amount'] = $packagePrice;
        }

        //sort all items using amount asc
        usort($cartDetails, array($this, "compareByAmount"));

        $error = '';
        $cartValue = unserialize($cart->getValue());
        if ($checkCodeApplied && isset($cartValue['discount_values']) && count($cartValue['discount_values'])) {
            $error = $container->get('translator')->trans('One code is already applied to your basket, please remove old code to apply new code.', array(), 'frontend-cart-payment');
        } else {
            if (!$codeObj) {
                $error = $container->get('translator')->trans('Invalid code.', array(), 'frontend-cart-payment');
            } elseif ($codeObj && $codeObj->getExpiresAt() && $codeObj->getExpiresAt() < time()) {
                $error = $container->get('translator')->trans('This code has expired.', array(), 'frontend-cart-payment');
            } elseif ($codeObj && $codeObj->getEmails() && !in_array($loggedinUser->getEmail(), array_map('trim', explode(',', $codeObj->getEmails())))) {
                $error = $container->get('translator')->trans('Code not applicable.', array(), 'frontend-cart-payment');
            } else if ($codeObj->getRoleIds() || $codeObj->getCategory() || $codeObj->getPackageSrNo()) {
                list($totalRemainLimit, $remainLimit, $error) = $this->validateDiscountCodeLimit($codeObj, $loggedinUser, $container);
                if (!$error) {
                    $totalDiscountAmount = 0;
                    if ($codeObj->getDiscountType() == PackageDiscountCodeRepository::PACKAGE_CASH_DISCOUNT_TYPE_ID) {
                        $totalDiscountAmount = $codeObj->getDiscountValue();
                    }

                    $userRoleId = ($loggedinUser->getRole() ? $loggedinUser->getRole()->getId() : null);
                    $codeAppliedFlag = true;
                    //role wise checking
                    if ($codeObj->getRoleIds()) {
                        $codeRoleIds = explode(',', $codeObj->getRoleIds());
                        if (!in_array($userRoleId, $codeRoleIds)) {
                            $codeAppliedFlag = false;
                        } else {
                            if ($codeObj->getPaidUserOnly() && $userRoleId == RoleRepository::ROLE_BUSINESS_SELLER_ID) {
                                $userActivePackage = $this->_em->getRepository('FaUserBundle:UserPackage')->findOneBy(array('user' => $loggedinUser->getId(), 'status' => 'A'));

                                if (!$userActivePackage || ($userActivePackage && !$userActivePackage->getPackage()) || ($userActivePackage && !$userActivePackage->getPackage() && $userActivePackage->getPackage()->getPrice() <=0) ) {
                                    $codeAppliedFlag = false;
                                } elseif (!$codeObj->getCategory() && !$codeObj->getPackageSrNo()) {
                                    //apply code to all ads in cart
                                    $this->_em->getRepository('FaPaymentBundle:TransactionDetail')->applyCodeToAllItems($codeObj, $cartDetails, $totalRemainLimit, $remainLimit);
                                }
                            } else if (!$codeObj->getCategory() && !$codeObj->getPackageSrNo()) {
                                //apply code to all ads in cart
                                $this->_em->getRepository('FaPaymentBundle:TransactionDetail')->applyCodeToAllItems($codeObj, $cartDetails, $totalRemainLimit, $remainLimit);
                            }
                        }
                    }

                    //category wise checking
                    if ($codeAppliedFlag && $codeObj->getCategory()) {
                        $codeCategoryId = $codeObj->getCategory()->getId();
                        foreach ($cartDetails as $cartDetail) {
                            $codeCategoryNestedChildren = $this->_em->getRepository('FaEntityBundle:Category')->getNestedChildrenIdsByCategoryId($codeCategoryId);
                            if (in_array($cartDetail['category_id'], $codeCategoryNestedChildren) && $codeObj->getPackageSrNo()) {
                                $cartDetailValue = unserialize($cartDetail['value']);
                                foreach ($cartDetailValue['package'] as $adPackageId => $adPackageValue) {
                                    $adPackageObj = $this->_em->getRepository('FaPromotionBundle:Package')->find($adPackageId);
                                    if ($adPackageObj && in_array($adPackageObj->getPackageSrNo(), explode(',', $codeObj->getPackageSrNo()))) {
                                        //apply code to specific ad in cart
                                        $totalDiscountAmount = $this->_em->getRepository('FaPaymentBundle:TransactionDetail')->applyCodeToOneItem($codeObj, $cartDetail['id'], $totalDiscountAmount, $totalRemainLimit, $remainLimit);
                                        if ($codeObj->getDiscountType() != PackageDiscountCodeRepository::PACKAGE_CASH_DISCOUNT_TYPE_ID) {
                                            list($totalRemainLimit, $remainLimit) = $this->decreaseLimitByOne($totalRemainLimit, $remainLimit);
                                        }
                                    }
                                }
                            } elseif (in_array($cartDetail['category_id'], $codeCategoryNestedChildren)) {
                                //apply code to specific ad in cart
                                $totalDiscountAmount = $this->_em->getRepository('FaPaymentBundle:TransactionDetail')->applyCodeToOneItem($codeObj, $cartDetail['id'], $totalDiscountAmount, $totalRemainLimit, $remainLimit);
                                if ($codeObj->getDiscountType() != PackageDiscountCodeRepository::PACKAGE_CASH_DISCOUNT_TYPE_ID) {
                                    list($totalRemainLimit, $remainLimit) = $this->decreaseLimitByOne($totalRemainLimit, $remainLimit);
                                }
                            }
                        }
                    } else if ($codeAppliedFlag && $codeObj->getPackageSrNo()) {
                        foreach ($cartDetails as $cartDetail) {
                            $cartDetailValue = unserialize($cartDetail['value']);
                            foreach ($cartDetailValue['package'] as $adPackageId => $adPackageValue) {
                                $adPackageObj = $this->_em->getRepository('FaPromotionBundle:Package')->find($adPackageId);
                                if ($adPackageObj && in_array($adPackageObj->getPackageSrNo(), explode(',', $codeObj->getPackageSrNo()))) {
                                    //apply code to specific ad in cart
                                    $totalDiscountAmount = $this->_em->getRepository('FaPaymentBundle:TransactionDetail')->applyCodeToOneItem($codeObj, $cartDetail['id'], $totalDiscountAmount, $totalRemainLimit, $remainLimit);
                                    if ($codeObj->getDiscountType() != PackageDiscountCodeRepository::PACKAGE_CASH_DISCOUNT_TYPE_ID) {
                                        list($totalRemainLimit, $remainLimit) = $this->decreaseLimitByOne($totalRemainLimit, $remainLimit);
                                    }
                                }
                            }
                        }
                    }
                }
            } else {
                list($totalRemainLimit, $remainLimit, $error) = $this->validateDiscountCodeLimit($codeObj, $loggedinUser, $container);
                if (!$error) {
                    //apply code to all ads
                    $this->_em->getRepository('FaPaymentBundle:TransactionDetail')->applyCodeToAllItems($codeObj, $cartDetails, $totalRemainLimit, $remainLimit);
                }
            }
        }

        $this->_em->getRepository('FaPaymentBundle:Cart')->clear();
        $cart = $this->_em->getRepository('FaPaymentBundle:Cart')->getUserCart($loggedinUser->getId(), $container);
        $cartValue = unserialize($cart->getValue());
        $codeAppliedFlag = true;
        if ($cart->getAmount() > 0 && !isset($cartValue['discount_values'])) {
            $codeAppliedFlag = false;
            if ($codeObj && !$error) {
                $error = $container->get('translator')->trans('Code not applicable.', array(), 'frontend-cart-payment');
            }
        } elseif (isset($cartValue['discount_values']) && isset($cartValue['discount_values']['discount_type']) && $cartValue['discount_values']['discount_type'] == PackageDiscountCodeRepository::PACKAGE_CASH_DISCOUNT_TYPE_ID) {
            //update discount given.
            $transactionDetails = $this->_em->getRepository('FaPaymentBundle:TransactionDetail')->getTransactionDetailsByCartId($cart->getId());
            $cartValue['discount_values']['discount_given'] = 0;
            foreach ($transactionDetails as $transactionDetail) {
                $transactionDetailValue = unserialize($transactionDetail->getValue());
                if (isset($transactionDetailValue['discount_values']) && isset($transactionDetailValue['discount_values']['discount_type']) && $transactionDetailValue['discount_values']['discount_type'] == PackageDiscountCodeRepository::PACKAGE_CASH_DISCOUNT_TYPE_ID) {
                    $cartValue['discount_values']['discount_given'] += $transactionDetailValue['discount_values']['discount_given'];
                }
            }

            $cart->setValue(serialize($cartValue));
            $this->_em->persist($cart);
            $this->_em->flush($cart);
            $this->_em->getRepository('FaPaymentBundle:Cart')->clear();
        }

        return array($error, (isset($codeAppliedFlag) ? $codeAppliedFlag : false));
    }

    /**
     * Compare by amount.
     *
     * @param integer $a Array element.
     * @param integer $b Array element.
     *
     * @return number
     */
    private function compareByAmount($a, $b)
    {
        return $a["org_amount"] - $b["org_amount"];
    }

    /**
     * Validate discount codes against different limits
     *
     * @param object  $codeObj
     * @param object  $loggedinUser
     * @param object  $container
     *
     * @return NULL|string
     */
    public function validateDiscountCodeLimit($codeObj, $loggedinUser, $container)
    {
        $error = '';
        $codeTotalLimit = 0;
        $codeUserTotalLimit = 0;
        $codeMonthlyUserTotalLimit = 0;
        if ($codeObj) {
            $codeTotalLimit = $this->_em->getRepository('FaPromotionBundle:UserPackageDiscountCode')->getTotalUsedCountForCode($codeObj->getId());
            $codeUserTotalLimit = $this->_em->getRepository('FaPromotionBundle:UserPackageDiscountCode')->getTotalUsedCountForCodeByUser($codeObj->getId(), $loggedinUser->getId());
            $codeMonthlyUserTotalLimit = $this->_em->getRepository('FaPromotionBundle:UserPackageDiscountCode')->getTotalMonthlyUsedCountForCodeByUser($codeObj->getId(), $loggedinUser->getId());

            // code total limit checking
            if ($codeObj && $codeObj->getTotalLimit() && $codeTotalLimit >= $codeObj->getTotalLimit()) {
                //expire code by setting old timestamp
                $codeObj->setExpiresAt(strtotime('-1 day'));
                $this->_em->persist($codeObj);
                $this->_em->flush($codeObj);
                $error = $container->get('translator')->trans('This code has expired.', array(), 'frontend-cart-payment');
            }

            // code total limit checking per user
            if ($codeObj && $codeObj->getUserLimit() && $codeUserTotalLimit >= $codeObj->getUserLimit()) {
                $error = $container->get('translator')->trans('You\'ve reached the maximum number of uses for this code', array(), 'frontend-cart-payment');
            }

            // code monthly total limit checking per user
            if ($codeObj && $codeObj->getMonthlyUserLimit() && $codeMonthlyUserTotalLimit >= $codeObj->getMonthlyUserLimit()) {
                $lastTimeCodeUsedObj = $this->_em->getRepository('FaPromotionBundle:UserPackageDiscountCode')->findOneBy(array('package_discount_code' => $codeObj->getId(), 'user' => $loggedinUser->getId()), array('created_at' => 'desc'));
                $createdAtTo = date_create(date('Y-m-d', strtotime('+'.PackageDiscountCodeRepository::PACKAGE_DISCOUNT_CODE_REFRESH_DAYS.' days',$lastTimeCodeUsedObj->getCreatedAt())));
                $todaysDate  = date_create(date('Y-m-d', time()));
                $dateDiff = date_diff($todaysDate, $createdAtTo);
                $remainingDays = $dateDiff->format("%a") + 1;
                $error = $container->get('translator')->trans('You\'ve reached the maximum number of uses for this code this month. Code refreshes in %days% days.', array('%days%' => $remainingDays), 'frontend-cart-payment');
            }

            // Calculate remaining limit.
            $remainLimit = -1;
            $totalRemainLimit = -1;
            if ($codeObj->getUserLimit()) {
                $remainLimit = $codeObj->getUserLimit();
                if ($codeUserTotalLimit) {
                    if ($codeUserTotalLimit < $codeObj->getUserLimit()) {
                        $remainLimit = $codeObj->getUserLimit() - $codeUserTotalLimit;
                    } else {
                        $remainLimit = 0;
                    }
                }
            } elseif ($codeObj->getMonthlyUserLimit()) {
                $remainLimit = $codeObj->getMonthlyUserLimit();
                if ($codeMonthlyUserTotalLimit) {
                    if ($codeMonthlyUserTotalLimit < $codeObj->getMonthlyUserLimit()) {
                        $remainLimit = $codeObj->getMonthlyUserLimit() - $codeMonthlyUserTotalLimit;
                    } else {
                        $remainLimit = 0;
                    }
                }
            }

            // Calculate total limit.
            if ($codeObj->getTotalLimit()) {
                $totalRemainLimit = $codeObj->getTotalLimit();
                if ($codeTotalLimit) {
                    if ($codeTotalLimit < $codeObj->getTotalLimit()) {
                        $totalRemainLimit = $codeObj->getTotalLimit() - $codeTotalLimit;
                    } else {
                        $totalRemainLimit = 0;
                    }
                }
            }
        }

        return array($totalRemainLimit, $remainLimit, $error);
    }

    /**
     * Get package discount valu array.
     *
     * @param object $codeObj
     *
     * @return array
     */
    public function getPackageDiscountValueArray($codeObj)
    {
        $packageDiscountCodeArray = array();

        $packageDiscountCodeArray['id'] = $codeObj->getid();
        $packageDiscountCodeArray['category_id'] = ($codeObj->getCategory() ? $codeObj->getCategory()->getId() : null);
        $packageDiscountCodeArray['code'] = $codeObj->getCode();
        $packageDiscountCodeArray['discount_type'] = $codeObj->getDiscountType();
        $packageDiscountCodeArray['discount_value'] = $codeObj->getDiscountValue();
        $packageDiscountCodeArray['package_sr_no'] = $codeObj->getPackageSrNo();
        $packageDiscountCodeArray['role_ids'] = $codeObj->getRoleIds();
        $packageDiscountCodeArray['paid_user_only'] = $codeObj->getPaidUserOnly();
        $packageDiscountCodeArray['expires_at'] = $codeObj->getExpiresAt();
        $packageDiscountCodeArray['emails'] = $codeObj->getEmails();

        return $packageDiscountCodeArray;
    }

    /**
     * Decrease limit by one.
     *
     * @param integer $totalRemainLimit
     * @param integer $remainLimit
     */
    private function decreaseLimitByOne($totalRemainLimit, $remainLimit)
    {
        if ($totalRemainLimit >= 0) {
            $totalRemainLimit = $totalRemainLimit - 1;
            if ($totalRemainLimit < 0) {
                $totalRemainLimit = 0;
            }
        }

        if ($remainLimit >= 0) {
            $remainLimit = $remainLimit - 1;
            if ($remainLimit < 0) {
                $remainLimit = 0;
            }
        }

        return array($totalRemainLimit, $remainLimit);
    }
}
