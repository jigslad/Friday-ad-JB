<?php

/**
 * This file is part of the fa bundle.
 *
 * @copyright Copyright (c) 2014, FMG
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Fa\Bundle\PromotionBundle\Repository;

use Doctrine\ORM\QueryBuilder;
use Fa\Bundle\AdBundle\Entity\Ad;
use Doctrine\ORM\EntityRepository;
use Fa\Bundle\UserBundle\Entity\User;
use Fa\Bundle\CoreBundle\Manager\CommonManager;
use Fa\Bundle\PromotionBundle\Entity\CategoryUpsell;
use Symfony\Component\DependencyInjection\Container;

/**
 * This class was generated by the Doctrine ORM.
 * Add your own custom
 * repository methods below.
 *
 * @author    Akash M. Pai <akash.pai@fridaymediagroup.com>
 * @copyright 2017 Friday Media Group Ltd
 * @version   v1.0
 */
class CategoryUpsellRepository extends EntityRepository
{
    use \Fa\Bundle\CoreBundle\Search\Search;

    const ALIAS = 'cu';

    /**
     * Prepare query builder.
     *
     * @return QueryBuilder The query builder
     */
    public function getBaseQueryBuilder()
    {
        return $this->createQueryBuilder(self::ALIAS);
    }

    /**
     * Get table name.
     */
    private function getTableName()
    {
        return $this->_em->getClassMetadata('FaPromotionBundle:CategoryUpsell')->getTableName();
    }

    /**
     * @return string
     */
    public function getClassName()
    {
        return parent::getClassName(); // TODO: Change the autogenerated stub
    }

    /**
     * Get category_upsell table name.
     *
     * @return string
     */
    private function getCategoryUpsellTableName()
    {
        return $this->_em->getClassMetadata('FaPromotionBundle:CategoryUpsell')->getTableName();
    }

    /**
     * Get categories by upsell ids.
     *
     * @param array $upsellIds Array of upsell ids.
     *
     * @return CategoryUpsell[]
     */
    public function getCategoryByUpsellIds($upsellIds)
    {
        $query = $this->createQueryBuilder(self::ALIAS)
            ->innerJoin(self::ALIAS . '.upsell', UpsellRepository::ALIAS)
            ->where(UpsellRepository::ALIAS . '.id IN (:upsellIds)')
            ->setParameter('upsellIds', $upsellIds);

        $objResources = $query->getQuery()->getResult();

        return $objResources;
    }

    /**
     * Add category filter to existing query object
     *
     * @param string $category
     *
     * @return void
     */
    protected function addCategoryFilter($category = null)
    {
        $this->queryBuilder->andWhere(sprintf('%s.category = %d', $this->getRepositoryAlias(), $category));
    }

    /**
     * Add upsell filter to existing query object
     *
     * @param string $upsell
     *
     * @return void
     */
    protected function addUpsellFilter($upsell = null)
    {
        $this->queryBuilder->andWhere(sprintf('%s.upsell = %d', $this->getRepositoryAlias(), $upsell));
    }

    /**
     * @param      $category
     * @param null $container
     * @return array|mixed
     */
    public function getAvailableCategoryUpsellForCategory($category, $container = null)
    {
        $cacheKey = "";
        if ($container) {
            $culture = CommonManager::getCurrentCulture($container);
            $tableName = $this->getTableName();
            $cacheKey = $tableName . '|' . __FUNCTION__ . '|' . $category . '_' . $culture;
            $cachedValue = CommonManager::getCacheVersion($container, $cacheKey);

            if ($cachedValue !== false) {
                return $cachedValue;
            }
        }

        $categories = [$category];
        do {
            $catResult = $this->_em->getRepository('FaEntityBundle:Category')->find($this->_em->getRepository('FaEntityBundle:Category')->find($category)->getParent()->getId());
            $categories[] = $category = $catResult->getId();
        } while ($catResult->getParent() && $catResult->getParent()->getId() > 1);

        $query = $this->createQueryBuilder(self::ALIAS)
            ->innerJoin(self::ALIAS . '.upsell', UpsellRepository::ALIAS)
            ->where(self::ALIAS . '.category IN (:category)')
            ->setParameter('category', $categories)
            ->addOrderBy(self::ALIAS . '.price', 'ASC');

        $categoryUpsells = $query->getQuery()->getResult();

        if ($container) {
            CommonManager::setCacheVersion($container, $cacheKey, $categoryUpsells);
        }

        return $categoryUpsells;
    }

    /**
     * @param           $categoryUpsellIds
     * @param Ad        $adObj
     * @param User      $userObj
     * @param Container $container
     * @return mixed
     */
    public function getCategoryUpsellInfoForTransaction($categoryUpsellIds, $adObj, $userObj, $container = null)
    {
        /**
         * @var CategoryUpsell $categoryUpsellObj
         */
        $cacheKey = "";
        if (!is_array($categoryUpsellIds)) {
            $categoryUpsellIds = [$categoryUpsellIds];
        }

        if ($container) {
            $culture = CommonManager::getCurrentCulture($container);
            $tableName = $this->getTableName();
            asort($categoryUpsellIds);

            $cacheKey = $tableName . '|' . __FUNCTION__ . '|(' . implode('_', $categoryUpsellIds) . ')_' . $adObj->getId() . '_' . ($userObj ? $userObj->getId() : null) . '_' . $culture;
            $cachedValue = CommonManager::getCacheVersion($container, $cacheKey);

            if ($cachedValue !== false) {
                return $cachedValue;
            }
        }

        $categoryUpsellArray['category_upsell'] = array();
        foreach ($categoryUpsellIds as $categoryUpsellId) {
            $categoryUpsellObj = $this->_em->getRepository('FaPromotionBundle:CategoryUpsell')->find($categoryUpsellId);

            if (!empty($categoryUpsellObj)) {
                $categoryUpsellArray['category_upsell'][$categoryUpsellObj->getId()]['id'] = $categoryUpsellObj->getId();
                $categoryUpsellArray['category_upsell'][$categoryUpsellObj->getId()]['price'] = $categoryUpsellObj->getPrice();

                if ($adObj) {
                    $categoryUpsellArray['category_upsell'][$categoryUpsellObj->getId()]['ad_id'] = $adObj->getId();
                }

                // add user id
                if ($userObj) {
                    $categoryUpsellArray['category_upsell'][$categoryUpsellObj->getId()]['user_id'] = ($userObj ? $userObj->getId() : null);
                }

                $categoryUpsells = array();
                $upsell = $categoryUpsellObj->getUpsell();
                $categoryUpsells[$upsell->getId()]['id'] = $upsell->getId();
                $categoryUpsells[$upsell->getId()]['value'] = $upsell->getValue();
                $categoryUpsells[$upsell->getId()]['value1'] = $upsell->getValue1();
                $categoryUpsells[$upsell->getId()]['duration'] = $upsell->getDuration();

                if ($adObj) {
                    $categoryUpsells[$upsell->getId()]['ad_id'] = $adObj->getId();
                }
                $categoryUpsells[$upsell->getId()]['type'] = $upsell->getType();

                $categoryUpsellArray['category_upsell'][$categoryUpsellObj->getId()]['upsell'] = $categoryUpsells;
            }
        }

        if ($container) {
            CommonManager::setCacheVersion($container, $cacheKey, $categoryUpsellArray);
        }

        return $categoryUpsellArray;
    }

    /**
     * @param $categoryUpsell
     * @return bool
     */
    public function isFreeUpsells($categoryUpsell)
    {
        /**
         * @var CategoryUpsell[] $categoryUpsellArr
         */
        if (!is_array($categoryUpsell) && strpos($categoryUpsell, ',')) {
            $categoryUpsell = str_replace(' ', '', $categoryUpsell);
            $categoryUpsell = explode(',', $categoryUpsell);
        }

        if (is_array($categoryUpsell)) {
            $categoryUpsellArr = $this->getBaseQueryBuilder()
                ->where(self::ALIAS . '.id IN (' . implode(',', $categoryUpsell) . ')')
                ->getQuery()->getResult();

            if ($categoryUpsellArr) {
                foreach ($categoryUpsellArr as $categoryUpsellObj) {
                    if ($categoryUpsellObj->getPrice() > 0) {
                        return false;
                    }
                }
            }

            return true;
        } else {
            $categoryUpsell = $this->find($categoryUpsell);
            if ($categoryUpsell) {
                return $categoryUpsell->getPrice() > 0 ? false : true;
            }

            return true;
        }
    }
}
