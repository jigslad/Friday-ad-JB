<?php

/**
 * This file is part of the fa bundle.
 *
 * @copyright Copyright (c) 2014, FMG
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Fa\Bundle\PromotionBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Fa\Bundle\CoreBundle\Manager\CommonManager;
use Fa\Bundle\PromotionBundle\Entity\PackagePrint;

/**
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 *
 * @author Amit Limbadia <amitl@aspl.in>
 * @copyright 2014 Friday Media Group Ltd
 * @version v1.0
 */
class PackagePrintRepository extends EntityRepository
{
    use \Fa\Bundle\CoreBundle\Search\Search;

    const ALIAS = 'pp';

    /**
     * Prepare query builder.
     *
     * @param array $data Array of data.
     *
     * @return Doctrine\ORM\QueryBuilder The query builder
     */
    public function getBaseQueryBuilder()
    {
        return $this->createQueryBuilder(self::ALIAS);
    }

    /**
     * Remove packages based on package id.
     *
     * @param integer $packageId
     */
    public function removeRecordsByPackageId($packageId)
    {
        $records = $this->createQueryBuilder(self::ALIAS)
        ->andWhere(sprintf('%s.package = %d', self::ALIAS, $packageId))
        ->getQuery()
        ->getResult();

        if ($records) {
            foreach ($records as $record) {
                $this->_em->remove($record);
            }
            $this->_em->flush();
        }
    }

    /**
     * Remove packages based on package id.
     *
     * @param integer $packageId
     */
    public function getPackagePrintByPackageId($packageId)
    {
        return $this->createQueryBuilder(self::ALIAS)
        ->andWhere(sprintf('%s.package = %d', self::ALIAS, $packageId))
        ->getQuery()
        ->getResult();
    }

    /**
     * Get print duration array by packages.
     *
     * @param array   $packageIds Package id array.
     * @param boolean $getOnlyIds Get only print duration ids.
     *
     * @return array
     */
    public function getPrintDurationForPackages($packageIds = array(), $getOnlyIds = false)
    {
        $qb = $this->createQueryBuilder(self::ALIAS)
            ->leftJoin(self::ALIAS.'.package', PackageRepository::ALIAS);

        if (!is_array($packageIds)) {
            $packageIds = array($packageIds);
        }

        if (count($packageIds)) {
            $qb->andWhere(self::ALIAS.'.package IN (:packageIds)');
            $qb->setParameter('packageIds', $packageIds);
        }

        $printdurations     = $qb->getQuery()->getResult();
        $printdurationArray = array();
        if ($printdurations) {
            foreach ($printdurations as $printduration) {
                if ($getOnlyIds) {
                    $printdurationArray[$printduration->getPackage()->getId()][] = $printduration->getId();
                } else {
                    $printdurationArray[$printduration->getPackage()->getId()][] = array('id' => $printduration->getId(),'price' => $printduration->getPrice(), 'admin_price' => $printduration->getAdminPrice(), 'duration' => $printduration->getDuration());
                }
            }
        }

        return $printdurationArray;
    }

    /**
     * Get package print based on package id.
     *
     * @param integer $packageId
     *
     * @return array
     */
    public function getPackagePrintArrayByPackageId($packageId)
    {
        $packagePrintArray = array();

        $records = $this->createQueryBuilder(self::ALIAS)
        ->andWhere(sprintf('%s.package = %d', self::ALIAS, $packageId))
        ->getQuery()
        ->getResult();

        if ($records) {
            foreach ($records as $record) {
                $packagePrintArray[] = array(
                    'duration' => $record->getDuration(),
                    'price' => (string) $record->getPrice(),
                    'admin_price' => (string) $record->getAdminPrice(),
                );
            }
        }

        return $packagePrintArray;
    }
}
