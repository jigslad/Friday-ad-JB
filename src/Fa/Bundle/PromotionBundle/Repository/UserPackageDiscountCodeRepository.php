<?php

/**
 * This file is part of the fa bundle.
 *
 * @copyright Copyright (c) 2014, FMG
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Fa\Bundle\PromotionBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Fa\Bundle\CoreBundle\Manager\CommonManager;
use Fa\Bundle\PromotionBundle\Entity\Package;
use Fa\Bundle\EntityBundle\Repository\CategoryRepository;
use Fa\Bundle\UserBundle\Repository\UserUpsellRepository;
use Fa\Bundle\UserBundle\Repository\RoleRepository;
use Fa\Bundle\PromotionBundle\Entity\UserPackageDiscountCode;

/**
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 *
 * @author Amit Limbadia <amitl@aspl.in>
 * @copyright 2014 Friday Media Group Ltd
 * @version v1.0
 */
class UserPackageDiscountCodeRepository extends EntityRepository
{
    const ALIAS = 'updc';

    /**
     * Prepare query builder.
     *
     * @param array $data Array of data.
     *
     * @return Doctrine\ORM\QueryBuilder The query builder
     */
    public function getBaseQueryBuilder()
    {
        return $this->createQueryBuilder(self::ALIAS);
    }

    /**
     * Add user package discount code.
     *
     * @param array  $cartValue  Cart value array.
     * @param object $userObj    User object.
     * @param object $paymentObj Payment object.
     * @param object $cart       Cart object.
     */
    public function addUserPackageDiscountCode($cartValue, $userObj, $paymentObj, $cart)
    {
        $paymentValue = unserialize($paymentObj->getValue());
        if (isset($paymentValue['discount_values']) && count($paymentValue['discount_values']) && isset($paymentValue['discount_values']['discount_type']) && $paymentValue['discount_values']['discount_type'] == PackageDiscountCodeRepository::PACKAGE_CASH_DISCOUNT_TYPE_ID) {
            $userPackageDiscountCode = new UserPackageDiscountCode();
            $userPackageDiscountCode->setPayment($paymentObj);
            $userPackageDiscountCode->setUser($userObj);
            $userPackageDiscountCode->setPackageDiscountCode($this->_em->getReference('FaPromotionBundle:PackageDiscountCode', $cartValue['discount_values']['id']));
            $this->_em->persist($userPackageDiscountCode);
            $this->_em->flush($userPackageDiscountCode);
        } else {
            $transactionDetails = $this->_em->getRepository('FaPaymentBundle:TransactionDetail')->getTransactionDetailsByCartId($cart->getId());

            foreach ($transactionDetails as $transactionDetail) {
                $transactionDetailValue = unserialize($transactionDetail->getValue());
                if ($transactionDetail->getDiscountAmount() > 0 && isset($transactionDetailValue['discount_values']) && count($transactionDetailValue['discount_values']) && isset($transactionDetailValue['discount_values']['id'])) {
                    $userPackageDiscountCode = new UserPackageDiscountCode();
                    $userPackageDiscountCode->setPayment($paymentObj);
                    $userPackageDiscountCode->setUser($userObj);
                    if ($transactionDetail->getTransaction() && $transactionDetail->getTransaction()->getAd()) {
                        $userPackageDiscountCode->setAdId($transactionDetail->getTransaction()->getAd()->getId());
                    }
                    $userPackageDiscountCode->setPackageDiscountCode($this->_em->getReference('FaPromotionBundle:PackageDiscountCode', $cartValue['discount_values']['id']));
                    $this->_em->persist($userPackageDiscountCode);
                    $this->_em->flush($userPackageDiscountCode);
                }
            }
        }
    }

    /**
     * Get total used count for code.
     *
     * @param integer $discountCodeId Discount code id.
     *
     * @return integer
     */
    public function getTotalUsedCountForCode($discountCodeId)
    {
        $qb = $this->getBaseQueryBuilder()
            ->select('COUNT('.self::ALIAS.'.id)')
            ->andWhere(self::ALIAS.'.package_discount_code = :package_discount_code')
            ->setParameter('package_discount_code', $discountCodeId);

        return $qb->getQuery()->getSingleScalarResult();
    }

    /**
     * Get total used count for code per user.
     *
     * @param integer $discountCodeId Discount code id.
     * @param integer $userId         User id.
     *
     * @return integer
     */
    public function getTotalUsedCountForCodeByUser($discountCodeId, $userId)
    {
        $qb = $this->getBaseQueryBuilder()
        ->select('COUNT('.self::ALIAS.'.id)')
        ->andWhere(self::ALIAS.'.user = :userId')
        ->setParameter('userId', $userId)
        ->andWhere(self::ALIAS.'.package_discount_code = :package_discount_code')
        ->setParameter('package_discount_code', $discountCodeId);

        return $qb->getQuery()->getSingleScalarResult();
    }

    /**
     * Get total monthly used count for code per user.
     *
     * @param integer $discountCodeId Discount code id.
     * @param integer $userId         User id.
     *
     * @return integer
     */
    public function getTotalMonthlyUsedCountForCodeByUser($discountCodeId, $userId)
    {
        $createdAtFrom = null;
        $createdAtTo = null;

        $lastTimeCodeUsedObj = $this->findOneBy(array('package_discount_code' => $discountCodeId, 'user' => $userId), array('created_at' => 'desc'));
        if ($lastTimeCodeUsedObj) {
            $createdAtFrom = CommonManager::getTimeStampFromStartDate(date('Y-m-d', $lastTimeCodeUsedObj->getCreatedAt()));
            $createdAtTo   = CommonManager::getTimeStampFromEndDate(date('Y-m-d', strtotime('+'.PackageDiscountCodeRepository::PACKAGE_DISCOUNT_CODE_REFRESH_DAYS.' days',$lastTimeCodeUsedObj->getCreatedAt())));

            //if created to is less than today then set new range to search
            if (date('Y-m-d', $createdAtTo) < date('Y-m-d')) {
                $createdAtFrom = strtotime('+1 day', $createdAtTo);
                $createdAtTo   = CommonManager::getTimeStampFromEndDate(date('Y-m-d', strtotime('+'.PackageDiscountCodeRepository::PACKAGE_DISCOUNT_CODE_REFRESH_DAYS.' days', $createdAtFrom)));
            }
        }

        $qb = $this->getBaseQueryBuilder()
        ->select('COUNT('.self::ALIAS.'.id)')
        ->andWhere(self::ALIAS.'.user = :userId')
        ->setParameter('userId', $userId)
        ->andWhere(self::ALIAS.'.package_discount_code = :package_discount_code')
        ->setParameter('package_discount_code', $discountCodeId);

        if ($createdAtFrom && $createdAtTo) {
            $qb->andWhere(self::ALIAS.'.created_at BETWEEN '.$createdAtFrom.' AND  '.$createdAtTo);
        }

        return $qb->getQuery()->getSingleScalarResult();
    }
}
