<?php

/**
 * This file is part of the fa bundle.
 *
 * @copyright Copyright (c) 2014, FMG
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Fa\Bundle\PromotionBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Fa\Bundle\CoreBundle\Manager\CommonManager;
use Fa\Bundle\PromotionBundle\Entity\Package;
use Fa\Bundle\EntityBundle\Repository\CategoryRepository;
use Fa\Bundle\UserBundle\Repository\UserUpsellRepository;
use Fa\Bundle\UserBundle\Repository\RoleRepository;

/**
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 *
 * @author Amit Limbadia <amitl@aspl.in>
 * @copyright 2014 Friday Media Group Ltd
 * @version v1.0
 */
class PackageRepository extends EntityRepository
{
    use \Fa\Bundle\CoreBundle\Search\Search;

    const ALIAS = 'p';
    const SHP_PACKAGE_BASIC_TEXT    = 'basic';
    const SHP_PACKAGE_ENHANCED_TEXT = 'enhanced';
    const SHP_PACKAGE_PREMIUM_TEXT  = 'premium';

    /**
     * Prepare query builder.
     *
     * @param array $data Array of data.
     *
     * @return Doctrine\ORM\QueryBuilder The query builder
     */
    public function getBaseQueryBuilder()
    {
        return $this->createQueryBuilder(self::ALIAS);
    }

    /**
     * Add package name filter to existing query object.
     *
     * @param string $title Package title.
     */
    protected function addTitleFilter($title = null)
    {
        $this->queryBuilder->andWhere(sprintf('%s.title LIKE \'%%%s%%\'', $this->getRepositoryAlias(), $title));
    }

    /**
     * Add package status filter to existing query object.
     *
     * @param integer $status
     */
    protected function addStatusFilter($status = null)
    {
        $this->queryBuilder->andWhere($this->getRepositoryAlias().'.status = '.$status);
    }

    /**
     * Add package role filter to existing query object.
     *
     * @param integer $roleId Role id.
     */
    protected function addRoleIdFilter($roleId = null)
    {
        $this->queryBuilder->andWhere($this->getRepositoryAlias().'.role = '.$roleId);
    }

    /**
     * Get categories by upsell ids.
     *
     * @param array   $upsellIds        Array of upsell ids
     * @param integer $packageId        Package id
     * @param array   $locationGroupIds Array of location group ids
     * @param integer $categoryId       Category id
     * @param integer $roleId           Role id
     *
     * @return Collection
     */
    public function checkPackageByUpsellLocationGroupCategory($upsellIds, $packageId = null, $locationGroupIds = array(), $categoryId = null, $roleId = null)
    {
        $samePackageIdArray  = array();
        $packageUpsellFlag   = false;

        // check for upsell
        $query = $this->createQueryBuilder(self::ALIAS)
        ->innerJoin(self::ALIAS.'.upsells', UpsellRepository::ALIAS)
        ->andWhere(UpsellRepository::ALIAS.'.id IN (:upsellIds)')
        ->setParameter('upsellIds', $upsellIds);

        if ($roleId) {
            $query->andWhere(self::ALIAS.'.role = :roleId')
            ->setParameter('roleId', $roleId);
        }

        if ($packageId) {
            $query->andWhere(self::ALIAS.'.id <> :packageId')
                ->setParameter('packageId', $packageId);
        }
        $query->addGroupBy(self::ALIAS.'.id');
        $upsellPackages = $query->getQuery()->getResult();

        $packageIds       = array();
        $packageUpsellIds = array();
        foreach ($upsellPackages as $upsellPackage) {
            foreach ($upsellPackage->getUpsells() as $packageUpsell) {
                $packageIds[$upsellPackage->getId()] = $upsellPackage->getId();
                if ($packageUpsell->getType() != UpsellRepository::UPSELL_TYPE_ADDITIONAL_PHOTO_ID) {
                    $packageUpsellIds[$upsellPackage->getId()][] = $packageUpsell->getId();
                }
            }
        }

        if (count($packageIds)) {
            foreach ($packageIds as $packageId) {
                if (count($upsellIds) >= count($packageUpsellIds[$packageId])) {
                    if (!count(array_diff($upsellIds, $packageUpsellIds[$packageId]))) {
                        $samePackageIdArray[$packageId] = $packageId;
                    }
                } elseif (count($packageUpsellIds[$packageId]) > count($upsellIds)) {
                    if (!count(array_diff($packageUpsellIds[$packageId], $upsellIds))) {
                        $samePackageIdArray[$packageId] = $packageId;
                    }
                }
            }
        }

        // check for location group
        if (count($samePackageIdArray)) {
            $packagesLocationCategoryArray = $this->_em->getRepository('FaPromotionBundle:PackageRule')->getCategoryLocationGroupByPackageIds($samePackageIdArray);
            if (count($packagesLocationCategoryArray)) {
                foreach ($samePackageIdArray as $packageId) {
                    $packageLocationCategoryArray = isset($packagesLocationCategoryArray[$packageId]) ? $packagesLocationCategoryArray[$packageId] : array();
                    $packageLocationGroupIds = isset($packageLocationCategoryArray['location']) ? array_keys($packageLocationCategoryArray['location']) : array();
                    if (count($locationGroupIds) >= count($packageLocationGroupIds)) {
                        if (!count(array_diff($locationGroupIds, $packageLocationGroupIds))) {
                            $packageUpsellFlag = true;
                            break;
                        } else {
                            $packageUpsellFlag = false;
                        }
                    } elseif (count($packageLocationGroupIds) > count($locationGroupIds)) {
                        if (!count(array_diff($packageLocationGroupIds, $locationGroupIds))) {
                            $packageUpsellFlag = true;
                            break;
                        } else {
                            $packageUpsellFlag = false;
                        }
                    }
                }
            }
        }

        // check for category
        if ($packageUpsellFlag && count($samePackageIdArray)) {
            if (!count($packagesLocationCategoryArray)) {
                $packagesLocationCategoryArray = $this->_em->getRepository('FaPromotionBundle:PackageRule')->getCategoryLocationGroupByPackageIds($samePackageIdArray);
            }
            if (count($packagesLocationCategoryArray)) {
                foreach ($samePackageIdArray as $packageId) {
                    $packageLocationCategoryArray = isset($packagesLocationCategoryArray[$packageId]) ? $packagesLocationCategoryArray[$packageId] : array();
                    $packageCategoryId = isset($packageLocationCategoryArray['category_id']) ? $packageLocationCategoryArray['category_id'] : null;

                    if ($packageCategoryId == $categoryId) {
                        $packageUpsellFlag = true;
                        break;
                    } else {
                        $packageUpsellFlag = false;
                    }
                }
            }
        }

        return $packageUpsellFlag;
    }

    /**
     * Get package array for transaction.
     *
     * @param object  $packageObj                Package object.
     * @param object  $adObj                     Ad object.
     * @param object  $userObj                   User object.
     * @param boolean $isUserHasPurchasedPackage Flag whether use has purchased package or not.
     * @param integer $packagePrintId            Package print id.
     * @param mixed   $isAdminLoggedIn           Admin loggedin user.
     *
     * @return array
     */
    public function getPackageInfoForTransaction($packageObj, $adObj, $userObj = null, $isUserHasPurchasedPackage = false, $packagePrintId = null, $isAdminLoggedIn = null)
    {
        $packageArray['package'] = array();
        $packageArray['package'][$packageObj->getId()]['id'] = $packageObj->getId();
        $packageArray['package'][$packageObj->getId()]['price'] = $this->getPackagePrice($packageObj, $packagePrintId, $isAdminLoggedIn);
        $packageArray['package'][$packageObj->getId()]['duration'] = $packageObj->getDuration();

        if ($adObj) {
            $packageArray['package'][$packageObj->getId()]['ad_id'] = $adObj->getId();
        }

        //add user id
        if ($isUserHasPurchasedPackage) {
            $packageArray['package'][$packageObj->getId()]['user_id'] = ($userObj ? $userObj->getId() : null);
        }

        $packageUpsells = array();
        foreach ($packageObj->getUpsells() as $upsell) {
            $packageUpsells[$upsell->getId()]['id'] = $upsell->getId();
            $packageUpsells[$upsell->getId()]['value'] = $upsell->getValue();
            $packageUpsells[$upsell->getId()]['value1'] = $upsell->getValue1();
            $packageUpsells[$upsell->getId()]['duration'] = $upsell->getDuration();

            if ($adObj) {
                $packageUpsells[$upsell->getId()]['ad_id'] = $adObj->getId();
            }
            $packageUpsells[$upsell->getId()]['type']  = $upsell->getType();
        }

        $packageArray['package'][$packageObj->getId()]['upsell'] = $packageUpsells;

        return $packageArray;
    }

    /**
     * Get all package array.
     *
     * @return array
     */
    public function getAllPackageArray()
    {
        $query = $this->createQueryBuilder(self::ALIAS)
            ->select(self::ALIAS.'.id', self::ALIAS.'.title', self::ALIAS.'.sub_title');

        $packages = $query->getQuery()->getResult();

        $packageArray = array();
        foreach ($packages as $package) {
            $packageArray[$package['id']] = array(
                'title' => $package['title'],
                'sub_title' => $package['sub_title'],
            );
        }

        return $packageArray;
    }

    /**
     * Get upsells by package.
     *
     * @param Package $package
     */
    public function getUpsellByPackage($package)
    {
        $p = $this->findOneBy(array('id' => $package->getId()));
        return $package->getUpsells();
    }

    /**
     * Get shop package by category.
     *
     * @param string $category           User's business category id.
     * @param string $userRoleId         User's role id.
     * @param object $currentUserPackage User's current shop package.
     *
     * @return Ambigous <multitype:, \Doctrine\ORM\mixed, NULL, mixed, \Doctrine\DBAL\Driver\Statement, \Doctrine\Common\Cache\mixed>
     */
    public function getShopPackageByCategory($category, $userRoleId, $currentUserPackage = null, $skipAdminPackages = true)
    {
        $resultArr = array();
        $query = $this->createQueryBuilder(self::ALIAS)
        ->andWhere(self::ALIAS.'.package_for = :package_for')
        ->andWhere(self::ALIAS.'.shop_category = :shop_category')
        ->andWhere(self::ALIAS.'.status = 1')
        ->setParameter('package_for', 'shop')
        ->setParameter('shop_category', $category);

        if ($skipAdminPackages) {
            $query->andWhere(self::ALIAS.'.is_admin_package = 0');
        }

        if ($currentUserPackage && $currentUserPackage->getPackage() && $currentUserPackage->getPackage()->getPrice()) {
            $query->andWhere(self::ALIAS.'.price >= '.$currentUserPackage->getPackage()->getPrice());
        }

        if ($userRoleId) {
            $query1 = $query;
            $query1->andWhere(self::ALIAS.'.role = :user_role');
            $query1->setParameter('user_role', $userRoleId);
            $resultArr = $query1->getQuery()->getResult();
        }
        if (empty($resultArr)) {
            $query2 = $query;
            $query2->andWhere(self::ALIAS.'.role = :user_role');
            $query2->setParameter('user_role', RoleRepository::ROLE_BUSINESS_SELLER_ID);
            $resultArr = $query2->getQuery()->getResult();
        }
        if (empty($resultArr)) {
            $query3 = $query;
            $query3->andWhere(self::ALIAS.'.role IS NULL');
            $resultArr = $query3->getQuery()->getResult();
        }

        return $resultArr;
    }

    /**
     * Get shop package by category.
     *
     * @param string $category
     *
     * @return Ambigous <multitype:, \Doctrine\ORM\mixed, NULL, mixed, \Doctrine\DBAL\Driver\Statement, \Doctrine\Common\Cache\mixed>
     */
    public function getSecondShopPackageByCategory($category)
    {
        $query = $this->createQueryBuilder(self::ALIAS)
        ->andWhere(self::ALIAS.'.package_for = :package_for')
        ->andWhere(self::ALIAS.'.shop_category = :shop_category')
        ->andWhere(self::ALIAS.'.sub_title = :sub_title')
        ->setParameter('package_for', 'shop')
        ->setParameter('sub_title', 'BEST FOR QUICK RESULTS')
        ->setParameter('shop_category', $category);

        return $query->getQuery()->getOneOrNullResult();
    }

    /**
     * Get free shop package by category.
     *
     * @param string $category
     *
     * @return Ambigous <\Doctrine\ORM\mixed, NULL, mixed, multitype:, \Doctrine\DBAL\Driver\Statement, \Doctrine\Common\Cache\mixed>
     */
    public function getFreeShopPackageByCategory($category)
    {
        $query = $this->createQueryBuilder(self::ALIAS)
        ->andWhere(self::ALIAS.'.package_for = :package_for')
        ->andWhere(self::ALIAS.'.shop_category = :shop_category')
        ->andWhere(self::ALIAS.'.price IS NULL OR '.self::ALIAS.'.price < 0')
        ->setParameter('package_for', 'shop')
        ->setParameter('shop_category', $category)
        ->andWhere(self::ALIAS.'.status = 1');

        return $query->getQuery()->getOneOrNullResult();
    }

    /**
     * Get shop package array by category.
     *
     * @param string $category
     * @param string $userRoleId
     *
     * @return multitype:string
     */
    public function getShopPackageArrayByCategory($category, $userRoleId, $skipAdminPackages = true)
    {
        $packages = $this->getShopPackageByCategory($category, $userRoleId, null, $skipAdminPackages);

        $packageArray = array();
        foreach ($packages as $package) {
            $packageArray[$package->getId()] = $package->getTitle().'('.$package->getSubTitle().')';
        }

        return $packageArray;
    }

    /**
     * Get package price
     *
     * @param object  $packageObj      Package object.
     * @param integer $packagePrintId  Package print id.
     * @param mixed   $isAdminLoggedIn Admin loggedin user.
     *
     * @return mixed
     */
    public function getPackagePrice($packageObj, $packagePrintId = null, $isAdminLoggedIn = null)
    {
        // For admin only package consider only admin price (admin price should be either 0 or more)
        // For admin side or if ad is posted by admin initially then consider admin price first (0 or more)
        // if admin price not available then consider regulart price

        if ($packagePrintId) {
            $packagePrintObj = $this->_em->getRepository('FaPromotionBundle:PackagePrint')->findOneBy(array('id' => $packagePrintId, 'package' => $packageObj->getId()));
            if ($packagePrintObj) {
                if ($packageObj->getIsAdminPackage()) {
                    return $packagePrintObj->getAdminPrice();
                } else {
                    if ($isAdminLoggedIn) {
                        return ($packagePrintObj->getAdminPrice() !== null ? $packagePrintObj->getAdminPrice() : $packagePrintObj->getPrice());
                    } else {
                        return $packagePrintObj->getPrice();
                    }
                }
            } else {
                return null;
            }
        } else {
            if ($packageObj->getIsAdminPackage()) {
                return $packageObj->getAdminPrice();
            } else {
                if ($isAdminLoggedIn) {
                    return ($packageObj->getAdminPrice() !== null ? $packageObj->getAdminPrice() : $packageObj->getPrice());
                } else {
                    return $packageObj->getPrice();
                }
            }
        }
    }

    /**
     * Get shop package profile exposure upsell by category id.
     *
     * @param string $categoryId Category id.
     * @param object $container  Container object.
     *
     * @return array
     */
    public function getShopPackageProfileExposureUpsellByCategory($categoryId, $container = null)
    {
        $packageProfileUpsellArray = array();
        if ($container) {
            $culture     = CommonManager::getCurrentCulture($container);
            $tableName   = $this->getPackageTableName();
            $cacheKey    = $tableName.'|'.__FUNCTION__.'|'.$categoryId.'_'.$culture;
            $cachedValue = CommonManager::getCacheVersion($container, $cacheKey);

            if ($cachedValue !== false) {
                return $cachedValue;
            }
        }

        $profileUpsellIds = $this->_em->getRepository('FaPromotionBundle:Upsell')->getProfileExposureUpsellIdsIdsArray();
        $rootCategoryId  = $this->_em->getRepository('FaEntityBundle:Category')->getRootCategoryId($categoryId, $container);

        $qb = $this->createQueryBuilder(self::ALIAS)
            ->select(self::ALIAS.'.id', UpsellRepository::ALIAS.'.value')
            ->leftJoin(self::ALIAS.'.upsells', UpsellRepository::ALIAS)
            ->andWhere(self::ALIAS.'.package_for = :package_for')
            ->andWhere(self::ALIAS.'.shop_category = :shop_category')
            ->setParameter('package_for', 'shop')
            ->setParameter('shop_category', $rootCategoryId)
            ->andWhere(UpsellRepository::ALIAS.'.id IN (:profileUpsellIds)')
            ->setParameter('profileUpsellIds', $profileUpsellIds)
            ->groupBy(self::ALIAS.'.id');

        $packageProfileUpsells = $qb->getQuery()->getResult();

        foreach ($packageProfileUpsells as $packageProfileUpsell) {
            $packageProfileUpsellArray[] = (!$packageProfileUpsell['value'] ? 0 : $packageProfileUpsell['value']);
        }

        if ($container) {
            CommonManager::setCacheVersion($container, $cacheKey, $packageProfileUpsellArray);
        }

        return $packageProfileUpsellArray;
    }

    /**
     * Get package table name.
     *
     * @return Ambigous <string, multitype:>
     */
    private function getPackageTableName()
    {
        return $this->_em->getClassMetadata('FaPromotionBundle:Package')->getTableName();
    }

    /**
     * Get shop package ids for profile exposure by category ids
     *
     * @param array  $categoryIds Category id.
     *
     * @return array
     */
    public function getShopPackageIdsArrayByCategoryForProfileExposure($categoryIds)
    {
        $packageIdArray   = array();
        $profileUpsellIds = $this->_em->getRepository('FaPromotionBundle:Upsell')->getProfileExposureUpsellIdsIdsArray();

        $qb = $this->createQueryBuilder(self::ALIAS)
        ->select(self::ALIAS.'.id')
        ->leftJoin(self::ALIAS.'.upsells', UpsellRepository::ALIAS)
        ->andWhere(self::ALIAS.'.package_for = :package_for')
        ->andWhere(self::ALIAS.'.shop_category IN (:shop_category)')
        ->setParameter('package_for', 'shop')
        ->setParameter('shop_category', $categoryIds)
        ->andWhere(UpsellRepository::ALIAS.'.id IN (:profileUpsellIds)')
        ->setParameter('profileUpsellIds', $profileUpsellIds)
        ->groupBy(self::ALIAS.'.id');

        $packageProfileUpsells = $qb->getQuery()->getResult();

        foreach ($packageProfileUpsells as $packageProfileUpsell) {
            $packageIdArray[] = $packageProfileUpsell['id'];
        }

        return $packageIdArray;
    }

    /**
     * Find Lowest category package price
     *
     * @param integer $adId
     * @param integer $userId
     * @param integer $categoryId
     * @param object  $container
     *
     * @return array
     */
    public function findLowestCategoryPackagePrice($adId, $userId, $categoryId, $isAdminPostedAd = false, $container)
    {
        $price = null;

        //get user roles.
        $systemUserRoles  = $this->_em->getRepository('FaUserBundle:Role')->getRoleArrayByType('C', $container);
        $userRole         = $this->_em->getRepository('FaUserBundle:User')->getUserRole($userId, $container);
        $userRolesArray[] = array_search($userRole, $systemUserRoles);

        // get active package.
        $activePackageArray = array();
        $activePackage      = null;
        $activePackage      = $this->_em->getRepository('FaAdBundle:AdUserPackage')->getActiveAdPackage($adId);
        if ($activePackage && $activePackage->getPackage()) {
            $activePackageArray[] = $activePackage->getPackage()->getId();
        }

        $locationGroupIds = $this->_em->getRepository('FaAdBundle:AdLocation')->getLocationGroupIdForAd($adId);
        $packages         = $this->_em->getRepository('FaPromotionBundle:PackageRule')->getActivePackagesByCategoryId($categoryId, $locationGroupIds, $userRolesArray, $activePackageArray, $container);

        foreach ($packages as $package) {
            $packageId = $package->getPackage()->getId();
            $printPackageDuration = $this->_em->getRepository('FaPromotionBundle:PackagePrint')->getPrintDurationForPackages(array($packageId));
            if ($isAdminPostedAd && isset($printPackageDuration[$packageId][0]['admin_price']) && $printPackageDuration[$packageId][0]['admin_price'] > 0) {
                $price = $printPackageDuration[$packageId][0]['admin_price'];
            } elseif ($isAdminPostedAd and $package->getPackage()->getAdminPrice() > 0) {
                $price = $package->getPackage()->getAdminPrice();
            } elseif (!$isAdminPostedAd && isset($printPackageDuration[$packageId][0]['price']) && $printPackageDuration[$packageId][0]['price'] > 0) {
                $price = $printPackageDuration[$packageId][0]['price'];
            } elseif (!$isAdminPostedAd and $package->getPackage()->getPrice() > 0) {
                $price = $package->getPackage()->getPrice();
            }
            break;
        }

        return $price;
    }

    /**
     * Add is admin package filter
     *
     * @param boolean $isAdminPackage
     */
    protected function addIsAdminPackageFilter($isAdminPackage = 1)
    {
        if ($isAdminPackage) {
            $this->queryBuilder->andWhere($this->getRepositoryAlias().'.is_admin_package =:is_admin_package')
                               ->setParameter('is_admin_package', $isAdminPackage);
        }
    }

    /**
     * Get print editions limit for packages.
     *
     * @param array $packageIds Array of package ids
     *
     * @return array
     */
    public function getPrintEditionLimitForPackages(array $packageIds)
    {
        $this->clear();
        // check for upsell
        $query = $this->createQueryBuilder(self::ALIAS)
        ->select(self::ALIAS, UpsellRepository::ALIAS)
        ->innerJoin(self::ALIAS.'.upsells', UpsellRepository::ALIAS)
        ->andWhere(UpsellRepository::ALIAS.'.id IN (:upsellIds)')
        ->setParameter('upsellIds', $this->_em->getRepository('FaPromotionBundle:Upsell')->getPrintPublicationUpsellIdsArray());

        if (count($packageIds)) {
            $query->andWhere(self::ALIAS.'.id IN (:packageIds)')
            ->setParameter('packageIds', $packageIds);
        }
        $printEditionPackages = $query->getQuery()->getResult();

        $printEditionLimits = array();
        foreach ($printEditionPackages as $printEditionPackage) {
            foreach ($printEditionPackage->getUpsells() as $packageUpsell) {
                if ($packageUpsell->getType() == UpsellRepository::UPSELL_TYPE_PRINT_EDITIONS_ID) {
                    $printEditionLimits[$printEditionPackage->getId()] = $packageUpsell->getValue();
                }
            }
        }
        $this->clear();

        return $printEditionLimits;
    }

    /**
     * Get print package.
     *
     * @return array
     */
    public function getPrintPackagesArray()
    {
        // check for upsell
        $query = $this->createQueryBuilder(self::ALIAS)
        ->select(self::ALIAS, UpsellRepository::ALIAS)
        ->innerJoin(self::ALIAS.'.upsells', UpsellRepository::ALIAS)
        ->andWhere(UpsellRepository::ALIAS.'.id IN (:upsellIds)')
        ->setParameter('upsellIds', $this->_em->getRepository('FaPromotionBundle:Upsell')->getPrintPublicationUpsellIdsArray());

        $printPackages = $query->getQuery()->getResult();

        $printPackageArray = array();
        foreach ($printPackages as $printPackage) {
            $printPackageArray[] = $printPackage->getId();
        }

        if (count($printPackageArray)) {
            $printPackageArray = array_unique($printPackageArray);
        }

        $this->clear();

        return $printPackageArray;
    }

    /**
     * Get package text array.
     *
     * @return array
     */
    public function getPackageTypeArray()
    {
        // check for upsell
        $query = $this->createQueryBuilder(self::ALIAS)
        ->select(self::ALIAS.'.package_text', self::ALIAS.'.package_sr_no')
        ->andWhere(self::ALIAS.'.package_for = :package_for')
        ->setParameter('package_for', 'ad')
        ->orderBy(self::ALIAS.'.package_sr_no', 'ASC')
        ->groupBy(self::ALIAS.'.package_sr_no');

        $packageTypes = $query->getQuery()->getResult();

        $packageTypeArray = array();
        foreach ($packageTypes as $packageType) {
            if ($packageType['package_sr_no'] && $packageType['package_text']) {
                $packageTypeArray[$packageType['package_sr_no']] = $packageType['package_text'];
            }
        }

        return $packageTypeArray;
    }

    /**
     * Get paid shop package by category.
     *
     * @param integer $categoryId Category id.
     * @param object  $container  Container object.
     *
     * @return array
     */
    public function getPaidShopPackagesByCategory($categoryId, $container)
    {
        if ($container) {
            $culture     = CommonManager::getCurrentCulture($container);
            $tableName   = $this->getPackageTableName();
            $cacheKey    = $tableName.'|'.__FUNCTION__.'|'.$categoryId.'_'.$culture;
            $cachedValue = CommonManager::getCacheVersion($container, $cacheKey);

            if ($cachedValue !== false) {
                return $cachedValue;
            }
        }

        $paidPackagesArray = array();
        $query = $this->createQueryBuilder(self::ALIAS)
            ->andWhere(self::ALIAS.'.package_for = :package_for')
            ->andWhere(self::ALIAS.'.shop_category = :shop_category')
            ->andWhere(self::ALIAS.'.price > 0')
            ->setParameter('package_for', 'shop')
            ->setParameter('shop_category', $categoryId);

        $paidPackages = $query->getQuery()->getResult();

        foreach ($paidPackages as $paidPackage) {
            $paidPackagesArray[$paidPackage->getId()] = $paidPackage->getTitle();
        }

        if ($container) {
            CommonManager::setCacheVersion($container, $cacheKey, $paidPackagesArray);
        }

        return $paidPackagesArray;
    }

    /**
     * Check is package is valid for credit.
     *
     * @param object $package                 Package object.
     * @param array  $userActiveCredits       User's active credit array.
     * @param array  $activeShopPackageDetail User's active shop package detail.
     *
     * @return boolean
     */
    public function isPackageValidForCredit($package, $userActiveCredits, $activeShopPackageDetail)
    {
        $packageSrNo = $package->getPackageSrNo();
        $isValidForCredit = false;
        if ($packageSrNo && count($userActiveCredits)) {
            foreach ($userActiveCredits as $userActiveCreditId => $userActiveCredit) {
                if ($userActiveCredit['credit'] > 0 && in_array($packageSrNo, $userActiveCredit['package_sr_no'])) {
                    if ($userActiveCredit['paid_user_only'] && count($activeShopPackageDetail) && $activeShopPackageDetail['price'] > 0) {
                        $isValidForCredit = $userActiveCreditId;
                        break;
                    } else {
                        $isValidForCredit = $userActiveCreditId;
                        break;
                    }
                }
            }
        }

        return $isValidForCredit;
    }
    
    /**
     * Get featured top upsell for packages.
     *
     * @param integer $packageId of package
     *
     * @return array
     */
    public function getFeaturedTopUpsell($packageId = '')
    {
        // check for upsell
        $query = $this->createQueryBuilder(self::ALIAS)
        ->select(self::ALIAS, UpsellRepository::ALIAS)
        ->innerJoin(self::ALIAS.'.upsells', UpsellRepository::ALIAS)
        ->andWhere(UpsellRepository::ALIAS.'.type = :upsellType')
        ->setParameter('upsellType', UpsellRepository::UPSELL_TYPE_TOP_ADVERT_ID)
        ->setMaxResults(1);
        
        if ($packageId != '') {
            $query->andWhere(self::ALIAS.'.id = :packageId')
            ->setParameter('packageId', $packageId);
        }
        $featuredUpsell = $query->getQuery()->getOneOrNullResult();
        return $featuredUpsell;
    }
    
    /**
     * Get featured top upsell for packages.
     *
     * @param integer $packageId of package
     *
     * @return array
     */
    public function getPackageFeturedTopUpsellPrice($packages = [])
    {
        if (!empty($packages)) {
            $packageInfo = [];
            //loop through all show packages
            foreach ($packages as $package) {
                $availablePackageIds[] = $package->getPackage()->getId();
            }
            if (!empty($availablePackageIds)) {
                $packageId = $this->_em->getRepository('FaAdBundle:Ad')->getFeaturedAdForUpgrade($availablePackageIds);
                if (!empty($packageId)) {
                    $packageResult = $this->find($packageId);
                    if ($packageResult) {
                        $packageInfo['title'] = $packageResult->getTitle();
                        $packageInfo['price'] = $packageResult->getPrice();
                    }
                }
            }
            return $packageInfo;
        }
    }
}
